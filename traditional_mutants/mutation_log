AORB_1:24:double_add_two_array_values(int,int,int):a[j] / 2.0 => a[j] * 2.0
AORB_2:24:double_add_two_array_values(int,int,int):a[j] / 2.0 => a[j] % 2.0
AORB_3:24:double_add_two_array_values(int,int,int):a[j] / 2.0 => a[j] + 2.0
AORB_4:24:double_add_two_array_values(int,int,int):a[j] / 2.0 => a[j] - 2.0
AORB_5:24:double_add_two_array_values(int,int,int):a[i] + a[j] / 2.0 => a[i] * (a[j] / 2.0)
AORB_6:24:double_add_two_array_values(int,int,int):a[i] + a[j] / 2.0 => a[i] / (a[j] / 2.0)
AORB_7:24:double_add_two_array_values(int,int,int):a[i] + a[j] / 2.0 => a[i] % (a[j] / 2.0)
AORB_8:24:double_add_two_array_values(int,int,int):a[i] + a[j] / 2.0 => a[i] - a[j] / 2.0
AORB_9:33:int_bubble(int):a.length - 2 => a.length * 2
AORB_10:33:int_bubble(int):a.length - 2 => a.length / 2
AORB_11:33:int_bubble(int):a.length - 2 => a.length % 2
AORB_12:33:int_bubble(int):a.length - 2 => a.length + 2
AORB_13:35:int_bubble(int):j + 1 => j * 1
AORB_14:35:int_bubble(int):j + 1 => j / 1
AORB_15:35:int_bubble(int):j + 1 => j % 1
AORB_16:35:int_bubble(int):j + 1 => j - 1
AORB_17:37:int_bubble(int):j + 1 => j * 1
AORB_18:37:int_bubble(int):j + 1 => j / 1
AORB_19:37:int_bubble(int):j + 1 => j % 1
AORB_20:37:int_bubble(int):j + 1 => j - 1
AORB_21:38:int_bubble(int):j + 1 => j * 1
AORB_22:38:int_bubble(int):j + 1 => j / 1
AORB_23:38:int_bubble(int):j + 1 => j % 1
AORB_24:38:int_bubble(int):j + 1 => j - 1
AORB_25:52:int_shell_sort(int):a.length / 2 => a.length * 2
AORB_26:52:int_shell_sort(int):a.length / 2 => a.length % 2
AORB_27:52:int_shell_sort(int):a.length / 2 => a.length + 2
AORB_28:52:int_shell_sort(int):a.length / 2 => a.length - 2
AORB_29:54:int_shell_sort(int):j - m => j * m
AORB_30:54:int_shell_sort(int):j - m => j / m
AORB_31:54:int_shell_sort(int):j - m => j % m
AORB_32:54:int_shell_sort(int):j - m => j + m
AORB_33:55:int_shell_sort(int):i + m => i * m
AORB_34:55:int_shell_sort(int):i + m => i / m
AORB_35:55:int_shell_sort(int):i + m => i % m
AORB_36:55:int_shell_sort(int):i + m => i - m
AORB_37:59:int_shell_sort(int):i + m => i * m
AORB_38:59:int_shell_sort(int):i + m => i / m
AORB_39:59:int_shell_sort(int):i + m => i % m
AORB_40:59:int_shell_sort(int):i + m => i - m
AORB_41:60:int_shell_sort(int):i + m => i * m
AORB_42:60:int_shell_sort(int):i + m => i / m
AORB_43:60:int_shell_sort(int):i + m => i % m
AORB_44:60:int_shell_sort(int):i + m => i - m
AORB_45:84:int_selection_sort(int):list.length - 1 => list.length * 1
AORB_46:84:int_selection_sort(int):list.length - 1 => list.length / 1
AORB_47:84:int_selection_sort(int):list.length - 1 => list.length % 1
AORB_48:84:int_selection_sort(int):list.length - 1 => list.length + 1
AORB_49:86:int_selection_sort(int):i + 1 => i * 1
AORB_50:86:int_selection_sort(int):i + 1 => i / 1
AORB_51:86:int_selection_sort(int):i + 1 => i % 1
AORB_52:86:int_selection_sort(int):i + 1 => i - 1
AORB_53:103:int_add_values_in_two_arrays(int,int,int):a[i] + b[i] => a[i] * b[i]
AORB_54:103:int_add_values_in_two_arrays(int,int,int):a[i] + b[i] => a[i] / b[i]
AORB_55:103:int_add_values_in_two_arrays(int,int,int):a[i] + b[i] => a[i] % b[i]
AORB_56:103:int_add_values_in_two_arrays(int,int,int):a[i] + b[i] => a[i] - b[i]
AORB_57:112:int_dot_product(int,int):a[i] * b[i] => a[i] / b[i]
AORB_58:112:int_dot_product(int,int):a[i] * b[i] => a[i] % b[i]
AORB_59:112:int_dot_product(int,int):a[i] * b[i] => a[i] + b[i]
AORB_60:112:int_dot_product(int,int):a[i] * b[i] => a[i] - b[i]
AORB_61:122:int_array_calc1(int,int):a[i] / k => a[i] * k
AORB_62:122:int_array_calc1(int,int):a[i] / k => a[i] % k
AORB_63:122:int_array_calc1(int,int):a[i] / k => a[i] + k
AORB_64:122:int_array_calc1(int,int):a[i] / k => a[i] - k
AORB_65:140:int_get_array_value(int,int):k - 1 => k * 1
AORB_66:140:int_get_array_value(int,int):k - 1 => k / 1
AORB_67:140:int_get_array_value(int,int):k - 1 => k % 1
AORB_68:140:int_get_array_value(int,int):k - 1 => k + 1
AORB_69:140:int_get_array_value(int,int):k - 1 => k * 1
AORB_70:140:int_get_array_value(int,int):k - 1 => k / 1
AORB_71:140:int_get_array_value(int,int):k - 1 => k % 1
AORB_72:140:int_get_array_value(int,int):k - 1 => k + 1
AORB_73:143:int_get_array_value(int,int):k - 1 => k * 1
AORB_74:143:int_get_array_value(int,int):k - 1 => k / 1
AORB_75:143:int_get_array_value(int,int):k - 1 => k % 1
AORB_76:143:int_get_array_value(int,int):k - 1 => k + 1
AORB_77:164:int_find_diff(int,int):a[i] - b[i] => a[i] * b[i]
AORB_78:164:int_find_diff(int,int):a[i] - b[i] => a[i] / b[i]
AORB_79:164:int_find_diff(int,int):a[i] - b[i] => a[i] % b[i]
AORB_80:164:int_find_diff(int,int):a[i] - b[i] => a[i] + b[i]
AORB_81:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i] * b[i]
AORB_82:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i] / b[i]
AORB_83:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i] % b[i]
AORB_84:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i] + b[i]
AORB_85:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i] * b[i]
AORB_86:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i] / b[i]
AORB_87:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i] % b[i]
AORB_88:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i] + b[i]
AORB_89:184:double_find_euc_dist(int,int):(a[i] - b[i]) * (a[i] - b[i]) => (a[i] - b[i]) / (a[i] - b[i])
AORB_90:184:double_find_euc_dist(int,int):(a[i] - b[i]) * (a[i] - b[i]) => (a[i] - b[i]) % (a[i] - b[i])
AORB_91:184:double_find_euc_dist(int,int):(a[i] - b[i]) * (a[i] - b[i]) => a[i] - b[i] + (a[i] - b[i])
AORB_92:184:double_find_euc_dist(int,int):(a[i] - b[i]) * (a[i] - b[i]) => a[i] - b[i] - (a[i] - b[i])
AORB_93:195:double_find_magnitude(int):a[i] * a[i] => a[i] / a[i]
AORB_94:195:double_find_magnitude(int):a[i] * a[i] => a[i] % a[i]
AORB_95:195:double_find_magnitude(int):a[i] * a[i] => a[i] + a[i]
AORB_96:195:double_find_magnitude(int):a[i] * a[i] => a[i] - a[i]
AORB_97:206:double_manhattan_dist(int,int):a[i] - b[i] => a[i] * b[i]
AORB_98:206:double_manhattan_dist(int,int):a[i] - b[i] => a[i] / b[i]
AORB_99:206:double_manhattan_dist(int,int):a[i] - b[i] => a[i] % b[i]
AORB_100:206:double_manhattan_dist(int,int):a[i] - b[i] => a[i] + b[i]
AORB_101:217:double_average(int):sum / a.length => sum * a.length
AORB_102:217:double_average(int):sum / a.length => sum % a.length
AORB_103:217:double_average(int):sum / a.length => sum + a.length
AORB_104:217:double_average(int):sum / a.length => sum - a.length
AORB_105:231:double_expr1(double,double):b - a => b * a
AORB_106:231:double_expr1(double,double):b - a => b / a
AORB_107:231:double_expr1(double,double):b - a => b % a
AORB_108:231:double_expr1(double,double):b - a => b + a
AORB_109:231:double_expr1(double,double):(b - a) / a => (b - a) * a
AORB_110:231:double_expr1(double,double):(b - a) / a => (b - a) % a
AORB_111:231:double_expr1(double,double):(b - a) / a => b - a + a
AORB_112:231:double_expr1(double,double):(b - a) / a => b - a - a
AORB_113:248:int_find_max2(int):a[0] + a[1] => a[0] * a[1]
AORB_114:248:int_find_max2(int):a[0] + a[1] => a[0] / a[1]
AORB_115:248:int_find_max2(int):a[0] + a[1] => a[0] % a[1]
AORB_116:248:int_find_max2(int):a[0] + a[1] => a[0] - a[1]
AORB_117:249:int_find_max2(int):a.length - 1 => a.length * 1
AORB_118:249:int_find_max2(int):a.length - 1 => a.length / 1
AORB_119:249:int_find_max2(int):a.length - 1 => a.length % 1
AORB_120:249:int_find_max2(int):a.length - 1 => a.length + 1
AORB_121:250:int_find_max2(int):i + 1 => i * 1
AORB_122:250:int_find_max2(int):i + 1 => i / 1
AORB_123:250:int_find_max2(int):i + 1 => i % 1
AORB_124:250:int_find_max2(int):i + 1 => i - 1
AORB_125:250:int_find_max2(int):a[i] + a[i + 1] => a[i] * a[i + 1]
AORB_126:250:int_find_max2(int):a[i] + a[i + 1] => a[i] / a[i + 1]
AORB_127:250:int_find_max2(int):a[i] + a[i + 1] => a[i] % a[i + 1]
AORB_128:250:int_find_max2(int):a[i] + a[i + 1] => a[i] - a[i + 1]
AORB_129:251:int_find_max2(int):i + 1 => i * 1
AORB_130:251:int_find_max2(int):i + 1 => i / 1
AORB_131:251:int_find_max2(int):i + 1 => i % 1
AORB_132:251:int_find_max2(int):i + 1 => i - 1
AORB_133:251:int_find_max2(int):a[i] + a[i + 1] => a[i] * a[i + 1]
AORB_134:251:int_find_max2(int):a[i] + a[i + 1] => a[i] / a[i + 1]
AORB_135:251:int_find_max2(int):a[i] + a[i + 1] => a[i] % a[i + 1]
AORB_136:251:int_find_max2(int):a[i] + a[i + 1] => a[i] - a[i + 1]
AORB_137:264:double_variance(double):sum + x[i] => sum * x[i]
AORB_138:264:double_variance(double):sum + x[i] => sum / x[i]
AORB_139:264:double_variance(double):sum + x[i] => sum % x[i]
AORB_140:264:double_variance(double):sum + x[i] => sum - x[i]
AORB_141:266:double_variance(double):sum / (double) x.length => sum * (double) x.length
AORB_142:266:double_variance(double):sum / (double) x.length => sum % (double) x.length
AORB_143:266:double_variance(double):sum / (double) x.length => sum + (double) x.length
AORB_144:266:double_variance(double):sum / (double) x.length => sum - (double) x.length
AORB_145:268:double_variance(double):x[i] - avrg => x[i] * avrg
AORB_146:268:double_variance(double):x[i] - avrg => x[i] / avrg
AORB_147:268:double_variance(double):x[i] - avrg => x[i] % avrg
AORB_148:268:double_variance(double):x[i] - avrg => x[i] + avrg
AORB_149:268:double_variance(double):x[i] - avrg => x[i] * avrg
AORB_150:268:double_variance(double):x[i] - avrg => x[i] / avrg
AORB_151:268:double_variance(double):x[i] - avrg => x[i] % avrg
AORB_152:268:double_variance(double):x[i] - avrg => x[i] + avrg
AORB_153:268:double_variance(double):(x[i] - avrg) * (x[i] - avrg) => (x[i] - avrg) / (x[i] - avrg)
AORB_154:268:double_variance(double):(x[i] - avrg) * (x[i] - avrg) => (x[i] - avrg) % (x[i] - avrg)
AORB_155:268:double_variance(double):(x[i] - avrg) * (x[i] - avrg) => x[i] - avrg + (x[i] - avrg)
AORB_156:268:double_variance(double):(x[i] - avrg) * (x[i] - avrg) => x[i] - avrg - (x[i] - avrg)
AORB_157:268:double_variance(double):sum1 + (x[i] - avrg) * (x[i] - avrg) => sum1 * ((x[i] - avrg) * (x[i] - avrg))
AORB_158:268:double_variance(double):sum1 + (x[i] - avrg) * (x[i] - avrg) => sum1 / ((x[i] - avrg) * (x[i] - avrg))
AORB_159:268:double_variance(double):sum1 + (x[i] - avrg) * (x[i] - avrg) => sum1 % ((x[i] - avrg) * (x[i] - avrg))
AORB_160:268:double_variance(double):sum1 + (x[i] - avrg) * (x[i] - avrg) => sum1 - (x[i] - avrg) * (x[i] - avrg)
AORB_161:270:double_variance(double):sum1 / (double) x.length => sum1 * (double) x.length
AORB_162:270:double_variance(double):sum1 / (double) x.length => sum1 % (double) x.length
AORB_163:270:double_variance(double):sum1 / (double) x.length => sum1 + (double) x.length
AORB_164:270:double_variance(double):sum1 / (double) x.length => sum1 - (double) x.length
AORB_165:279:int_insertion_sort(int):j - 1 => j * 1
AORB_166:279:int_insertion_sort(int):j - 1 => j / 1
AORB_167:279:int_insertion_sort(int):j - 1 => j % 1
AORB_168:279:int_insertion_sort(int):j - 1 => j + 1
AORB_169:280:int_insertion_sort(int):j - 1 => j * 1
AORB_170:280:int_insertion_sort(int):j - 1 => j / 1
AORB_171:280:int_insertion_sort(int):j - 1 => j % 1
AORB_172:280:int_insertion_sort(int):j - 1 => j + 1
AORB_173:294:double_geometric_mean(int):(double) 1 / a.length => (double) 1 * a.length
AORB_174:294:double_geometric_mean(int):(double) 1 / a.length => (double) 1 % a.length
AORB_175:294:double_geometric_mean(int):(double) 1 / a.length => (double) 1 + a.length
AORB_176:294:double_geometric_mean(int):(double) 1 / a.length => (double) 1 - a.length
AORB_177:301:double_mean_absolute_error(int,int):a[i] - b[i] => a[i] * b[i]
AORB_178:301:double_mean_absolute_error(int,int):a[i] - b[i] => a[i] / b[i]
AORB_179:301:double_mean_absolute_error(int,int):a[i] - b[i] => a[i] % b[i]
AORB_180:301:double_mean_absolute_error(int,int):a[i] - b[i] => a[i] + b[i]
AORB_181:303:double_mean_absolute_error(int,int):(double) sum / a.length => (double) sum * a.length
AORB_182:303:double_mean_absolute_error(int,int):(double) sum / a.length => (double) sum % a.length
AORB_183:303:double_mean_absolute_error(int,int):(double) sum / a.length => (double) sum + a.length
AORB_184:303:double_mean_absolute_error(int,int):(double) sum / a.length => (double) sum - a.length
AORB_185:308:double_find_median(int):a.length / 2 => a.length * 2
AORB_186:308:double_find_median(int):a.length / 2 => a.length % 2
AORB_187:308:double_find_median(int):a.length / 2 => a.length + 2
AORB_188:308:double_find_median(int):a.length / 2 => a.length - 2
AORB_189:308:double_find_median(int):a.length / 2 + 1 => a.length / 2 * 1
AORB_190:308:double_find_median(int):a.length / 2 + 1 => a.length / 2 / 1
AORB_191:308:double_find_median(int):a.length / 2 + 1 => a.length / 2 % 1
AORB_192:308:double_find_median(int):a.length / 2 + 1 => a.length / 2 - 1
AORB_193:324:double_find_median(int):a.length % 2 => a.length * 2
AORB_194:324:double_find_median(int):a.length % 2 => a.length / 2
AORB_195:324:double_find_median(int):a.length % 2 => a.length + 2
AORB_196:324:double_find_median(int):a.length % 2 => a.length - 2
AORB_197:325:double_find_median(int):a.length / 2 => a.length * 2
AORB_198:325:double_find_median(int):a.length / 2 => a.length % 2
AORB_199:325:double_find_median(int):a.length / 2 => a.length + 2
AORB_200:325:double_find_median(int):a.length / 2 => a.length - 2
AORB_201:325:double_find_median(int):a.length / 2 - 1 => a.length / 2 * 1
AORB_202:325:double_find_median(int):a.length / 2 - 1 => a.length / 2 / 1
AORB_203:325:double_find_median(int):a.length / 2 - 1 => a.length / 2 % 1
AORB_204:325:double_find_median(int):a.length / 2 - 1 => a.length / 2 + 1
AORB_205:325:double_find_median(int):a.length / 2 => a.length * 2
AORB_206:325:double_find_median(int):a.length / 2 => a.length % 2
AORB_207:325:double_find_median(int):a.length / 2 => a.length + 2
AORB_208:325:double_find_median(int):a.length / 2 => a.length - 2
AORB_209:325:double_find_median(int):a[a.length / 2 - 1] + a[a.length / 2] => a[a.length / 2 - 1] * a[a.length / 2]
AORB_210:325:double_find_median(int):a[a.length / 2 - 1] + a[a.length / 2] => a[a.length / 2 - 1] / a[a.length / 2]
AORB_211:325:double_find_median(int):a[a.length / 2 - 1] + a[a.length / 2] => a[a.length / 2 - 1] % a[a.length / 2]
AORB_212:325:double_find_median(int):a[a.length / 2 - 1] + a[a.length / 2] => a[a.length / 2 - 1] - a[a.length / 2]
AORB_213:325:double_find_median(int):(double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2 => (double) (a[a.length / 2 - 1] + a[a.length / 2]) * 2
AORB_214:325:double_find_median(int):(double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2 => (double) (a[a.length / 2 - 1] + a[a.length / 2]) % 2
AORB_215:325:double_find_median(int):(double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2 => (double) (a[a.length / 2 - 1] + a[a.length / 2]) + 2
AORB_216:325:double_find_median(int):(double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2 => (double) (a[a.length / 2 - 1] + a[a.length / 2]) - 2
AORB_217:327:double_find_median(int):a.length / 2 => a.length * 2
AORB_218:327:double_find_median(int):a.length / 2 => a.length % 2
AORB_219:327:double_find_median(int):a.length / 2 => a.length + 2
AORB_220:327:double_find_median(int):a.length / 2 => a.length - 2
AORB_221:333:int_cartesian_product(int,int):a.length * b.length => a.length / b.length
AORB_222:333:int_cartesian_product(int,int):a.length * b.length => a.length % b.length
AORB_223:333:int_cartesian_product(int,int):a.length * b.length => a.length + b.length
AORB_224:333:int_cartesian_product(int,int):a.length * b.length => a.length - b.length
AORB_225:362:boolean_check_equal_tolerance(double,double,double):a[i] - b[i] => a[i] * b[i]
AORB_226:362:boolean_check_equal_tolerance(double,double,double):a[i] - b[i] => a[i] / b[i]
AORB_227:362:boolean_check_equal_tolerance(double,double,double):a[i] - b[i] => a[i] % b[i]
AORB_228:362:boolean_check_equal_tolerance(double,double,double):a[i] - b[i] => a[i] + b[i]
AORB_229:387:double_weighted_average(double,double):a[i] * b[i] => a[i] / b[i]
AORB_230:387:double_weighted_average(double,double):a[i] * b[i] => a[i] % b[i]
AORB_231:387:double_weighted_average(double,double):a[i] * b[i] => a[i] + b[i]
AORB_232:387:double_weighted_average(double,double):a[i] * b[i] => a[i] - b[i]
AORB_233:390:double_weighted_average(double,double):sum1 / sum2 => sum1 * sum2
AORB_234:390:double_weighted_average(double,double):sum1 / sum2 => sum1 % sum2
AORB_235:390:double_weighted_average(double,double):sum1 / sum2 => sum1 + sum2
AORB_236:390:double_weighted_average(double,double):sum1 / sum2 => sum1 - sum2
AORS_1:13:int_add_values(int):i++ => i--
AORS_2:33:int_bubble(int):i-- => i++
AORS_3:34:int_bubble(int):j++ => j--
AORS_4:53:int_shell_sort(int):j++ => j--
AORS_5:71:int_sequential_search(int,int):i++ => i--
AORS_6:84:int_selection_sort(int):i++ => i--
AORS_7:86:int_selection_sort(int):j++ => j--
AORS_8:111:int_dot_product(int,int):i++ => i--
AORS_9:121:int_array_calc1(int,int):i++ => i--
AORS_10:130:int_set_min_val(int,int):i++ => i--
AORS_11:151:int_find_min(int):i++ => i--
AORS_12:163:int_find_diff(int,int):i++ => i--
AORS_13:173:int_array_copy(int):i++ => i--
AORS_14:183:double_find_euc_dist(int,int):i++ => i--
AORS_15:194:double_find_magnitude(int):i++ => i--
AORS_16:205:double_manhattan_dist(int,int):i++ => i--
AORS_17:214:double_average(int):i++ => i--
AORS_18:223:int_dec_array(int,int):i++ => i--
AORS_19:238:int_find_max(int):i++ => i--
AORS_20:249:int_find_max2(int):i++ => i--
AORS_21:263:double_variance(double):i++ => i--
AORS_22:267:double_variance(double):i++ => i--
AORS_23:276:int_insertion_sort(int):i++ => i--
AORS_24:281:int_insertion_sort(int):j-- => j++
AORS_25:291:double_geometric_mean(int):i++ => i--
AORS_26:300:double_mean_absolute_error(int,int):i++ => i--
AORS_27:311:double_find_median(int):i++ => i--
AORS_28:314:double_find_median(int):j++ => j--
AORS_29:335:int_cartesian_product(int,int):i++ => i--
AORS_30:336:int_cartesian_product(int,int):j++ => j--
AORS_31:339:int_cartesian_product(int,int):cnt++ => cnt--
AORS_32:349:int_reverse(int):i-- => i++
AORS_33:351:int_reverse(int):cnt++ => cnt--
AORS_34:361:boolean_check_equal_tolerance(double,double,double):i++ => i--
AORS_35:374:boolean_check_equal(int,int):i++ => i--
AORS_36:386:double_weighted_average(double,double):i++ => i--
AORS_37:396:int_count_k(int,int):i++ => i--
AORS_38:398:int_count_k(int,int):cnt++ => cnt--
AORS_39:407:int_clip(int,int,int):i++ => i--
AORS_40:424:int_elementwise_max(int,int):i++ => i--
AORS_41:437:int_elementwise_min(int,int):i++ => i--
AORS_42:450:int_count_non_zeroes(int):i++ => i--
AORS_43:452:int_count_non_zeroes(int):cnt++ => cnt--
AORS_44:461:int_cnt_zeroes(int):i++ => i--
AORS_45:463:int_cnt_zeroes(int):cnt++ => cnt--
AORS_46:472:boolean_elementwise_equal(int,int):i++ => i--
AORS_47:485:boolean_elementwise_not_equal(int,int):i++ => i--
AORS_48:498:int_hamming_dist(int,int):i++ => i--
AORS_49:500:int_hamming_dist(int,int):cnt++ => cnt--
AODU_1:22:double_add_two_array_values(int,int,int):-100000 => 100000
AODU_2:76:int_sequential_search(int,int):-1 => 1
AODU_3:101:int_add_values_in_two_arrays(int,int,int):-100000 => 100000
AODU_4:141:int_get_array_value(int,int):-100000 => 100000
AODS_1:281:int_insertion_sort(int):j-- => j
AODS_2:339:int_cartesian_product(int,int):cnt++ => cnt
AODS_3:351:int_reverse(int):cnt++ => cnt
AODS_4:398:int_count_k(int,int):cnt++ => cnt
AODS_5:452:int_count_non_zeroes(int):cnt++ => cnt
AODS_6:463:int_cnt_zeroes(int):cnt++ => cnt
AODS_7:500:int_hamming_dist(int,int):cnt++ => cnt
AOIU_1:14:int_add_values(int):i => -i
AOIU_2:16:int_add_values(int):sum => -sum
AOIU_3:24:double_add_two_array_values(int,int,int):i => -i
AOIU_4:33:int_bubble(int):a.length => -a.length
AOIU_5:36:int_bubble(int):j => -j
AOIU_6:37:int_bubble(int):j => -j
AOIU_7:38:int_bubble(int):t => -t
AOIU_8:52:int_shell_sort(int):a.length => -a.length
AOIU_9:53:int_shell_sort(int):m => -m
AOIU_10:54:int_shell_sort(int):j => -j
AOIU_11:54:int_shell_sort(int):m => -m
AOIU_12:58:int_shell_sort(int):i => -i
AOIU_13:59:int_shell_sort(int):i => -i
AOIU_14:60:int_shell_sort(int):mid => -mid
AOIU_15:73:int_sequential_search(int,int):i => -i
AOIU_16:85:int_selection_sort(int):i => -i
AOIU_17:86:int_selection_sort(int):i => -i
AOIU_18:88:int_selection_sort(int):j => -j
AOIU_19:91:int_selection_sort(int):i => -i
AOIU_20:92:int_selection_sort(int):min => -min
AOIU_21:93:int_selection_sort(int):tmp => -tmp
AOIU_22:103:int_add_values_in_two_arrays(int,int,int):i => -i
AOIU_23:112:int_dot_product(int,int):i => -i
AOIU_24:112:int_dot_product(int,int):i => -i
AOIU_25:114:int_dot_product(int,int):sum => -sum
AOIU_26:120:int_array_calc1(int,int):a.length => -a.length
AOIU_27:122:int_array_calc1(int,int):i => -i
AOIU_28:122:int_array_calc1(int,int):k => -k
AOIU_29:132:int_set_min_val(int,int):k => -k
AOIU_30:143:int_get_array_value(int,int):k => -k
AOIU_31:153:int_find_min(int):i => -i
AOIU_32:156:int_find_min(int):min => -min
AOIU_33:162:int_find_diff(int,int):a.length => -a.length
AOIU_34:164:int_find_diff(int,int):i => -i
AOIU_35:172:int_array_copy(int):a.length => -a.length
AOIU_36:174:int_array_copy(int):i => -i
AOIU_37:184:double_find_euc_dist(int,int):i => -i
AOIU_38:184:double_find_euc_dist(int,int):i => -i
AOIU_39:186:double_find_euc_dist(int,int):sum => -sum
AOIU_40:187:double_find_euc_dist(int,int):result => -result
AOIU_41:195:double_find_magnitude(int):i => -i
AOIU_42:195:double_find_magnitude(int):i => -i
AOIU_43:197:double_find_magnitude(int):sum => -sum
AOIU_44:198:double_find_magnitude(int):result => -result
AOIU_45:206:double_manhattan_dist(int,int):i => -i
AOIU_46:208:double_manhattan_dist(int,int):sum => -sum
AOIU_47:215:double_average(int):i => -i
AOIU_48:217:double_average(int):sum => -sum
AOIU_49:224:int_dec_array(int,int):k => -k
AOIU_50:231:double_expr1(double,double):b => -b
AOIU_51:231:double_expr1(double,double):a => -a
AOIU_52:232:double_expr1(double,double):result => -result
AOIU_53:240:int_find_max(int):i => -i
AOIU_54:243:int_find_max(int):max => -max
AOIU_55:251:int_find_max2(int):i => -i
AOIU_56:254:int_find_max2(int):max => -max
AOIU_57:264:double_variance(double):sum => -sum
AOIU_58:266:double_variance(double):sum => -sum
AOIU_59:266:double_variance(double):x.length => -x.length
AOIU_60:268:double_variance(double):sum1 => -sum1
AOIU_61:270:double_variance(double):sum1 => -sum1
AOIU_62:270:double_variance(double):x.length => -x.length
AOIU_63:271:double_variance(double):var => -var
AOIU_64:277:int_insertion_sort(int):i => -i
AOIU_65:278:int_insertion_sort(int):i => -i
AOIU_66:280:int_insertion_sort(int):j => -j
AOIU_67:283:int_insertion_sort(int):B => -B
AOIU_68:292:double_geometric_mean(int):i => -i
AOIU_69:294:double_geometric_mean(int):product => -product
AOIU_70:294:double_geometric_mean(int):a.length => -a.length
AOIU_71:301:double_mean_absolute_error(int,int):i => -i
AOIU_72:303:double_mean_absolute_error(int,int):sum => -sum
AOIU_73:303:double_mean_absolute_error(int,int):a.length => -a.length
AOIU_74:308:double_find_median(int):a.length => -a.length
AOIU_75:312:double_find_median(int):i => -i
AOIU_76:313:double_find_median(int):i => -i
AOIU_77:316:double_find_median(int):j => -j
AOIU_78:317:double_find_median(int):j => -j
AOIU_79:320:double_find_median(int):i => -i
AOIU_80:321:double_find_median(int):minIndex => -minIndex
AOIU_81:322:double_find_median(int):temp => -temp
AOIU_82:325:double_find_median(int):a.length => -a.length
AOIU_83:327:double_find_median(int):a.length => -a.length
AOIU_84:333:int_cartesian_product(int,int):a.length => -a.length
AOIU_85:337:int_cartesian_product(int,int):i => -i
AOIU_86:338:int_cartesian_product(int,int):j => -j
AOIU_87:347:int_reverse(int):a.length => -a.length
AOIU_88:350:int_reverse(int):i => -i
AOIU_89:387:double_weighted_average(double,double):i => -i
AOIU_90:387:double_weighted_average(double,double):i => -i
AOIU_91:388:double_weighted_average(double,double):i => -i
AOIU_92:390:double_weighted_average(double,double):sum1 => -sum1
AOIU_93:401:int_count_k(int,int):cnt => -cnt
AOIU_94:406:int_clip(int,int,int):a.length => -a.length
AOIU_95:409:int_clip(int,int,int):lowerLim => -lowerLim
AOIU_96:412:int_clip(int,int,int):upperLim => -upperLim
AOIU_97:414:int_clip(int,int,int):i => -i
AOIU_98:423:int_elementwise_max(int,int):a.length => -a.length
AOIU_99:426:int_elementwise_max(int,int):i => -i
AOIU_100:428:int_elementwise_max(int,int):i => -i
AOIU_101:436:int_elementwise_min(int,int):a.length => -a.length
AOIU_102:439:int_elementwise_min(int,int):i => -i
AOIU_103:441:int_elementwise_min(int,int):i => -i
AOIU_104:455:int_count_non_zeroes(int):cnt => -cnt
AOIU_105:466:int_cnt_zeroes(int):cnt => -cnt
AOIU_106:471:boolean_elementwise_equal(int,int):a.length => -a.length
AOIU_107:484:boolean_elementwise_not_equal(int,int):a.length => -a.length
AOIU_108:503:int_hamming_dist(int,int):cnt => -cnt
AOIS_1:13:int_add_values(int):i => ++i
AOIS_2:13:int_add_values(int):i => --i
AOIS_3:13:int_add_values(int):i => i++
AOIS_4:13:int_add_values(int):i => i--
AOIS_5:13:int_add_values(int):a.length => ++a.length
AOIS_6:13:int_add_values(int):a.length => --a.length
AOIS_7:13:int_add_values(int):a.length => a.length++
AOIS_8:13:int_add_values(int):a.length => a.length--
AOIS_9:14:int_add_values(int):i => ++i
AOIS_10:14:int_add_values(int):i => --i
AOIS_11:14:int_add_values(int):i => i++
AOIS_12:14:int_add_values(int):i => i--
AOIS_13:16:int_add_values(int):sum => sum++
AOIS_14:16:int_add_values(int):sum => sum--
AOIS_15:21:double_add_two_array_values(int,int,int):i => ++i
AOIS_16:21:double_add_two_array_values(int,int,int):i => --i
AOIS_17:21:double_add_two_array_values(int,int,int):i => i++
AOIS_18:21:double_add_two_array_values(int,int,int):i => i--
AOIS_19:21:double_add_two_array_values(int,int,int):i => ++i
AOIS_20:21:double_add_two_array_values(int,int,int):i => --i
AOIS_21:21:double_add_two_array_values(int,int,int):i => i++
AOIS_22:21:double_add_two_array_values(int,int,int):i => i--
AOIS_23:21:double_add_two_array_values(int,int,int):a.length => ++a.length
AOIS_24:21:double_add_two_array_values(int,int,int):a.length => --a.length
AOIS_25:21:double_add_two_array_values(int,int,int):a.length => a.length++
AOIS_26:21:double_add_two_array_values(int,int,int):a.length => a.length--
AOIS_27:21:double_add_two_array_values(int,int,int):j => ++j
AOIS_28:21:double_add_two_array_values(int,int,int):j => --j
AOIS_29:21:double_add_two_array_values(int,int,int):j => j++
AOIS_30:21:double_add_two_array_values(int,int,int):j => j--
AOIS_31:21:double_add_two_array_values(int,int,int):j => ++j
AOIS_32:21:double_add_two_array_values(int,int,int):j => --j
AOIS_33:21:double_add_two_array_values(int,int,int):j => j++
AOIS_34:21:double_add_two_array_values(int,int,int):j => j--
AOIS_35:21:double_add_two_array_values(int,int,int):a.length => ++a.length
AOIS_36:21:double_add_two_array_values(int,int,int):a.length => --a.length
AOIS_37:21:double_add_two_array_values(int,int,int):a.length => a.length++
AOIS_38:21:double_add_two_array_values(int,int,int):a.length => a.length--
AOIS_39:24:double_add_two_array_values(int,int,int):i => ++i
AOIS_40:24:double_add_two_array_values(int,int,int):i => --i
AOIS_41:24:double_add_two_array_values(int,int,int):i => i++
AOIS_42:24:double_add_two_array_values(int,int,int):i => i--
AOIS_43:24:double_add_two_array_values(int,int,int):j => ++j
AOIS_44:24:double_add_two_array_values(int,int,int):j => --j
AOIS_45:24:double_add_two_array_values(int,int,int):j => j++
AOIS_46:24:double_add_two_array_values(int,int,int):j => j--
AOIS_47:33:int_bubble(int):a.length => ++a.length
AOIS_48:33:int_bubble(int):a.length => --a.length
AOIS_49:33:int_bubble(int):a.length => a.length++
AOIS_50:33:int_bubble(int):a.length => a.length--
AOIS_51:33:int_bubble(int):i => ++i
AOIS_52:33:int_bubble(int):i => --i
AOIS_53:33:int_bubble(int):i => i++
AOIS_54:33:int_bubble(int):i => i--
AOIS_55:34:int_bubble(int):j => ++j
AOIS_56:34:int_bubble(int):j => --j
AOIS_57:34:int_bubble(int):j => j++
AOIS_58:34:int_bubble(int):j => j--
AOIS_59:34:int_bubble(int):i => ++i
AOIS_60:34:int_bubble(int):i => --i
AOIS_61:34:int_bubble(int):i => i++
AOIS_62:34:int_bubble(int):i => i--
AOIS_63:35:int_bubble(int):j => ++j
AOIS_64:35:int_bubble(int):j => --j
AOIS_65:35:int_bubble(int):j => j++
AOIS_66:35:int_bubble(int):j => j--
AOIS_67:35:int_bubble(int):j => ++j
AOIS_68:35:int_bubble(int):j => --j
AOIS_69:35:int_bubble(int):j => j++
AOIS_70:35:int_bubble(int):j => j--
AOIS_71:36:int_bubble(int):j => ++j
AOIS_72:36:int_bubble(int):j => --j
AOIS_73:36:int_bubble(int):j => j++
AOIS_74:36:int_bubble(int):j => j--
AOIS_75:37:int_bubble(int):j => ++j
AOIS_76:37:int_bubble(int):j => --j
AOIS_77:37:int_bubble(int):j => j++
AOIS_78:37:int_bubble(int):j => j--
AOIS_79:38:int_bubble(int):t => ++t
AOIS_80:38:int_bubble(int):t => --t
AOIS_81:38:int_bubble(int):t => t++
AOIS_82:38:int_bubble(int):t => t--
AOIS_83:52:int_shell_sort(int):a.length => ++a.length
AOIS_84:52:int_shell_sort(int):a.length => --a.length
AOIS_85:52:int_shell_sort(int):a.length => a.length++
AOIS_86:52:int_shell_sort(int):a.length => a.length--
AOIS_87:52:int_shell_sort(int):m => ++m
AOIS_88:52:int_shell_sort(int):m => --m
AOIS_89:52:int_shell_sort(int):m => m++
AOIS_90:52:int_shell_sort(int):m => m--
AOIS_91:53:int_shell_sort(int):m => ++m
AOIS_92:53:int_shell_sort(int):m => --m
AOIS_93:53:int_shell_sort(int):m => m++
AOIS_94:53:int_shell_sort(int):m => m--
AOIS_95:53:int_shell_sort(int):j => ++j
AOIS_96:53:int_shell_sort(int):j => --j
AOIS_97:53:int_shell_sort(int):j => j++
AOIS_98:53:int_shell_sort(int):j => j--
AOIS_99:53:int_shell_sort(int):a.length => ++a.length
AOIS_100:53:int_shell_sort(int):a.length => --a.length
AOIS_101:53:int_shell_sort(int):a.length => a.length++
AOIS_102:53:int_shell_sort(int):a.length => a.length--
AOIS_103:54:int_shell_sort(int):j => ++j
AOIS_104:54:int_shell_sort(int):j => --j
AOIS_105:54:int_shell_sort(int):j => j++
AOIS_106:54:int_shell_sort(int):j => j--
AOIS_107:54:int_shell_sort(int):m => ++m
AOIS_108:54:int_shell_sort(int):m => --m
AOIS_109:54:int_shell_sort(int):m => m++
AOIS_110:54:int_shell_sort(int):m => m--
AOIS_111:54:int_shell_sort(int):i => ++i
AOIS_112:54:int_shell_sort(int):i => --i
AOIS_113:54:int_shell_sort(int):i => i++
AOIS_114:54:int_shell_sort(int):i => i--
AOIS_115:54:int_shell_sort(int):m => ++m
AOIS_116:54:int_shell_sort(int):m => --m
AOIS_117:54:int_shell_sort(int):m => m++
AOIS_118:54:int_shell_sort(int):m => m--
AOIS_119:55:int_shell_sort(int):i => ++i
AOIS_120:55:int_shell_sort(int):i => --i
AOIS_121:55:int_shell_sort(int):i => i++
AOIS_122:55:int_shell_sort(int):i => i--
AOIS_123:55:int_shell_sort(int):m => ++m
AOIS_124:55:int_shell_sort(int):m => --m
AOIS_125:55:int_shell_sort(int):m => m++
AOIS_126:55:int_shell_sort(int):m => m--
AOIS_127:55:int_shell_sort(int):i => i++
AOIS_128:55:int_shell_sort(int):i => i--
AOIS_129:58:int_shell_sort(int):i => ++i
AOIS_130:58:int_shell_sort(int):i => --i
AOIS_131:58:int_shell_sort(int):i => i++
AOIS_132:58:int_shell_sort(int):i => i--
AOIS_133:59:int_shell_sort(int):i => ++i
AOIS_134:59:int_shell_sort(int):i => --i
AOIS_135:59:int_shell_sort(int):i => i++
AOIS_136:59:int_shell_sort(int):i => i--
AOIS_137:59:int_shell_sort(int):m => ++m
AOIS_138:59:int_shell_sort(int):m => --m
AOIS_139:59:int_shell_sort(int):m => m++
AOIS_140:59:int_shell_sort(int):m => m--
AOIS_141:60:int_shell_sort(int):mid => ++mid
AOIS_142:60:int_shell_sort(int):mid => --mid
AOIS_143:60:int_shell_sort(int):mid => mid++
AOIS_144:60:int_shell_sort(int):mid => mid--
AOIS_145:71:int_sequential_search(int,int):i => ++i
AOIS_146:71:int_sequential_search(int,int):i => --i
AOIS_147:71:int_sequential_search(int,int):i => i++
AOIS_148:71:int_sequential_search(int,int):i => i--
AOIS_149:71:int_sequential_search(int,int):a.length => ++a.length
AOIS_150:71:int_sequential_search(int,int):a.length => --a.length
AOIS_151:71:int_sequential_search(int,int):a.length => a.length++
AOIS_152:71:int_sequential_search(int,int):a.length => a.length--
AOIS_153:72:int_sequential_search(int,int):i => ++i
AOIS_154:72:int_sequential_search(int,int):i => --i
AOIS_155:72:int_sequential_search(int,int):i => i++
AOIS_156:72:int_sequential_search(int,int):i => i--
AOIS_157:72:int_sequential_search(int,int):key => ++key
AOIS_158:72:int_sequential_search(int,int):key => --key
AOIS_159:72:int_sequential_search(int,int):key => key++
AOIS_160:72:int_sequential_search(int,int):key => key--
AOIS_161:73:int_sequential_search(int,int):i => i++
AOIS_162:73:int_sequential_search(int,int):i => i--
AOIS_163:84:int_selection_sort(int):i => ++i
AOIS_164:84:int_selection_sort(int):i => --i
AOIS_165:84:int_selection_sort(int):i => i++
AOIS_166:84:int_selection_sort(int):i => i--
AOIS_167:84:int_selection_sort(int):list.length => ++list.length
AOIS_168:84:int_selection_sort(int):list.length => --list.length
AOIS_169:84:int_selection_sort(int):list.length => list.length++
AOIS_170:84:int_selection_sort(int):list.length => list.length--
AOIS_171:85:int_selection_sort(int):i => ++i
AOIS_172:85:int_selection_sort(int):i => --i
AOIS_173:85:int_selection_sort(int):i => i++
AOIS_174:85:int_selection_sort(int):i => i--
AOIS_175:86:int_selection_sort(int):i => ++i
AOIS_176:86:int_selection_sort(int):i => --i
AOIS_177:86:int_selection_sort(int):i => i++
AOIS_178:86:int_selection_sort(int):i => i--
AOIS_179:86:int_selection_sort(int):j => ++j
AOIS_180:86:int_selection_sort(int):j => --j
AOIS_181:86:int_selection_sort(int):j => j++
AOIS_182:86:int_selection_sort(int):j => j--
AOIS_183:86:int_selection_sort(int):list.length => ++list.length
AOIS_184:86:int_selection_sort(int):list.length => --list.length
AOIS_185:86:int_selection_sort(int):list.length => list.length++
AOIS_186:86:int_selection_sort(int):list.length => list.length--
AOIS_187:87:int_selection_sort(int):j => ++j
AOIS_188:87:int_selection_sort(int):j => --j
AOIS_189:87:int_selection_sort(int):j => j++
AOIS_190:87:int_selection_sort(int):j => j--
AOIS_191:87:int_selection_sort(int):min => ++min
AOIS_192:87:int_selection_sort(int):min => --min
AOIS_193:87:int_selection_sort(int):min => min++
AOIS_194:87:int_selection_sort(int):min => min--
AOIS_195:88:int_selection_sort(int):j => ++j
AOIS_196:88:int_selection_sort(int):j => --j
AOIS_197:88:int_selection_sort(int):j => j++
AOIS_198:88:int_selection_sort(int):j => j--
AOIS_199:91:int_selection_sort(int):i => i++
AOIS_200:91:int_selection_sort(int):i => i--
AOIS_201:92:int_selection_sort(int):min => ++min
AOIS_202:92:int_selection_sort(int):min => --min
AOIS_203:92:int_selection_sort(int):min => min++
AOIS_204:92:int_selection_sort(int):min => min--
AOIS_205:93:int_selection_sort(int):tmp => ++tmp
AOIS_206:93:int_selection_sort(int):tmp => --tmp
AOIS_207:93:int_selection_sort(int):tmp => tmp++
AOIS_208:93:int_selection_sort(int):tmp => tmp--
AOIS_209:100:int_add_values_in_two_arrays(int,int,int):i => ++i
AOIS_210:100:int_add_values_in_two_arrays(int,int,int):i => --i
AOIS_211:100:int_add_values_in_two_arrays(int,int,int):i => i++
AOIS_212:100:int_add_values_in_two_arrays(int,int,int):i => i--
AOIS_213:100:int_add_values_in_two_arrays(int,int,int):i => ++i
AOIS_214:100:int_add_values_in_two_arrays(int,int,int):i => --i
AOIS_215:100:int_add_values_in_two_arrays(int,int,int):i => i++
AOIS_216:100:int_add_values_in_two_arrays(int,int,int):i => i--
AOIS_217:100:int_add_values_in_two_arrays(int,int,int):a.length => ++a.length
AOIS_218:100:int_add_values_in_two_arrays(int,int,int):a.length => --a.length
AOIS_219:100:int_add_values_in_two_arrays(int,int,int):a.length => a.length++
AOIS_220:100:int_add_values_in_two_arrays(int,int,int):a.length => a.length--
AOIS_221:100:int_add_values_in_two_arrays(int,int,int):i => ++i
AOIS_222:100:int_add_values_in_two_arrays(int,int,int):i => --i
AOIS_223:100:int_add_values_in_two_arrays(int,int,int):i => i++
AOIS_224:100:int_add_values_in_two_arrays(int,int,int):i => i--
AOIS_225:100:int_add_values_in_two_arrays(int,int,int):b.length => ++b.length
AOIS_226:100:int_add_values_in_two_arrays(int,int,int):b.length => --b.length
AOIS_227:100:int_add_values_in_two_arrays(int,int,int):b.length => b.length++
AOIS_228:100:int_add_values_in_two_arrays(int,int,int):b.length => b.length--
AOIS_229:103:int_add_values_in_two_arrays(int,int,int):i => ++i
AOIS_230:103:int_add_values_in_two_arrays(int,int,int):i => --i
AOIS_231:103:int_add_values_in_two_arrays(int,int,int):i => i++
AOIS_232:103:int_add_values_in_two_arrays(int,int,int):i => i--
AOIS_233:103:int_add_values_in_two_arrays(int,int,int):i => ++i
AOIS_234:103:int_add_values_in_two_arrays(int,int,int):i => --i
AOIS_235:103:int_add_values_in_two_arrays(int,int,int):i => i++
AOIS_236:103:int_add_values_in_two_arrays(int,int,int):i => i--
AOIS_237:111:int_dot_product(int,int):i => ++i
AOIS_238:111:int_dot_product(int,int):i => --i
AOIS_239:111:int_dot_product(int,int):i => i++
AOIS_240:111:int_dot_product(int,int):i => i--
AOIS_241:111:int_dot_product(int,int):a.length => ++a.length
AOIS_242:111:int_dot_product(int,int):a.length => --a.length
AOIS_243:111:int_dot_product(int,int):a.length => a.length++
AOIS_244:111:int_dot_product(int,int):a.length => a.length--
AOIS_245:112:int_dot_product(int,int):i => ++i
AOIS_246:112:int_dot_product(int,int):i => --i
AOIS_247:112:int_dot_product(int,int):i => i++
AOIS_248:112:int_dot_product(int,int):i => i--
AOIS_249:112:int_dot_product(int,int):i => ++i
AOIS_250:112:int_dot_product(int,int):i => --i
AOIS_251:112:int_dot_product(int,int):i => i++
AOIS_252:112:int_dot_product(int,int):i => i--
AOIS_253:114:int_dot_product(int,int):sum => sum++
AOIS_254:114:int_dot_product(int,int):sum => sum--
AOIS_255:120:int_array_calc1(int,int):a.length => a.length++
AOIS_256:120:int_array_calc1(int,int):a.length => a.length--
AOIS_257:121:int_array_calc1(int,int):i => ++i
AOIS_258:121:int_array_calc1(int,int):i => --i
AOIS_259:121:int_array_calc1(int,int):i => i++
AOIS_260:121:int_array_calc1(int,int):i => i--
AOIS_261:121:int_array_calc1(int,int):a.length => ++a.length
AOIS_262:121:int_array_calc1(int,int):a.length => --a.length
AOIS_263:121:int_array_calc1(int,int):a.length => a.length++
AOIS_264:121:int_array_calc1(int,int):a.length => a.length--
AOIS_265:122:int_array_calc1(int,int):i => ++i
AOIS_266:122:int_array_calc1(int,int):i => --i
AOIS_267:122:int_array_calc1(int,int):i => i++
AOIS_268:122:int_array_calc1(int,int):i => i--
AOIS_269:122:int_array_calc1(int,int):k => ++k
AOIS_270:122:int_array_calc1(int,int):k => --k
AOIS_271:122:int_array_calc1(int,int):k => k++
AOIS_272:122:int_array_calc1(int,int):k => k--
AOIS_273:130:int_set_min_val(int,int):i => ++i
AOIS_274:130:int_set_min_val(int,int):i => --i
AOIS_275:130:int_set_min_val(int,int):i => i++
AOIS_276:130:int_set_min_val(int,int):i => i--
AOIS_277:130:int_set_min_val(int,int):a.length => ++a.length
AOIS_278:130:int_set_min_val(int,int):a.length => --a.length
AOIS_279:130:int_set_min_val(int,int):a.length => a.length++
AOIS_280:130:int_set_min_val(int,int):a.length => a.length--
AOIS_281:131:int_set_min_val(int,int):i => ++i
AOIS_282:131:int_set_min_val(int,int):i => --i
AOIS_283:131:int_set_min_val(int,int):i => i++
AOIS_284:131:int_set_min_val(int,int):i => i--
AOIS_285:131:int_set_min_val(int,int):k => ++k
AOIS_286:131:int_set_min_val(int,int):k => --k
AOIS_287:131:int_set_min_val(int,int):k => k++
AOIS_288:131:int_set_min_val(int,int):k => k--
AOIS_289:132:int_set_min_val(int,int):k => ++k
AOIS_290:132:int_set_min_val(int,int):k => --k
AOIS_291:132:int_set_min_val(int,int):k => k++
AOIS_292:132:int_set_min_val(int,int):k => k--
AOIS_293:140:int_get_array_value(int,int):k => ++k
AOIS_294:140:int_get_array_value(int,int):k => --k
AOIS_295:140:int_get_array_value(int,int):k => k++
AOIS_296:140:int_get_array_value(int,int):k => k--
AOIS_297:140:int_get_array_value(int,int):a.length => a.length++
AOIS_298:140:int_get_array_value(int,int):a.length => a.length--
AOIS_299:140:int_get_array_value(int,int):k => ++k
AOIS_300:140:int_get_array_value(int,int):k => --k
AOIS_301:140:int_get_array_value(int,int):k => k++
AOIS_302:140:int_get_array_value(int,int):k => k--
AOIS_303:143:int_get_array_value(int,int):k => ++k
AOIS_304:143:int_get_array_value(int,int):k => --k
AOIS_305:143:int_get_array_value(int,int):k => k++
AOIS_306:143:int_get_array_value(int,int):k => k--
AOIS_307:151:int_find_min(int):i => ++i
AOIS_308:151:int_find_min(int):i => --i
AOIS_309:151:int_find_min(int):i => i++
AOIS_310:151:int_find_min(int):i => i--
AOIS_311:151:int_find_min(int):a.length => ++a.length
AOIS_312:151:int_find_min(int):a.length => --a.length
AOIS_313:151:int_find_min(int):a.length => a.length++
AOIS_314:151:int_find_min(int):a.length => a.length--
AOIS_315:152:int_find_min(int):i => ++i
AOIS_316:152:int_find_min(int):i => --i
AOIS_317:152:int_find_min(int):i => i++
AOIS_318:152:int_find_min(int):i => i--
AOIS_319:152:int_find_min(int):min => ++min
AOIS_320:152:int_find_min(int):min => --min
AOIS_321:152:int_find_min(int):min => min++
AOIS_322:152:int_find_min(int):min => min--
AOIS_323:153:int_find_min(int):i => ++i
AOIS_324:153:int_find_min(int):i => --i
AOIS_325:153:int_find_min(int):i => i++
AOIS_326:153:int_find_min(int):i => i--
AOIS_327:156:int_find_min(int):min => min++
AOIS_328:156:int_find_min(int):min => min--
AOIS_329:162:int_find_diff(int,int):a.length => a.length++
AOIS_330:162:int_find_diff(int,int):a.length => a.length--
AOIS_331:163:int_find_diff(int,int):i => ++i
AOIS_332:163:int_find_diff(int,int):i => --i
AOIS_333:163:int_find_diff(int,int):i => i++
AOIS_334:163:int_find_diff(int,int):i => i--
AOIS_335:163:int_find_diff(int,int):a.length => ++a.length
AOIS_336:163:int_find_diff(int,int):a.length => --a.length
AOIS_337:163:int_find_diff(int,int):a.length => a.length++
AOIS_338:163:int_find_diff(int,int):a.length => a.length--
AOIS_339:164:int_find_diff(int,int):i => ++i
AOIS_340:164:int_find_diff(int,int):i => --i
AOIS_341:164:int_find_diff(int,int):i => i++
AOIS_342:164:int_find_diff(int,int):i => i--
AOIS_343:164:int_find_diff(int,int):i => ++i
AOIS_344:164:int_find_diff(int,int):i => --i
AOIS_345:164:int_find_diff(int,int):i => i++
AOIS_346:164:int_find_diff(int,int):i => i--
AOIS_347:172:int_array_copy(int):a.length => a.length++
AOIS_348:172:int_array_copy(int):a.length => a.length--
AOIS_349:173:int_array_copy(int):i => ++i
AOIS_350:173:int_array_copy(int):i => --i
AOIS_351:173:int_array_copy(int):i => i++
AOIS_352:173:int_array_copy(int):i => i--
AOIS_353:173:int_array_copy(int):a.length => ++a.length
AOIS_354:173:int_array_copy(int):a.length => --a.length
AOIS_355:173:int_array_copy(int):a.length => a.length++
AOIS_356:173:int_array_copy(int):a.length => a.length--
AOIS_357:174:int_array_copy(int):i => ++i
AOIS_358:174:int_array_copy(int):i => --i
AOIS_359:174:int_array_copy(int):i => i++
AOIS_360:174:int_array_copy(int):i => i--
AOIS_361:183:double_find_euc_dist(int,int):i => ++i
AOIS_362:183:double_find_euc_dist(int,int):i => --i
AOIS_363:183:double_find_euc_dist(int,int):i => i++
AOIS_364:183:double_find_euc_dist(int,int):i => i--
AOIS_365:183:double_find_euc_dist(int,int):a.length => ++a.length
AOIS_366:183:double_find_euc_dist(int,int):a.length => --a.length
AOIS_367:183:double_find_euc_dist(int,int):a.length => a.length++
AOIS_368:183:double_find_euc_dist(int,int):a.length => a.length--
AOIS_369:184:double_find_euc_dist(int,int):i => ++i
AOIS_370:184:double_find_euc_dist(int,int):i => --i
AOIS_371:184:double_find_euc_dist(int,int):i => i++
AOIS_372:184:double_find_euc_dist(int,int):i => i--
AOIS_373:184:double_find_euc_dist(int,int):i => ++i
AOIS_374:184:double_find_euc_dist(int,int):i => --i
AOIS_375:184:double_find_euc_dist(int,int):i => i++
AOIS_376:184:double_find_euc_dist(int,int):i => i--
AOIS_377:184:double_find_euc_dist(int,int):i => ++i
AOIS_378:184:double_find_euc_dist(int,int):i => --i
AOIS_379:184:double_find_euc_dist(int,int):i => i++
AOIS_380:184:double_find_euc_dist(int,int):i => i--
AOIS_381:184:double_find_euc_dist(int,int):i => ++i
AOIS_382:184:double_find_euc_dist(int,int):i => --i
AOIS_383:184:double_find_euc_dist(int,int):i => i++
AOIS_384:184:double_find_euc_dist(int,int):i => i--
AOIS_385:186:double_find_euc_dist(int,int):sum => sum++
AOIS_386:186:double_find_euc_dist(int,int):sum => sum--
AOIS_387:187:double_find_euc_dist(int,int):result => result++
AOIS_388:187:double_find_euc_dist(int,int):result => result--
AOIS_389:194:double_find_magnitude(int):i => ++i
AOIS_390:194:double_find_magnitude(int):i => --i
AOIS_391:194:double_find_magnitude(int):i => i++
AOIS_392:194:double_find_magnitude(int):i => i--
AOIS_393:194:double_find_magnitude(int):a.length => ++a.length
AOIS_394:194:double_find_magnitude(int):a.length => --a.length
AOIS_395:194:double_find_magnitude(int):a.length => a.length++
AOIS_396:194:double_find_magnitude(int):a.length => a.length--
AOIS_397:195:double_find_magnitude(int):i => ++i
AOIS_398:195:double_find_magnitude(int):i => --i
AOIS_399:195:double_find_magnitude(int):i => i++
AOIS_400:195:double_find_magnitude(int):i => i--
AOIS_401:195:double_find_magnitude(int):i => ++i
AOIS_402:195:double_find_magnitude(int):i => --i
AOIS_403:195:double_find_magnitude(int):i => i++
AOIS_404:195:double_find_magnitude(int):i => i--
AOIS_405:197:double_find_magnitude(int):sum => sum++
AOIS_406:197:double_find_magnitude(int):sum => sum--
AOIS_407:198:double_find_magnitude(int):result => result++
AOIS_408:198:double_find_magnitude(int):result => result--
AOIS_409:205:double_manhattan_dist(int,int):i => ++i
AOIS_410:205:double_manhattan_dist(int,int):i => --i
AOIS_411:205:double_manhattan_dist(int,int):i => i++
AOIS_412:205:double_manhattan_dist(int,int):i => i--
AOIS_413:205:double_manhattan_dist(int,int):a.length => ++a.length
AOIS_414:205:double_manhattan_dist(int,int):a.length => --a.length
AOIS_415:205:double_manhattan_dist(int,int):a.length => a.length++
AOIS_416:205:double_manhattan_dist(int,int):a.length => a.length--
AOIS_417:206:double_manhattan_dist(int,int):i => ++i
AOIS_418:206:double_manhattan_dist(int,int):i => --i
AOIS_419:206:double_manhattan_dist(int,int):i => i++
AOIS_420:206:double_manhattan_dist(int,int):i => i--
AOIS_421:206:double_manhattan_dist(int,int):i => ++i
AOIS_422:206:double_manhattan_dist(int,int):i => --i
AOIS_423:206:double_manhattan_dist(int,int):i => i++
AOIS_424:206:double_manhattan_dist(int,int):i => i--
AOIS_425:208:double_manhattan_dist(int,int):sum => sum++
AOIS_426:208:double_manhattan_dist(int,int):sum => sum--
AOIS_427:214:double_average(int):i => ++i
AOIS_428:214:double_average(int):i => --i
AOIS_429:214:double_average(int):i => i++
AOIS_430:214:double_average(int):i => i--
AOIS_431:214:double_average(int):a.length => ++a.length
AOIS_432:214:double_average(int):a.length => --a.length
AOIS_433:214:double_average(int):a.length => a.length++
AOIS_434:214:double_average(int):a.length => a.length--
AOIS_435:215:double_average(int):i => ++i
AOIS_436:215:double_average(int):i => --i
AOIS_437:215:double_average(int):i => i++
AOIS_438:215:double_average(int):i => i--
AOIS_439:217:double_average(int):sum => ++sum
AOIS_440:217:double_average(int):sum => --sum
AOIS_441:217:double_average(int):sum => sum++
AOIS_442:217:double_average(int):sum => sum--
AOIS_443:217:double_average(int):a.length => ++a.length
AOIS_444:217:double_average(int):a.length => --a.length
AOIS_445:217:double_average(int):a.length => a.length++
AOIS_446:217:double_average(int):a.length => a.length--
AOIS_447:223:int_dec_array(int,int):i => ++i
AOIS_448:223:int_dec_array(int,int):i => --i
AOIS_449:223:int_dec_array(int,int):i => i++
AOIS_450:223:int_dec_array(int,int):i => i--
AOIS_451:223:int_dec_array(int,int):a.length => ++a.length
AOIS_452:223:int_dec_array(int,int):a.length => --a.length
AOIS_453:223:int_dec_array(int,int):a.length => a.length++
AOIS_454:223:int_dec_array(int,int):a.length => a.length--
AOIS_455:224:int_dec_array(int,int):k => ++k
AOIS_456:224:int_dec_array(int,int):k => --k
AOIS_457:224:int_dec_array(int,int):k => k++
AOIS_458:224:int_dec_array(int,int):k => k--
AOIS_459:231:double_expr1(double,double):b => ++b
AOIS_460:231:double_expr1(double,double):b => --b
AOIS_461:231:double_expr1(double,double):b => b++
AOIS_462:231:double_expr1(double,double):b => b--
AOIS_463:231:double_expr1(double,double):a => ++a
AOIS_464:231:double_expr1(double,double):a => --a
AOIS_465:231:double_expr1(double,double):a => a++
AOIS_466:231:double_expr1(double,double):a => a--
AOIS_467:231:double_expr1(double,double):a => a++
AOIS_468:231:double_expr1(double,double):a => a--
AOIS_469:232:double_expr1(double,double):result => result++
AOIS_470:232:double_expr1(double,double):result => result--
AOIS_471:238:int_find_max(int):i => ++i
AOIS_472:238:int_find_max(int):i => --i
AOIS_473:238:int_find_max(int):i => i++
AOIS_474:238:int_find_max(int):i => i--
AOIS_475:238:int_find_max(int):a.length => ++a.length
AOIS_476:238:int_find_max(int):a.length => --a.length
AOIS_477:238:int_find_max(int):a.length => a.length++
AOIS_478:238:int_find_max(int):a.length => a.length--
AOIS_479:239:int_find_max(int):i => ++i
AOIS_480:239:int_find_max(int):i => --i
AOIS_481:239:int_find_max(int):i => i++
AOIS_482:239:int_find_max(int):i => i--
AOIS_483:239:int_find_max(int):max => ++max
AOIS_484:239:int_find_max(int):max => --max
AOIS_485:239:int_find_max(int):max => max++
AOIS_486:239:int_find_max(int):max => max--
AOIS_487:240:int_find_max(int):i => ++i
AOIS_488:240:int_find_max(int):i => --i
AOIS_489:240:int_find_max(int):i => i++
AOIS_490:240:int_find_max(int):i => i--
AOIS_491:243:int_find_max(int):max => max++
AOIS_492:243:int_find_max(int):max => max--
AOIS_493:249:int_find_max2(int):i => ++i
AOIS_494:249:int_find_max2(int):i => --i
AOIS_495:249:int_find_max2(int):i => i++
AOIS_496:249:int_find_max2(int):i => i--
AOIS_497:249:int_find_max2(int):a.length => ++a.length
AOIS_498:249:int_find_max2(int):a.length => --a.length
AOIS_499:249:int_find_max2(int):a.length => a.length++
AOIS_500:249:int_find_max2(int):a.length => a.length--
AOIS_501:250:int_find_max2(int):i => ++i
AOIS_502:250:int_find_max2(int):i => --i
AOIS_503:250:int_find_max2(int):i => i++
AOIS_504:250:int_find_max2(int):i => i--
AOIS_505:250:int_find_max2(int):i => ++i
AOIS_506:250:int_find_max2(int):i => --i
AOIS_507:250:int_find_max2(int):i => i++
AOIS_508:250:int_find_max2(int):i => i--
AOIS_509:250:int_find_max2(int):max => max++
AOIS_510:250:int_find_max2(int):max => max--
AOIS_511:251:int_find_max2(int):i => ++i
AOIS_512:251:int_find_max2(int):i => --i
AOIS_513:251:int_find_max2(int):i => i++
AOIS_514:251:int_find_max2(int):i => i--
AOIS_515:251:int_find_max2(int):i => ++i
AOIS_516:251:int_find_max2(int):i => --i
AOIS_517:251:int_find_max2(int):i => i++
AOIS_518:251:int_find_max2(int):i => i--
AOIS_519:254:int_find_max2(int):max => max++
AOIS_520:254:int_find_max2(int):max => max--
AOIS_521:263:double_variance(double):i => ++i
AOIS_522:263:double_variance(double):i => --i
AOIS_523:263:double_variance(double):i => i++
AOIS_524:263:double_variance(double):i => i--
AOIS_525:263:double_variance(double):x.length => ++x.length
AOIS_526:263:double_variance(double):x.length => --x.length
AOIS_527:263:double_variance(double):x.length => x.length++
AOIS_528:263:double_variance(double):x.length => x.length--
AOIS_529:264:double_variance(double):sum => ++sum
AOIS_530:264:double_variance(double):sum => --sum
AOIS_531:264:double_variance(double):sum => sum++
AOIS_532:264:double_variance(double):sum => sum--
AOIS_533:264:double_variance(double):i => ++i
AOIS_534:264:double_variance(double):i => --i
AOIS_535:264:double_variance(double):i => i++
AOIS_536:264:double_variance(double):i => i--
AOIS_537:266:double_variance(double):sum => ++sum
AOIS_538:266:double_variance(double):sum => --sum
AOIS_539:266:double_variance(double):sum => sum++
AOIS_540:266:double_variance(double):sum => sum--
AOIS_541:266:double_variance(double):x.length => ++x.length
AOIS_542:266:double_variance(double):x.length => --x.length
AOIS_543:266:double_variance(double):x.length => x.length++
AOIS_544:266:double_variance(double):x.length => x.length--
AOIS_545:267:double_variance(double):i => ++i
AOIS_546:267:double_variance(double):i => --i
AOIS_547:267:double_variance(double):i => i++
AOIS_548:267:double_variance(double):i => i--
AOIS_549:267:double_variance(double):x.length => ++x.length
AOIS_550:267:double_variance(double):x.length => --x.length
AOIS_551:267:double_variance(double):x.length => x.length++
AOIS_552:267:double_variance(double):x.length => x.length--
AOIS_553:268:double_variance(double):sum1 => ++sum1
AOIS_554:268:double_variance(double):sum1 => --sum1
AOIS_555:268:double_variance(double):sum1 => sum1++
AOIS_556:268:double_variance(double):sum1 => sum1--
AOIS_557:268:double_variance(double):i => ++i
AOIS_558:268:double_variance(double):i => --i
AOIS_559:268:double_variance(double):i => i++
AOIS_560:268:double_variance(double):i => i--
AOIS_561:268:double_variance(double):avrg => ++avrg
AOIS_562:268:double_variance(double):avrg => --avrg
AOIS_563:268:double_variance(double):avrg => avrg++
AOIS_564:268:double_variance(double):avrg => avrg--
AOIS_565:268:double_variance(double):i => ++i
AOIS_566:268:double_variance(double):i => --i
AOIS_567:268:double_variance(double):i => i++
AOIS_568:268:double_variance(double):i => i--
AOIS_569:268:double_variance(double):avrg => ++avrg
AOIS_570:268:double_variance(double):avrg => --avrg
AOIS_571:268:double_variance(double):avrg => avrg++
AOIS_572:268:double_variance(double):avrg => avrg--
AOIS_573:270:double_variance(double):sum1 => ++sum1
AOIS_574:270:double_variance(double):sum1 => --sum1
AOIS_575:270:double_variance(double):sum1 => sum1++
AOIS_576:270:double_variance(double):sum1 => sum1--
AOIS_577:270:double_variance(double):x.length => ++x.length
AOIS_578:270:double_variance(double):x.length => --x.length
AOIS_579:270:double_variance(double):x.length => x.length++
AOIS_580:270:double_variance(double):x.length => x.length--
AOIS_581:271:double_variance(double):var => var++
AOIS_582:271:double_variance(double):var => var--
AOIS_583:276:int_insertion_sort(int):i => ++i
AOIS_584:276:int_insertion_sort(int):i => --i
AOIS_585:276:int_insertion_sort(int):i => i++
AOIS_586:276:int_insertion_sort(int):i => i--
AOIS_587:276:int_insertion_sort(int):array.length => ++array.length
AOIS_588:276:int_insertion_sort(int):array.length => --array.length
AOIS_589:276:int_insertion_sort(int):array.length => array.length++
AOIS_590:276:int_insertion_sort(int):array.length => array.length--
AOIS_591:277:int_insertion_sort(int):i => i++
AOIS_592:277:int_insertion_sort(int):i => i--
AOIS_593:278:int_insertion_sort(int):i => i++
AOIS_594:278:int_insertion_sort(int):i => i--
AOIS_595:279:int_insertion_sort(int):j => ++j
AOIS_596:279:int_insertion_sort(int):j => --j
AOIS_597:279:int_insertion_sort(int):j => j++
AOIS_598:279:int_insertion_sort(int):j => j--
AOIS_599:279:int_insertion_sort(int):j => ++j
AOIS_600:279:int_insertion_sort(int):j => --j
AOIS_601:279:int_insertion_sort(int):j => j++
AOIS_602:279:int_insertion_sort(int):j => j--
AOIS_603:279:int_insertion_sort(int):B => B++
AOIS_604:279:int_insertion_sort(int):B => B--
AOIS_605:280:int_insertion_sort(int):j => ++j
AOIS_606:280:int_insertion_sort(int):j => --j
AOIS_607:280:int_insertion_sort(int):j => j++
AOIS_608:280:int_insertion_sort(int):j => j--
AOIS_609:283:int_insertion_sort(int):B => ++B
AOIS_610:283:int_insertion_sort(int):B => --B
AOIS_611:283:int_insertion_sort(int):B => B++
AOIS_612:283:int_insertion_sort(int):B => B--
AOIS_613:291:double_geometric_mean(int):i => ++i
AOIS_614:291:double_geometric_mean(int):i => --i
AOIS_615:291:double_geometric_mean(int):i => i++
AOIS_616:291:double_geometric_mean(int):i => i--
AOIS_617:291:double_geometric_mean(int):a.length => ++a.length
AOIS_618:291:double_geometric_mean(int):a.length => --a.length
AOIS_619:291:double_geometric_mean(int):a.length => a.length++
AOIS_620:291:double_geometric_mean(int):a.length => a.length--
AOIS_621:292:double_geometric_mean(int):i => ++i
AOIS_622:292:double_geometric_mean(int):i => --i
AOIS_623:292:double_geometric_mean(int):i => i++
AOIS_624:292:double_geometric_mean(int):i => i--
AOIS_625:294:double_geometric_mean(int):product => product++
AOIS_626:294:double_geometric_mean(int):product => product--
AOIS_627:294:double_geometric_mean(int):a.length => ++a.length
AOIS_628:294:double_geometric_mean(int):a.length => --a.length
AOIS_629:294:double_geometric_mean(int):a.length => a.length++
AOIS_630:294:double_geometric_mean(int):a.length => a.length--
AOIS_631:300:double_mean_absolute_error(int,int):i => ++i
AOIS_632:300:double_mean_absolute_error(int,int):i => --i
AOIS_633:300:double_mean_absolute_error(int,int):i => i++
AOIS_634:300:double_mean_absolute_error(int,int):i => i--
AOIS_635:300:double_mean_absolute_error(int,int):a.length => ++a.length
AOIS_636:300:double_mean_absolute_error(int,int):a.length => --a.length
AOIS_637:300:double_mean_absolute_error(int,int):a.length => a.length++
AOIS_638:300:double_mean_absolute_error(int,int):a.length => a.length--
AOIS_639:301:double_mean_absolute_error(int,int):i => ++i
AOIS_640:301:double_mean_absolute_error(int,int):i => --i
AOIS_641:301:double_mean_absolute_error(int,int):i => i++
AOIS_642:301:double_mean_absolute_error(int,int):i => i--
AOIS_643:301:double_mean_absolute_error(int,int):i => ++i
AOIS_644:301:double_mean_absolute_error(int,int):i => --i
AOIS_645:301:double_mean_absolute_error(int,int):i => i++
AOIS_646:301:double_mean_absolute_error(int,int):i => i--
AOIS_647:303:double_mean_absolute_error(int,int):sum => ++sum
AOIS_648:303:double_mean_absolute_error(int,int):sum => --sum
AOIS_649:303:double_mean_absolute_error(int,int):sum => sum++
AOIS_650:303:double_mean_absolute_error(int,int):sum => sum--
AOIS_651:303:double_mean_absolute_error(int,int):a.length => ++a.length
AOIS_652:303:double_mean_absolute_error(int,int):a.length => --a.length
AOIS_653:303:double_mean_absolute_error(int,int):a.length => a.length++
AOIS_654:303:double_mean_absolute_error(int,int):a.length => a.length--
AOIS_655:308:double_find_median(int):a.length => ++a.length
AOIS_656:308:double_find_median(int):a.length => --a.length
AOIS_657:308:double_find_median(int):a.length => a.length++
AOIS_658:308:double_find_median(int):a.length => a.length--
AOIS_659:311:double_find_median(int):i => ++i
AOIS_660:311:double_find_median(int):i => --i
AOIS_661:311:double_find_median(int):i => i++
AOIS_662:311:double_find_median(int):i => i--
AOIS_663:311:double_find_median(int):k => ++k
AOIS_664:311:double_find_median(int):k => --k
AOIS_665:311:double_find_median(int):k => k++
AOIS_666:311:double_find_median(int):k => k--
AOIS_667:312:double_find_median(int):i => ++i
AOIS_668:312:double_find_median(int):i => --i
AOIS_669:312:double_find_median(int):i => i++
AOIS_670:312:double_find_median(int):i => i--
AOIS_671:313:double_find_median(int):i => ++i
AOIS_672:313:double_find_median(int):i => --i
AOIS_673:313:double_find_median(int):i => i++
AOIS_674:313:double_find_median(int):i => i--
AOIS_675:314:double_find_median(int):j => ++j
AOIS_676:314:double_find_median(int):j => --j
AOIS_677:314:double_find_median(int):j => j++
AOIS_678:314:double_find_median(int):j => j--
AOIS_679:314:double_find_median(int):a.length => ++a.length
AOIS_680:314:double_find_median(int):a.length => --a.length
AOIS_681:314:double_find_median(int):a.length => a.length++
AOIS_682:314:double_find_median(int):a.length => a.length--
AOIS_683:315:double_find_median(int):j => ++j
AOIS_684:315:double_find_median(int):j => --j
AOIS_685:315:double_find_median(int):j => j++
AOIS_686:315:double_find_median(int):j => j--
AOIS_687:315:double_find_median(int):minValue => ++minValue
AOIS_688:315:double_find_median(int):minValue => --minValue
AOIS_689:315:double_find_median(int):minValue => minValue++
AOIS_690:315:double_find_median(int):minValue => minValue--
AOIS_691:316:double_find_median(int):j => ++j
AOIS_692:316:double_find_median(int):j => --j
AOIS_693:316:double_find_median(int):j => j++
AOIS_694:316:double_find_median(int):j => j--
AOIS_695:317:double_find_median(int):j => ++j
AOIS_696:317:double_find_median(int):j => --j
AOIS_697:317:double_find_median(int):j => j++
AOIS_698:317:double_find_median(int):j => j--
AOIS_699:320:double_find_median(int):i => i++
AOIS_700:320:double_find_median(int):i => i--
AOIS_701:321:double_find_median(int):minIndex => ++minIndex
AOIS_702:321:double_find_median(int):minIndex => --minIndex
AOIS_703:321:double_find_median(int):minIndex => minIndex++
AOIS_704:321:double_find_median(int):minIndex => minIndex--
AOIS_705:322:double_find_median(int):temp => ++temp
AOIS_706:322:double_find_median(int):temp => --temp
AOIS_707:322:double_find_median(int):temp => temp++
AOIS_708:322:double_find_median(int):temp => temp--
AOIS_709:324:double_find_median(int):a.length => ++a.length
AOIS_710:324:double_find_median(int):a.length => --a.length
AOIS_711:324:double_find_median(int):a.length => a.length++
AOIS_712:324:double_find_median(int):a.length => a.length--
AOIS_713:325:double_find_median(int):a.length => ++a.length
AOIS_714:325:double_find_median(int):a.length => --a.length
AOIS_715:325:double_find_median(int):a.length => a.length++
AOIS_716:325:double_find_median(int):a.length => a.length--
AOIS_717:325:double_find_median(int):a.length => ++a.length
AOIS_718:325:double_find_median(int):a.length => --a.length
AOIS_719:325:double_find_median(int):a.length => a.length++
AOIS_720:325:double_find_median(int):a.length => a.length--
AOIS_721:327:double_find_median(int):a.length => ++a.length
AOIS_722:327:double_find_median(int):a.length => --a.length
AOIS_723:327:double_find_median(int):a.length => a.length++
AOIS_724:327:double_find_median(int):a.length => a.length--
AOIS_725:333:int_cartesian_product(int,int):a.length => ++a.length
AOIS_726:333:int_cartesian_product(int,int):a.length => --a.length
AOIS_727:333:int_cartesian_product(int,int):a.length => a.length++
AOIS_728:333:int_cartesian_product(int,int):a.length => a.length--
AOIS_729:333:int_cartesian_product(int,int):b.length => ++b.length
AOIS_730:333:int_cartesian_product(int,int):b.length => --b.length
AOIS_731:333:int_cartesian_product(int,int):b.length => b.length++
AOIS_732:333:int_cartesian_product(int,int):b.length => b.length--
AOIS_733:335:int_cartesian_product(int,int):i => ++i
AOIS_734:335:int_cartesian_product(int,int):i => --i
AOIS_735:335:int_cartesian_product(int,int):i => i++
AOIS_736:335:int_cartesian_product(int,int):i => i--
AOIS_737:335:int_cartesian_product(int,int):a.length => ++a.length
AOIS_738:335:int_cartesian_product(int,int):a.length => --a.length
AOIS_739:335:int_cartesian_product(int,int):a.length => a.length++
AOIS_740:335:int_cartesian_product(int,int):a.length => a.length--
AOIS_741:336:int_cartesian_product(int,int):j => ++j
AOIS_742:336:int_cartesian_product(int,int):j => --j
AOIS_743:336:int_cartesian_product(int,int):j => j++
AOIS_744:336:int_cartesian_product(int,int):j => j--
AOIS_745:336:int_cartesian_product(int,int):b.length => ++b.length
AOIS_746:336:int_cartesian_product(int,int):b.length => --b.length
AOIS_747:336:int_cartesian_product(int,int):b.length => b.length++
AOIS_748:336:int_cartesian_product(int,int):b.length => b.length--
AOIS_749:337:int_cartesian_product(int,int):i => ++i
AOIS_750:337:int_cartesian_product(int,int):i => --i
AOIS_751:337:int_cartesian_product(int,int):i => i++
AOIS_752:337:int_cartesian_product(int,int):i => i--
AOIS_753:338:int_cartesian_product(int,int):j => ++j
AOIS_754:338:int_cartesian_product(int,int):j => --j
AOIS_755:338:int_cartesian_product(int,int):j => j++
AOIS_756:338:int_cartesian_product(int,int):j => j--
AOIS_757:347:int_reverse(int):a.length => a.length++
AOIS_758:347:int_reverse(int):a.length => a.length--
AOIS_759:349:int_reverse(int):i => ++i
AOIS_760:349:int_reverse(int):i => --i
AOIS_761:349:int_reverse(int):i => i++
AOIS_762:349:int_reverse(int):i => i--
AOIS_763:350:int_reverse(int):i => ++i
AOIS_764:350:int_reverse(int):i => --i
AOIS_765:350:int_reverse(int):i => i++
AOIS_766:350:int_reverse(int):i => i--
AOIS_767:358:boolean_check_equal_tolerance(double,double,double):a.length => ++a.length
AOIS_768:358:boolean_check_equal_tolerance(double,double,double):a.length => --a.length
AOIS_769:358:boolean_check_equal_tolerance(double,double,double):a.length => a.length++
AOIS_770:358:boolean_check_equal_tolerance(double,double,double):a.length => a.length--
AOIS_771:358:boolean_check_equal_tolerance(double,double,double):b.length => ++b.length
AOIS_772:358:boolean_check_equal_tolerance(double,double,double):b.length => --b.length
AOIS_773:358:boolean_check_equal_tolerance(double,double,double):b.length => b.length++
AOIS_774:358:boolean_check_equal_tolerance(double,double,double):b.length => b.length--
AOIS_775:361:boolean_check_equal_tolerance(double,double,double):i => ++i
AOIS_776:361:boolean_check_equal_tolerance(double,double,double):i => --i
AOIS_777:361:boolean_check_equal_tolerance(double,double,double):i => i++
AOIS_778:361:boolean_check_equal_tolerance(double,double,double):i => i--
AOIS_779:361:boolean_check_equal_tolerance(double,double,double):a.length => ++a.length
AOIS_780:361:boolean_check_equal_tolerance(double,double,double):a.length => --a.length
AOIS_781:361:boolean_check_equal_tolerance(double,double,double):a.length => a.length++
AOIS_782:361:boolean_check_equal_tolerance(double,double,double):a.length => a.length--
AOIS_783:362:boolean_check_equal_tolerance(double,double,double):i => ++i
AOIS_784:362:boolean_check_equal_tolerance(double,double,double):i => --i
AOIS_785:362:boolean_check_equal_tolerance(double,double,double):i => i++
AOIS_786:362:boolean_check_equal_tolerance(double,double,double):i => i--
AOIS_787:362:boolean_check_equal_tolerance(double,double,double):i => ++i
AOIS_788:362:boolean_check_equal_tolerance(double,double,double):i => --i
AOIS_789:362:boolean_check_equal_tolerance(double,double,double):i => i++
AOIS_790:362:boolean_check_equal_tolerance(double,double,double):i => i--
AOIS_791:362:boolean_check_equal_tolerance(double,double,double):tol => tol++
AOIS_792:362:boolean_check_equal_tolerance(double,double,double):tol => tol--
AOIS_793:371:boolean_check_equal(int,int):a.length => ++a.length
AOIS_794:371:boolean_check_equal(int,int):a.length => --a.length
AOIS_795:371:boolean_check_equal(int,int):a.length => a.length++
AOIS_796:371:boolean_check_equal(int,int):a.length => a.length--
AOIS_797:371:boolean_check_equal(int,int):b.length => ++b.length
AOIS_798:371:boolean_check_equal(int,int):b.length => --b.length
AOIS_799:371:boolean_check_equal(int,int):b.length => b.length++
AOIS_800:371:boolean_check_equal(int,int):b.length => b.length--
AOIS_801:374:boolean_check_equal(int,int):i => ++i
AOIS_802:374:boolean_check_equal(int,int):i => --i
AOIS_803:374:boolean_check_equal(int,int):i => i++
AOIS_804:374:boolean_check_equal(int,int):i => i--
AOIS_805:374:boolean_check_equal(int,int):a.length => ++a.length
AOIS_806:374:boolean_check_equal(int,int):a.length => --a.length
AOIS_807:374:boolean_check_equal(int,int):a.length => a.length++
AOIS_808:374:boolean_check_equal(int,int):a.length => a.length--
AOIS_809:375:boolean_check_equal(int,int):i => ++i
AOIS_810:375:boolean_check_equal(int,int):i => --i
AOIS_811:375:boolean_check_equal(int,int):i => i++
AOIS_812:375:boolean_check_equal(int,int):i => i--
AOIS_813:375:boolean_check_equal(int,int):i => ++i
AOIS_814:375:boolean_check_equal(int,int):i => --i
AOIS_815:375:boolean_check_equal(int,int):i => i++
AOIS_816:375:boolean_check_equal(int,int):i => i--
AOIS_817:386:double_weighted_average(double,double):i => ++i
AOIS_818:386:double_weighted_average(double,double):i => --i
AOIS_819:386:double_weighted_average(double,double):i => i++
AOIS_820:386:double_weighted_average(double,double):i => i--
AOIS_821:386:double_weighted_average(double,double):a.length => ++a.length
AOIS_822:386:double_weighted_average(double,double):a.length => --a.length
AOIS_823:386:double_weighted_average(double,double):a.length => a.length++
AOIS_824:386:double_weighted_average(double,double):a.length => a.length--
AOIS_825:387:double_weighted_average(double,double):i => ++i
AOIS_826:387:double_weighted_average(double,double):i => --i
AOIS_827:387:double_weighted_average(double,double):i => i++
AOIS_828:387:double_weighted_average(double,double):i => i--
AOIS_829:387:double_weighted_average(double,double):i => ++i
AOIS_830:387:double_weighted_average(double,double):i => --i
AOIS_831:387:double_weighted_average(double,double):i => i++
AOIS_832:387:double_weighted_average(double,double):i => i--
AOIS_833:388:double_weighted_average(double,double):i => ++i
AOIS_834:388:double_weighted_average(double,double):i => --i
AOIS_835:388:double_weighted_average(double,double):i => i++
AOIS_836:388:double_weighted_average(double,double):i => i--
AOIS_837:390:double_weighted_average(double,double):sum1 => ++sum1
AOIS_838:390:double_weighted_average(double,double):sum1 => --sum1
AOIS_839:390:double_weighted_average(double,double):sum1 => sum1++
AOIS_840:390:double_weighted_average(double,double):sum1 => sum1--
AOIS_841:390:double_weighted_average(double,double):sum2 => ++sum2
AOIS_842:390:double_weighted_average(double,double):sum2 => --sum2
AOIS_843:390:double_weighted_average(double,double):sum2 => sum2++
AOIS_844:390:double_weighted_average(double,double):sum2 => sum2--
AOIS_845:396:int_count_k(int,int):i => ++i
AOIS_846:396:int_count_k(int,int):i => --i
AOIS_847:396:int_count_k(int,int):i => i++
AOIS_848:396:int_count_k(int,int):i => i--
AOIS_849:396:int_count_k(int,int):a.length => ++a.length
AOIS_850:396:int_count_k(int,int):a.length => --a.length
AOIS_851:396:int_count_k(int,int):a.length => a.length++
AOIS_852:396:int_count_k(int,int):a.length => a.length--
AOIS_853:397:int_count_k(int,int):i => ++i
AOIS_854:397:int_count_k(int,int):i => --i
AOIS_855:397:int_count_k(int,int):i => i++
AOIS_856:397:int_count_k(int,int):i => i--
AOIS_857:397:int_count_k(int,int):k => ++k
AOIS_858:397:int_count_k(int,int):k => --k
AOIS_859:397:int_count_k(int,int):k => k++
AOIS_860:397:int_count_k(int,int):k => k--
AOIS_861:401:int_count_k(int,int):cnt => cnt++
AOIS_862:401:int_count_k(int,int):cnt => cnt--
AOIS_863:406:int_clip(int,int,int):a.length => a.length++
AOIS_864:406:int_clip(int,int,int):a.length => a.length--
AOIS_865:407:int_clip(int,int,int):i => ++i
AOIS_866:407:int_clip(int,int,int):i => --i
AOIS_867:407:int_clip(int,int,int):i => i++
AOIS_868:407:int_clip(int,int,int):i => i--
AOIS_869:407:int_clip(int,int,int):a.length => ++a.length
AOIS_870:407:int_clip(int,int,int):a.length => --a.length
AOIS_871:407:int_clip(int,int,int):a.length => a.length++
AOIS_872:407:int_clip(int,int,int):a.length => a.length--
AOIS_873:408:int_clip(int,int,int):i => ++i
AOIS_874:408:int_clip(int,int,int):i => --i
AOIS_875:408:int_clip(int,int,int):i => i++
AOIS_876:408:int_clip(int,int,int):i => i--
AOIS_877:408:int_clip(int,int,int):lowerLim => ++lowerLim
AOIS_878:408:int_clip(int,int,int):lowerLim => --lowerLim
AOIS_879:408:int_clip(int,int,int):lowerLim => lowerLim++
AOIS_880:408:int_clip(int,int,int):lowerLim => lowerLim--
AOIS_881:409:int_clip(int,int,int):lowerLim => ++lowerLim
AOIS_882:409:int_clip(int,int,int):lowerLim => --lowerLim
AOIS_883:409:int_clip(int,int,int):lowerLim => lowerLim++
AOIS_884:409:int_clip(int,int,int):lowerLim => lowerLim--
AOIS_885:411:int_clip(int,int,int):i => ++i
AOIS_886:411:int_clip(int,int,int):i => --i
AOIS_887:411:int_clip(int,int,int):i => i++
AOIS_888:411:int_clip(int,int,int):i => i--
AOIS_889:411:int_clip(int,int,int):upperLim => ++upperLim
AOIS_890:411:int_clip(int,int,int):upperLim => --upperLim
AOIS_891:411:int_clip(int,int,int):upperLim => upperLim++
AOIS_892:411:int_clip(int,int,int):upperLim => upperLim--
AOIS_893:412:int_clip(int,int,int):upperLim => ++upperLim
AOIS_894:412:int_clip(int,int,int):upperLim => --upperLim
AOIS_895:412:int_clip(int,int,int):upperLim => upperLim++
AOIS_896:412:int_clip(int,int,int):upperLim => upperLim--
AOIS_897:414:int_clip(int,int,int):i => ++i
AOIS_898:414:int_clip(int,int,int):i => --i
AOIS_899:414:int_clip(int,int,int):i => i++
AOIS_900:414:int_clip(int,int,int):i => i--
AOIS_901:423:int_elementwise_max(int,int):a.length => a.length++
AOIS_902:423:int_elementwise_max(int,int):a.length => a.length--
AOIS_903:424:int_elementwise_max(int,int):i => ++i
AOIS_904:424:int_elementwise_max(int,int):i => --i
AOIS_905:424:int_elementwise_max(int,int):i => i++
AOIS_906:424:int_elementwise_max(int,int):i => i--
AOIS_907:424:int_elementwise_max(int,int):a.length => ++a.length
AOIS_908:424:int_elementwise_max(int,int):a.length => --a.length
AOIS_909:424:int_elementwise_max(int,int):a.length => a.length++
AOIS_910:424:int_elementwise_max(int,int):a.length => a.length--
AOIS_911:425:int_elementwise_max(int,int):i => ++i
AOIS_912:425:int_elementwise_max(int,int):i => --i
AOIS_913:425:int_elementwise_max(int,int):i => i++
AOIS_914:425:int_elementwise_max(int,int):i => i--
AOIS_915:425:int_elementwise_max(int,int):i => ++i
AOIS_916:425:int_elementwise_max(int,int):i => --i
AOIS_917:425:int_elementwise_max(int,int):i => i++
AOIS_918:425:int_elementwise_max(int,int):i => i--
AOIS_919:426:int_elementwise_max(int,int):i => ++i
AOIS_920:426:int_elementwise_max(int,int):i => --i
AOIS_921:426:int_elementwise_max(int,int):i => i++
AOIS_922:426:int_elementwise_max(int,int):i => i--
AOIS_923:428:int_elementwise_max(int,int):i => ++i
AOIS_924:428:int_elementwise_max(int,int):i => --i
AOIS_925:428:int_elementwise_max(int,int):i => i++
AOIS_926:428:int_elementwise_max(int,int):i => i--
AOIS_927:436:int_elementwise_min(int,int):a.length => a.length++
AOIS_928:436:int_elementwise_min(int,int):a.length => a.length--
AOIS_929:437:int_elementwise_min(int,int):i => ++i
AOIS_930:437:int_elementwise_min(int,int):i => --i
AOIS_931:437:int_elementwise_min(int,int):i => i++
AOIS_932:437:int_elementwise_min(int,int):i => i--
AOIS_933:437:int_elementwise_min(int,int):a.length => ++a.length
AOIS_934:437:int_elementwise_min(int,int):a.length => --a.length
AOIS_935:437:int_elementwise_min(int,int):a.length => a.length++
AOIS_936:437:int_elementwise_min(int,int):a.length => a.length--
AOIS_937:438:int_elementwise_min(int,int):i => ++i
AOIS_938:438:int_elementwise_min(int,int):i => --i
AOIS_939:438:int_elementwise_min(int,int):i => i++
AOIS_940:438:int_elementwise_min(int,int):i => i--
AOIS_941:438:int_elementwise_min(int,int):i => ++i
AOIS_942:438:int_elementwise_min(int,int):i => --i
AOIS_943:438:int_elementwise_min(int,int):i => i++
AOIS_944:438:int_elementwise_min(int,int):i => i--
AOIS_945:439:int_elementwise_min(int,int):i => ++i
AOIS_946:439:int_elementwise_min(int,int):i => --i
AOIS_947:439:int_elementwise_min(int,int):i => i++
AOIS_948:439:int_elementwise_min(int,int):i => i--
AOIS_949:441:int_elementwise_min(int,int):i => ++i
AOIS_950:441:int_elementwise_min(int,int):i => --i
AOIS_951:441:int_elementwise_min(int,int):i => i++
AOIS_952:441:int_elementwise_min(int,int):i => i--
AOIS_953:450:int_count_non_zeroes(int):i => ++i
AOIS_954:450:int_count_non_zeroes(int):i => --i
AOIS_955:450:int_count_non_zeroes(int):i => i++
AOIS_956:450:int_count_non_zeroes(int):i => i--
AOIS_957:450:int_count_non_zeroes(int):a.length => ++a.length
AOIS_958:450:int_count_non_zeroes(int):a.length => --a.length
AOIS_959:450:int_count_non_zeroes(int):a.length => a.length++
AOIS_960:450:int_count_non_zeroes(int):a.length => a.length--
AOIS_961:451:int_count_non_zeroes(int):i => ++i
AOIS_962:451:int_count_non_zeroes(int):i => --i
AOIS_963:451:int_count_non_zeroes(int):i => i++
AOIS_964:451:int_count_non_zeroes(int):i => i--
AOIS_965:455:int_count_non_zeroes(int):cnt => cnt++
AOIS_966:455:int_count_non_zeroes(int):cnt => cnt--
AOIS_967:461:int_cnt_zeroes(int):i => ++i
AOIS_968:461:int_cnt_zeroes(int):i => --i
AOIS_969:461:int_cnt_zeroes(int):i => i++
AOIS_970:461:int_cnt_zeroes(int):i => i--
AOIS_971:461:int_cnt_zeroes(int):a.length => ++a.length
AOIS_972:461:int_cnt_zeroes(int):a.length => --a.length
AOIS_973:461:int_cnt_zeroes(int):a.length => a.length++
AOIS_974:461:int_cnt_zeroes(int):a.length => a.length--
AOIS_975:462:int_cnt_zeroes(int):i => ++i
AOIS_976:462:int_cnt_zeroes(int):i => --i
AOIS_977:462:int_cnt_zeroes(int):i => i++
AOIS_978:462:int_cnt_zeroes(int):i => i--
AOIS_979:466:int_cnt_zeroes(int):cnt => cnt++
AOIS_980:466:int_cnt_zeroes(int):cnt => cnt--
AOIS_981:471:boolean_elementwise_equal(int,int):a.length => a.length++
AOIS_982:471:boolean_elementwise_equal(int,int):a.length => a.length--
AOIS_983:472:boolean_elementwise_equal(int,int):i => ++i
AOIS_984:472:boolean_elementwise_equal(int,int):i => --i
AOIS_985:472:boolean_elementwise_equal(int,int):i => i++
AOIS_986:472:boolean_elementwise_equal(int,int):i => i--
AOIS_987:472:boolean_elementwise_equal(int,int):a.length => ++a.length
AOIS_988:472:boolean_elementwise_equal(int,int):a.length => --a.length
AOIS_989:472:boolean_elementwise_equal(int,int):a.length => a.length++
AOIS_990:472:boolean_elementwise_equal(int,int):a.length => a.length--
AOIS_991:473:boolean_elementwise_equal(int,int):i => ++i
AOIS_992:473:boolean_elementwise_equal(int,int):i => --i
AOIS_993:473:boolean_elementwise_equal(int,int):i => i++
AOIS_994:473:boolean_elementwise_equal(int,int):i => i--
AOIS_995:473:boolean_elementwise_equal(int,int):i => ++i
AOIS_996:473:boolean_elementwise_equal(int,int):i => --i
AOIS_997:473:boolean_elementwise_equal(int,int):i => i++
AOIS_998:473:boolean_elementwise_equal(int,int):i => i--
AOIS_999:484:boolean_elementwise_not_equal(int,int):a.length => a.length++
AOIS_1000:484:boolean_elementwise_not_equal(int,int):a.length => a.length--
AOIS_1001:485:boolean_elementwise_not_equal(int,int):i => ++i
AOIS_1002:485:boolean_elementwise_not_equal(int,int):i => --i
AOIS_1003:485:boolean_elementwise_not_equal(int,int):i => i++
AOIS_1004:485:boolean_elementwise_not_equal(int,int):i => i--
AOIS_1005:485:boolean_elementwise_not_equal(int,int):a.length => ++a.length
AOIS_1006:485:boolean_elementwise_not_equal(int,int):a.length => --a.length
AOIS_1007:485:boolean_elementwise_not_equal(int,int):a.length => a.length++
AOIS_1008:485:boolean_elementwise_not_equal(int,int):a.length => a.length--
AOIS_1009:486:boolean_elementwise_not_equal(int,int):i => ++i
AOIS_1010:486:boolean_elementwise_not_equal(int,int):i => --i
AOIS_1011:486:boolean_elementwise_not_equal(int,int):i => i++
AOIS_1012:486:boolean_elementwise_not_equal(int,int):i => i--
AOIS_1013:486:boolean_elementwise_not_equal(int,int):i => ++i
AOIS_1014:486:boolean_elementwise_not_equal(int,int):i => --i
AOIS_1015:486:boolean_elementwise_not_equal(int,int):i => i++
AOIS_1016:486:boolean_elementwise_not_equal(int,int):i => i--
AOIS_1017:498:int_hamming_dist(int,int):i => ++i
AOIS_1018:498:int_hamming_dist(int,int):i => --i
AOIS_1019:498:int_hamming_dist(int,int):i => i++
AOIS_1020:498:int_hamming_dist(int,int):i => i--
AOIS_1021:498:int_hamming_dist(int,int):a.length => ++a.length
AOIS_1022:498:int_hamming_dist(int,int):a.length => --a.length
AOIS_1023:498:int_hamming_dist(int,int):a.length => a.length++
AOIS_1024:498:int_hamming_dist(int,int):a.length => a.length--
AOIS_1025:499:int_hamming_dist(int,int):i => ++i
AOIS_1026:499:int_hamming_dist(int,int):i => --i
AOIS_1027:499:int_hamming_dist(int,int):i => i++
AOIS_1028:499:int_hamming_dist(int,int):i => i--
AOIS_1029:499:int_hamming_dist(int,int):i => ++i
AOIS_1030:499:int_hamming_dist(int,int):i => --i
AOIS_1031:499:int_hamming_dist(int,int):i => i++
AOIS_1032:499:int_hamming_dist(int,int):i => i--
AOIS_1033:503:int_hamming_dist(int,int):cnt => cnt++
AOIS_1034:503:int_hamming_dist(int,int):cnt => cnt--
ROR_1:13:int_add_values(int): i < a.length  =>   i > a.length
ROR_2:13:int_add_values(int): i < a.length  =>   i >= a.length
ROR_3:13:int_add_values(int): i < a.length  =>   i <= a.length
ROR_4:13:int_add_values(int): i < a.length  =>   i == a.length
ROR_5:13:int_add_values(int): i < a.length  =>   i != a.length
ROR_6:13:int_add_values(int): i < a.length  =>   true
ROR_7:13:int_add_values(int): i < a.length  =>   false
ROR_8:21:double_add_two_array_values(int,int,int): i < 0  =>   i > 0
ROR_9:21:double_add_two_array_values(int,int,int): i < 0  =>   i >= 0
ROR_10:21:double_add_two_array_values(int,int,int): i < 0  =>   i <= 0
ROR_11:21:double_add_two_array_values(int,int,int): i < 0  =>   i == 0
ROR_12:21:double_add_two_array_values(int,int,int): i < 0  =>   i != 0
ROR_13:21:double_add_two_array_values(int,int,int): i < 0  =>   true
ROR_14:21:double_add_two_array_values(int,int,int): i < 0  =>   false
ROR_15:21:double_add_two_array_values(int,int,int): i >= a.length  =>   i > a.length
ROR_16:21:double_add_two_array_values(int,int,int): i >= a.length  =>   i < a.length
ROR_17:21:double_add_two_array_values(int,int,int): i >= a.length  =>   i <= a.length
ROR_18:21:double_add_two_array_values(int,int,int): i >= a.length  =>   i == a.length
ROR_19:21:double_add_two_array_values(int,int,int): i >= a.length  =>   i != a.length
ROR_20:21:double_add_two_array_values(int,int,int): i >= a.length  =>   true
ROR_21:21:double_add_two_array_values(int,int,int): i >= a.length  =>   false
ROR_22:21:double_add_two_array_values(int,int,int): j < 0  =>   j > 0
ROR_23:21:double_add_two_array_values(int,int,int): j < 0  =>   j >= 0
ROR_24:21:double_add_two_array_values(int,int,int): j < 0  =>   j <= 0
ROR_25:21:double_add_two_array_values(int,int,int): j < 0  =>   j == 0
ROR_26:21:double_add_two_array_values(int,int,int): j < 0  =>   j != 0
ROR_27:21:double_add_two_array_values(int,int,int): j < 0  =>   true
ROR_28:21:double_add_two_array_values(int,int,int): j < 0  =>   false
ROR_29:21:double_add_two_array_values(int,int,int): j >= a.length  =>   j > a.length
ROR_30:21:double_add_two_array_values(int,int,int): j >= a.length  =>   j < a.length
ROR_31:21:double_add_two_array_values(int,int,int): j >= a.length  =>   j <= a.length
ROR_32:21:double_add_two_array_values(int,int,int): j >= a.length  =>   j == a.length
ROR_33:21:double_add_two_array_values(int,int,int): j >= a.length  =>   j != a.length
ROR_34:21:double_add_two_array_values(int,int,int): j >= a.length  =>   true
ROR_35:21:double_add_two_array_values(int,int,int): j >= a.length  =>   false
ROR_36:33:int_bubble(int): i >= 0  =>   i > 0
ROR_37:33:int_bubble(int): i >= 0  =>   i < 0
ROR_38:33:int_bubble(int): i >= 0  =>   i <= 0
ROR_39:33:int_bubble(int): i >= 0  =>   i == 0
ROR_40:33:int_bubble(int): i >= 0  =>   i != 0
ROR_41:33:int_bubble(int): i >= 0  =>   true
ROR_42:33:int_bubble(int): i >= 0  =>   false
ROR_43:34:int_bubble(int): j <= i  =>   j > i
ROR_44:34:int_bubble(int): j <= i  =>   j >= i
ROR_45:34:int_bubble(int): j <= i  =>   j < i
ROR_46:34:int_bubble(int): j <= i  =>   j == i
ROR_47:34:int_bubble(int): j <= i  =>   j != i
ROR_48:34:int_bubble(int): j <= i  =>   true
ROR_49:34:int_bubble(int): j <= i  =>   false
ROR_50:35:int_bubble(int): a[j] > a[j + 1]  =>   a[j] >= a[j + 1]
ROR_51:35:int_bubble(int): a[j] > a[j + 1]  =>   a[j] < a[j + 1]
ROR_52:35:int_bubble(int): a[j] > a[j + 1]  =>   a[j] <= a[j + 1]
ROR_53:35:int_bubble(int): a[j] > a[j + 1]  =>   a[j] == a[j + 1]
ROR_54:35:int_bubble(int): a[j] > a[j + 1]  =>   a[j] != a[j + 1]
ROR_55:35:int_bubble(int): a[j] > a[j + 1]  =>   true
ROR_56:35:int_bubble(int): a[j] > a[j + 1]  =>   false
ROR_57:52:int_shell_sort(int): m > 0  =>   m >= 0
ROR_58:52:int_shell_sort(int): m > 0  =>   m < 0
ROR_59:52:int_shell_sort(int): m > 0  =>   m <= 0
ROR_60:52:int_shell_sort(int): m > 0  =>   m == 0
ROR_61:52:int_shell_sort(int): m > 0  =>   m != 0
ROR_62:52:int_shell_sort(int): m > 0  =>   true
ROR_63:52:int_shell_sort(int): m > 0  =>   false
ROR_64:53:int_shell_sort(int): j < a.length  =>   j > a.length
ROR_65:53:int_shell_sort(int): j < a.length  =>   j >= a.length
ROR_66:53:int_shell_sort(int): j < a.length  =>   j <= a.length
ROR_67:53:int_shell_sort(int): j < a.length  =>   j == a.length
ROR_68:53:int_shell_sort(int): j < a.length  =>   j != a.length
ROR_69:53:int_shell_sort(int): j < a.length  =>   true
ROR_70:53:int_shell_sort(int): j < a.length  =>   false
ROR_71:54:int_shell_sort(int): i >= 0  =>   i > 0
ROR_72:54:int_shell_sort(int): i >= 0  =>   i < 0
ROR_73:54:int_shell_sort(int): i >= 0  =>   i <= 0
ROR_74:54:int_shell_sort(int): i >= 0  =>   i == 0
ROR_75:54:int_shell_sort(int): i >= 0  =>   i != 0
ROR_76:54:int_shell_sort(int): i >= 0  =>   true
ROR_77:54:int_shell_sort(int): i >= 0  =>   false
ROR_78:55:int_shell_sort(int): a[i + m] >= a[i]  =>   a[i + m] > a[i]
ROR_79:55:int_shell_sort(int): a[i + m] >= a[i]  =>   a[i + m] < a[i]
ROR_80:55:int_shell_sort(int): a[i + m] >= a[i]  =>   a[i + m] <= a[i]
ROR_81:55:int_shell_sort(int): a[i + m] >= a[i]  =>   a[i + m] == a[i]
ROR_82:55:int_shell_sort(int): a[i + m] >= a[i]  =>   a[i + m] != a[i]
ROR_83:55:int_shell_sort(int): a[i + m] >= a[i]  =>   true
ROR_84:55:int_shell_sort(int): a[i + m] >= a[i]  =>   false
ROR_85:71:int_sequential_search(int,int): i < a.length  =>   i > a.length
ROR_86:71:int_sequential_search(int,int): i < a.length  =>   i >= a.length
ROR_87:71:int_sequential_search(int,int): i < a.length  =>   i <= a.length
ROR_88:71:int_sequential_search(int,int): i < a.length  =>   i == a.length
ROR_89:71:int_sequential_search(int,int): i < a.length  =>   i != a.length
ROR_90:71:int_sequential_search(int,int): i < a.length  =>   true
ROR_91:71:int_sequential_search(int,int): i < a.length  =>   false
ROR_92:72:int_sequential_search(int,int): a[i] == key  =>   a[i] > key
ROR_93:72:int_sequential_search(int,int): a[i] == key  =>   a[i] >= key
ROR_94:72:int_sequential_search(int,int): a[i] == key  =>   a[i] < key
ROR_95:72:int_sequential_search(int,int): a[i] == key  =>   a[i] <= key
ROR_96:72:int_sequential_search(int,int): a[i] == key  =>   a[i] != key
ROR_97:72:int_sequential_search(int,int): a[i] == key  =>   true
ROR_98:72:int_sequential_search(int,int): a[i] == key  =>   false
ROR_99:84:int_selection_sort(int): i < list.length - 1  =>   i > list.length - 1
ROR_100:84:int_selection_sort(int): i < list.length - 1  =>   i >= list.length - 1
ROR_101:84:int_selection_sort(int): i < list.length - 1  =>   i <= list.length - 1
ROR_102:84:int_selection_sort(int): i < list.length - 1  =>   i == list.length - 1
ROR_103:84:int_selection_sort(int): i < list.length - 1  =>   i != list.length - 1
ROR_104:84:int_selection_sort(int): i < list.length - 1  =>   true
ROR_105:84:int_selection_sort(int): i < list.length - 1  =>   false
ROR_106:86:int_selection_sort(int): j < list.length  =>   j > list.length
ROR_107:86:int_selection_sort(int): j < list.length  =>   j >= list.length
ROR_108:86:int_selection_sort(int): j < list.length  =>   j <= list.length
ROR_109:86:int_selection_sort(int): j < list.length  =>   j == list.length
ROR_110:86:int_selection_sort(int): j < list.length  =>   j != list.length
ROR_111:86:int_selection_sort(int): j < list.length  =>   true
ROR_112:86:int_selection_sort(int): j < list.length  =>   false
ROR_113:87:int_selection_sort(int): list[j] < list[min]  =>   list[j] > list[min]
ROR_114:87:int_selection_sort(int): list[j] < list[min]  =>   list[j] >= list[min]
ROR_115:87:int_selection_sort(int): list[j] < list[min]  =>   list[j] <= list[min]
ROR_116:87:int_selection_sort(int): list[j] < list[min]  =>   list[j] == list[min]
ROR_117:87:int_selection_sort(int): list[j] < list[min]  =>   list[j] != list[min]
ROR_118:87:int_selection_sort(int): list[j] < list[min]  =>   true
ROR_119:87:int_selection_sort(int): list[j] < list[min]  =>   false
ROR_120:100:int_add_values_in_two_arrays(int,int,int): i < 0  =>   i > 0
ROR_121:100:int_add_values_in_two_arrays(int,int,int): i < 0  =>   i >= 0
ROR_122:100:int_add_values_in_two_arrays(int,int,int): i < 0  =>   i <= 0
ROR_123:100:int_add_values_in_two_arrays(int,int,int): i < 0  =>   i == 0
ROR_124:100:int_add_values_in_two_arrays(int,int,int): i < 0  =>   i != 0
ROR_125:100:int_add_values_in_two_arrays(int,int,int): i < 0  =>   true
ROR_126:100:int_add_values_in_two_arrays(int,int,int): i < 0  =>   false
ROR_127:100:int_add_values_in_two_arrays(int,int,int): i >= a.length  =>   i > a.length
ROR_128:100:int_add_values_in_two_arrays(int,int,int): i >= a.length  =>   i < a.length
ROR_129:100:int_add_values_in_two_arrays(int,int,int): i >= a.length  =>   i <= a.length
ROR_130:100:int_add_values_in_two_arrays(int,int,int): i >= a.length  =>   i == a.length
ROR_131:100:int_add_values_in_two_arrays(int,int,int): i >= a.length  =>   i != a.length
ROR_132:100:int_add_values_in_two_arrays(int,int,int): i >= a.length  =>   true
ROR_133:100:int_add_values_in_two_arrays(int,int,int): i >= a.length  =>   false
ROR_134:100:int_add_values_in_two_arrays(int,int,int): i >= b.length  =>   i > b.length
ROR_135:100:int_add_values_in_two_arrays(int,int,int): i >= b.length  =>   i < b.length
ROR_136:100:int_add_values_in_two_arrays(int,int,int): i >= b.length  =>   i <= b.length
ROR_137:100:int_add_values_in_two_arrays(int,int,int): i >= b.length  =>   i == b.length
ROR_138:100:int_add_values_in_two_arrays(int,int,int): i >= b.length  =>   i != b.length
ROR_139:100:int_add_values_in_two_arrays(int,int,int): i >= b.length  =>   true
ROR_140:100:int_add_values_in_two_arrays(int,int,int): i >= b.length  =>   false
ROR_141:111:int_dot_product(int,int): i < a.length  =>   i > a.length
ROR_142:111:int_dot_product(int,int): i < a.length  =>   i >= a.length
ROR_143:111:int_dot_product(int,int): i < a.length  =>   i <= a.length
ROR_144:111:int_dot_product(int,int): i < a.length  =>   i == a.length
ROR_145:111:int_dot_product(int,int): i < a.length  =>   i != a.length
ROR_146:111:int_dot_product(int,int): i < a.length  =>   true
ROR_147:111:int_dot_product(int,int): i < a.length  =>   false
ROR_148:121:int_array_calc1(int,int): i < a.length  =>   i > a.length
ROR_149:121:int_array_calc1(int,int): i < a.length  =>   i >= a.length
ROR_150:121:int_array_calc1(int,int): i < a.length  =>   i <= a.length
ROR_151:121:int_array_calc1(int,int): i < a.length  =>   i == a.length
ROR_152:121:int_array_calc1(int,int): i < a.length  =>   i != a.length
ROR_153:121:int_array_calc1(int,int): i < a.length  =>   true
ROR_154:121:int_array_calc1(int,int): i < a.length  =>   false
ROR_155:130:int_set_min_val(int,int): i < a.length  =>   i > a.length
ROR_156:130:int_set_min_val(int,int): i < a.length  =>   i >= a.length
ROR_157:130:int_set_min_val(int,int): i < a.length  =>   i <= a.length
ROR_158:130:int_set_min_val(int,int): i < a.length  =>   i == a.length
ROR_159:130:int_set_min_val(int,int): i < a.length  =>   i != a.length
ROR_160:130:int_set_min_val(int,int): i < a.length  =>   true
ROR_161:130:int_set_min_val(int,int): i < a.length  =>   false
ROR_162:131:int_set_min_val(int,int): a[i] < k  =>   a[i] > k
ROR_163:131:int_set_min_val(int,int): a[i] < k  =>   a[i] >= k
ROR_164:131:int_set_min_val(int,int): a[i] < k  =>   a[i] <= k
ROR_165:131:int_set_min_val(int,int): a[i] < k  =>   a[i] == k
ROR_166:131:int_set_min_val(int,int): a[i] < k  =>   a[i] != k
ROR_167:131:int_set_min_val(int,int): a[i] < k  =>   true
ROR_168:131:int_set_min_val(int,int): a[i] < k  =>   false
ROR_169:140:int_get_array_value(int,int): k - 1 >= a.length  =>   k - 1 > a.length
ROR_170:140:int_get_array_value(int,int): k - 1 >= a.length  =>   k - 1 < a.length
ROR_171:140:int_get_array_value(int,int): k - 1 >= a.length  =>   k - 1 <= a.length
ROR_172:140:int_get_array_value(int,int): k - 1 >= a.length  =>   k - 1 == a.length
ROR_173:140:int_get_array_value(int,int): k - 1 >= a.length  =>   k - 1 != a.length
ROR_174:140:int_get_array_value(int,int): k - 1 >= a.length  =>   true
ROR_175:140:int_get_array_value(int,int): k - 1 >= a.length  =>   false
ROR_176:140:int_get_array_value(int,int): k - 1 < 0  =>   k - 1 > 0
ROR_177:140:int_get_array_value(int,int): k - 1 < 0  =>   k - 1 >= 0
ROR_178:140:int_get_array_value(int,int): k - 1 < 0  =>   k - 1 <= 0
ROR_179:140:int_get_array_value(int,int): k - 1 < 0  =>   k - 1 == 0
ROR_180:140:int_get_array_value(int,int): k - 1 < 0  =>   k - 1 != 0
ROR_181:140:int_get_array_value(int,int): k - 1 < 0  =>   true
ROR_182:140:int_get_array_value(int,int): k - 1 < 0  =>   false
ROR_183:151:int_find_min(int): i < a.length  =>   i > a.length
ROR_184:151:int_find_min(int): i < a.length  =>   i >= a.length
ROR_185:151:int_find_min(int): i < a.length  =>   i <= a.length
ROR_186:151:int_find_min(int): i < a.length  =>   i == a.length
ROR_187:151:int_find_min(int): i < a.length  =>   i != a.length
ROR_188:151:int_find_min(int): i < a.length  =>   true
ROR_189:151:int_find_min(int): i < a.length  =>   false
ROR_190:152:int_find_min(int): a[i] < min  =>   a[i] > min
ROR_191:152:int_find_min(int): a[i] < min  =>   a[i] >= min
ROR_192:152:int_find_min(int): a[i] < min  =>   a[i] <= min
ROR_193:152:int_find_min(int): a[i] < min  =>   a[i] == min
ROR_194:152:int_find_min(int): a[i] < min  =>   a[i] != min
ROR_195:152:int_find_min(int): a[i] < min  =>   true
ROR_196:152:int_find_min(int): a[i] < min  =>   false
ROR_197:163:int_find_diff(int,int): i < a.length  =>   i > a.length
ROR_198:163:int_find_diff(int,int): i < a.length  =>   i >= a.length
ROR_199:163:int_find_diff(int,int): i < a.length  =>   i <= a.length
ROR_200:163:int_find_diff(int,int): i < a.length  =>   i == a.length
ROR_201:163:int_find_diff(int,int): i < a.length  =>   i != a.length
ROR_202:163:int_find_diff(int,int): i < a.length  =>   true
ROR_203:163:int_find_diff(int,int): i < a.length  =>   false
ROR_204:173:int_array_copy(int): i < a.length  =>   i > a.length
ROR_205:173:int_array_copy(int): i < a.length  =>   i >= a.length
ROR_206:173:int_array_copy(int): i < a.length  =>   i <= a.length
ROR_207:173:int_array_copy(int): i < a.length  =>   i == a.length
ROR_208:173:int_array_copy(int): i < a.length  =>   i != a.length
ROR_209:173:int_array_copy(int): i < a.length  =>   true
ROR_210:173:int_array_copy(int): i < a.length  =>   false
ROR_211:183:double_find_euc_dist(int,int): i < a.length  =>   i > a.length
ROR_212:183:double_find_euc_dist(int,int): i < a.length  =>   i >= a.length
ROR_213:183:double_find_euc_dist(int,int): i < a.length  =>   i <= a.length
ROR_214:183:double_find_euc_dist(int,int): i < a.length  =>   i == a.length
ROR_215:183:double_find_euc_dist(int,int): i < a.length  =>   i != a.length
ROR_216:183:double_find_euc_dist(int,int): i < a.length  =>   true
ROR_217:183:double_find_euc_dist(int,int): i < a.length  =>   false
ROR_218:194:double_find_magnitude(int): i < a.length  =>   i > a.length
ROR_219:194:double_find_magnitude(int): i < a.length  =>   i >= a.length
ROR_220:194:double_find_magnitude(int): i < a.length  =>   i <= a.length
ROR_221:194:double_find_magnitude(int): i < a.length  =>   i == a.length
ROR_222:194:double_find_magnitude(int): i < a.length  =>   i != a.length
ROR_223:194:double_find_magnitude(int): i < a.length  =>   true
ROR_224:194:double_find_magnitude(int): i < a.length  =>   false
ROR_225:205:double_manhattan_dist(int,int): i < a.length  =>   i > a.length
ROR_226:205:double_manhattan_dist(int,int): i < a.length  =>   i >= a.length
ROR_227:205:double_manhattan_dist(int,int): i < a.length  =>   i <= a.length
ROR_228:205:double_manhattan_dist(int,int): i < a.length  =>   i == a.length
ROR_229:205:double_manhattan_dist(int,int): i < a.length  =>   i != a.length
ROR_230:205:double_manhattan_dist(int,int): i < a.length  =>   true
ROR_231:205:double_manhattan_dist(int,int): i < a.length  =>   false
ROR_232:214:double_average(int): i < a.length  =>   i > a.length
ROR_233:214:double_average(int): i < a.length  =>   i >= a.length
ROR_234:214:double_average(int): i < a.length  =>   i <= a.length
ROR_235:214:double_average(int): i < a.length  =>   i == a.length
ROR_236:214:double_average(int): i < a.length  =>   i != a.length
ROR_237:214:double_average(int): i < a.length  =>   true
ROR_238:214:double_average(int): i < a.length  =>   false
ROR_239:223:int_dec_array(int,int): i < a.length  =>   i > a.length
ROR_240:223:int_dec_array(int,int): i < a.length  =>   i >= a.length
ROR_241:223:int_dec_array(int,int): i < a.length  =>   i <= a.length
ROR_242:223:int_dec_array(int,int): i < a.length  =>   i == a.length
ROR_243:223:int_dec_array(int,int): i < a.length  =>   i != a.length
ROR_244:223:int_dec_array(int,int): i < a.length  =>   true
ROR_245:223:int_dec_array(int,int): i < a.length  =>   false
ROR_246:238:int_find_max(int): i < a.length  =>   i > a.length
ROR_247:238:int_find_max(int): i < a.length  =>   i >= a.length
ROR_248:238:int_find_max(int): i < a.length  =>   i <= a.length
ROR_249:238:int_find_max(int): i < a.length  =>   i == a.length
ROR_250:238:int_find_max(int): i < a.length  =>   i != a.length
ROR_251:238:int_find_max(int): i < a.length  =>   true
ROR_252:238:int_find_max(int): i < a.length  =>   false
ROR_253:239:int_find_max(int): a[i] > max  =>   a[i] >= max
ROR_254:239:int_find_max(int): a[i] > max  =>   a[i] < max
ROR_255:239:int_find_max(int): a[i] > max  =>   a[i] <= max
ROR_256:239:int_find_max(int): a[i] > max  =>   a[i] == max
ROR_257:239:int_find_max(int): a[i] > max  =>   a[i] != max
ROR_258:239:int_find_max(int): a[i] > max  =>   true
ROR_259:239:int_find_max(int): a[i] > max  =>   false
ROR_260:249:int_find_max2(int): i < a.length - 1  =>   i > a.length - 1
ROR_261:249:int_find_max2(int): i < a.length - 1  =>   i >= a.length - 1
ROR_262:249:int_find_max2(int): i < a.length - 1  =>   i <= a.length - 1
ROR_263:249:int_find_max2(int): i < a.length - 1  =>   i == a.length - 1
ROR_264:249:int_find_max2(int): i < a.length - 1  =>   i != a.length - 1
ROR_265:249:int_find_max2(int): i < a.length - 1  =>   true
ROR_266:249:int_find_max2(int): i < a.length - 1  =>   false
ROR_267:250:int_find_max2(int): a[i] + a[i + 1] > max  =>   a[i] + a[i + 1] >= max
ROR_268:250:int_find_max2(int): a[i] + a[i + 1] > max  =>   a[i] + a[i + 1] < max
ROR_269:250:int_find_max2(int): a[i] + a[i + 1] > max  =>   a[i] + a[i + 1] <= max
ROR_270:250:int_find_max2(int): a[i] + a[i + 1] > max  =>   a[i] + a[i + 1] == max
ROR_271:250:int_find_max2(int): a[i] + a[i + 1] > max  =>   a[i] + a[i + 1] != max
ROR_272:250:int_find_max2(int): a[i] + a[i + 1] > max  =>   true
ROR_273:250:int_find_max2(int): a[i] + a[i + 1] > max  =>   false
ROR_274:263:double_variance(double): i < x.length  =>   i > x.length
ROR_275:263:double_variance(double): i < x.length  =>   i >= x.length
ROR_276:263:double_variance(double): i < x.length  =>   i <= x.length
ROR_277:263:double_variance(double): i < x.length  =>   i == x.length
ROR_278:263:double_variance(double): i < x.length  =>   i != x.length
ROR_279:263:double_variance(double): i < x.length  =>   true
ROR_280:263:double_variance(double): i < x.length  =>   false
ROR_281:267:double_variance(double): i < x.length  =>   i > x.length
ROR_282:267:double_variance(double): i < x.length  =>   i >= x.length
ROR_283:267:double_variance(double): i < x.length  =>   i <= x.length
ROR_284:267:double_variance(double): i < x.length  =>   i == x.length
ROR_285:267:double_variance(double): i < x.length  =>   i != x.length
ROR_286:267:double_variance(double): i < x.length  =>   true
ROR_287:267:double_variance(double): i < x.length  =>   false
ROR_288:276:int_insertion_sort(int): i < array.length  =>   i > array.length
ROR_289:276:int_insertion_sort(int): i < array.length  =>   i >= array.length
ROR_290:276:int_insertion_sort(int): i < array.length  =>   i <= array.length
ROR_291:276:int_insertion_sort(int): i < array.length  =>   i == array.length
ROR_292:276:int_insertion_sort(int): i < array.length  =>   i != array.length
ROR_293:276:int_insertion_sort(int): i < array.length  =>   true
ROR_294:276:int_insertion_sort(int): i < array.length  =>   false
ROR_295:279:int_insertion_sort(int): j > 0  =>   j >= 0
ROR_296:279:int_insertion_sort(int): j > 0  =>   j < 0
ROR_297:279:int_insertion_sort(int): j > 0  =>   j <= 0
ROR_298:279:int_insertion_sort(int): j > 0  =>   j == 0
ROR_299:279:int_insertion_sort(int): j > 0  =>   j != 0
ROR_300:279:int_insertion_sort(int): j > 0  =>   true
ROR_301:279:int_insertion_sort(int): j > 0  =>   false
ROR_302:279:int_insertion_sort(int): array[j - 1] > B  =>   array[j - 1] >= B
ROR_303:279:int_insertion_sort(int): array[j - 1] > B  =>   array[j - 1] < B
ROR_304:279:int_insertion_sort(int): array[j - 1] > B  =>   array[j - 1] <= B
ROR_305:279:int_insertion_sort(int): array[j - 1] > B  =>   array[j - 1] == B
ROR_306:279:int_insertion_sort(int): array[j - 1] > B  =>   array[j - 1] != B
ROR_307:279:int_insertion_sort(int): array[j - 1] > B  =>   true
ROR_308:279:int_insertion_sort(int): array[j - 1] > B  =>   false
ROR_309:291:double_geometric_mean(int): i < a.length  =>   i > a.length
ROR_310:291:double_geometric_mean(int): i < a.length  =>   i >= a.length
ROR_311:291:double_geometric_mean(int): i < a.length  =>   i <= a.length
ROR_312:291:double_geometric_mean(int): i < a.length  =>   i == a.length
ROR_313:291:double_geometric_mean(int): i < a.length  =>   i != a.length
ROR_314:291:double_geometric_mean(int): i < a.length  =>   true
ROR_315:291:double_geometric_mean(int): i < a.length  =>   false
ROR_316:300:double_mean_absolute_error(int,int): i < a.length  =>   i > a.length
ROR_317:300:double_mean_absolute_error(int,int): i < a.length  =>   i >= a.length
ROR_318:300:double_mean_absolute_error(int,int): i < a.length  =>   i <= a.length
ROR_319:300:double_mean_absolute_error(int,int): i < a.length  =>   i == a.length
ROR_320:300:double_mean_absolute_error(int,int): i < a.length  =>   i != a.length
ROR_321:300:double_mean_absolute_error(int,int): i < a.length  =>   true
ROR_322:300:double_mean_absolute_error(int,int): i < a.length  =>   false
ROR_323:311:double_find_median(int): i < k  =>   i > k
ROR_324:311:double_find_median(int): i < k  =>   i >= k
ROR_325:311:double_find_median(int): i < k  =>   i <= k
ROR_326:311:double_find_median(int): i < k  =>   i == k
ROR_327:311:double_find_median(int): i < k  =>   i != k
ROR_328:311:double_find_median(int): i < k  =>   true
ROR_329:311:double_find_median(int): i < k  =>   false
ROR_330:314:double_find_median(int): j < a.length  =>   j > a.length
ROR_331:314:double_find_median(int): j < a.length  =>   j >= a.length
ROR_332:314:double_find_median(int): j < a.length  =>   j <= a.length
ROR_333:314:double_find_median(int): j < a.length  =>   j == a.length
ROR_334:314:double_find_median(int): j < a.length  =>   j != a.length
ROR_335:314:double_find_median(int): j < a.length  =>   true
ROR_336:314:double_find_median(int): j < a.length  =>   false
ROR_337:315:double_find_median(int): a[j] < minValue  =>   a[j] > minValue
ROR_338:315:double_find_median(int): a[j] < minValue  =>   a[j] >= minValue
ROR_339:315:double_find_median(int): a[j] < minValue  =>   a[j] <= minValue
ROR_340:315:double_find_median(int): a[j] < minValue  =>   a[j] == minValue
ROR_341:315:double_find_median(int): a[j] < minValue  =>   a[j] != minValue
ROR_342:315:double_find_median(int): a[j] < minValue  =>   true
ROR_343:315:double_find_median(int): a[j] < minValue  =>   false
ROR_344:324:double_find_median(int): a.length % 2 == 0  =>   a.length % 2 > 0
ROR_345:324:double_find_median(int): a.length % 2 == 0  =>   a.length % 2 >= 0
ROR_346:324:double_find_median(int): a.length % 2 == 0  =>   a.length % 2 < 0
ROR_347:324:double_find_median(int): a.length % 2 == 0  =>   a.length % 2 <= 0
ROR_348:324:double_find_median(int): a.length % 2 == 0  =>   a.length % 2 != 0
ROR_349:324:double_find_median(int): a.length % 2 == 0  =>   true
ROR_350:324:double_find_median(int): a.length % 2 == 0  =>   false
ROR_351:335:int_cartesian_product(int,int): i < a.length  =>   i > a.length
ROR_352:335:int_cartesian_product(int,int): i < a.length  =>   i >= a.length
ROR_353:335:int_cartesian_product(int,int): i < a.length  =>   i <= a.length
ROR_354:335:int_cartesian_product(int,int): i < a.length  =>   i == a.length
ROR_355:335:int_cartesian_product(int,int): i < a.length  =>   i != a.length
ROR_356:335:int_cartesian_product(int,int): i < a.length  =>   true
ROR_357:335:int_cartesian_product(int,int): i < a.length  =>   false
ROR_358:336:int_cartesian_product(int,int): j < b.length  =>   j > b.length
ROR_359:336:int_cartesian_product(int,int): j < b.length  =>   j >= b.length
ROR_360:336:int_cartesian_product(int,int): j < b.length  =>   j <= b.length
ROR_361:336:int_cartesian_product(int,int): j < b.length  =>   j == b.length
ROR_362:336:int_cartesian_product(int,int): j < b.length  =>   j != b.length
ROR_363:336:int_cartesian_product(int,int): j < b.length  =>   true
ROR_364:336:int_cartesian_product(int,int): j < b.length  =>   false
ROR_365:349:int_reverse(int): i >= 0  =>   i > 0
ROR_366:349:int_reverse(int): i >= 0  =>   i < 0
ROR_367:349:int_reverse(int): i >= 0  =>   i <= 0
ROR_368:349:int_reverse(int): i >= 0  =>   i == 0
ROR_369:349:int_reverse(int): i >= 0  =>   i != 0
ROR_370:349:int_reverse(int): i >= 0  =>   true
ROR_371:349:int_reverse(int): i >= 0  =>   false
ROR_372:358:boolean_check_equal_tolerance(double,double,double): a.length != b.length  =>   a.length > b.length
ROR_373:358:boolean_check_equal_tolerance(double,double,double): a.length != b.length  =>   a.length >= b.length
ROR_374:358:boolean_check_equal_tolerance(double,double,double): a.length != b.length  =>   a.length < b.length
ROR_375:358:boolean_check_equal_tolerance(double,double,double): a.length != b.length  =>   a.length <= b.length
ROR_376:358:boolean_check_equal_tolerance(double,double,double): a.length != b.length  =>   a.length == b.length
ROR_377:358:boolean_check_equal_tolerance(double,double,double): a.length != b.length  =>   true
ROR_378:358:boolean_check_equal_tolerance(double,double,double): a.length != b.length  =>   false
ROR_379:361:boolean_check_equal_tolerance(double,double,double): i < a.length  =>   i > a.length
ROR_380:361:boolean_check_equal_tolerance(double,double,double): i < a.length  =>   i >= a.length
ROR_381:361:boolean_check_equal_tolerance(double,double,double): i < a.length  =>   i <= a.length
ROR_382:361:boolean_check_equal_tolerance(double,double,double): i < a.length  =>   i == a.length
ROR_383:361:boolean_check_equal_tolerance(double,double,double): i < a.length  =>   i != a.length
ROR_384:361:boolean_check_equal_tolerance(double,double,double): i < a.length  =>   true
ROR_385:361:boolean_check_equal_tolerance(double,double,double): i < a.length  =>   false
ROR_386:362:boolean_check_equal_tolerance(double,double,double): Math.abs( a[i] - b[i] ) >= tol  =>   Math.abs( a[i] - b[i] ) > tol
ROR_387:362:boolean_check_equal_tolerance(double,double,double): Math.abs( a[i] - b[i] ) >= tol  =>   Math.abs( a[i] - b[i] ) < tol
ROR_388:362:boolean_check_equal_tolerance(double,double,double): Math.abs( a[i] - b[i] ) >= tol  =>   Math.abs( a[i] - b[i] ) <= tol
ROR_389:362:boolean_check_equal_tolerance(double,double,double): Math.abs( a[i] - b[i] ) >= tol  =>   Math.abs( a[i] - b[i] ) == tol
ROR_390:362:boolean_check_equal_tolerance(double,double,double): Math.abs( a[i] - b[i] ) >= tol  =>   Math.abs( a[i] - b[i] ) != tol
ROR_391:362:boolean_check_equal_tolerance(double,double,double): Math.abs( a[i] - b[i] ) >= tol  =>   true
ROR_392:362:boolean_check_equal_tolerance(double,double,double): Math.abs( a[i] - b[i] ) >= tol  =>   false
ROR_393:371:boolean_check_equal(int,int): a.length != b.length  =>   a.length > b.length
ROR_394:371:boolean_check_equal(int,int): a.length != b.length  =>   a.length >= b.length
ROR_395:371:boolean_check_equal(int,int): a.length != b.length  =>   a.length < b.length
ROR_396:371:boolean_check_equal(int,int): a.length != b.length  =>   a.length <= b.length
ROR_397:371:boolean_check_equal(int,int): a.length != b.length  =>   a.length == b.length
ROR_398:371:boolean_check_equal(int,int): a.length != b.length  =>   true
ROR_399:371:boolean_check_equal(int,int): a.length != b.length  =>   false
ROR_400:374:boolean_check_equal(int,int): i < a.length  =>   i > a.length
ROR_401:374:boolean_check_equal(int,int): i < a.length  =>   i >= a.length
ROR_402:374:boolean_check_equal(int,int): i < a.length  =>   i <= a.length
ROR_403:374:boolean_check_equal(int,int): i < a.length  =>   i == a.length
ROR_404:374:boolean_check_equal(int,int): i < a.length  =>   i != a.length
ROR_405:374:boolean_check_equal(int,int): i < a.length  =>   true
ROR_406:374:boolean_check_equal(int,int): i < a.length  =>   false
ROR_407:375:boolean_check_equal(int,int): a[i] != b[i]  =>   a[i] > b[i]
ROR_408:375:boolean_check_equal(int,int): a[i] != b[i]  =>   a[i] >= b[i]
ROR_409:375:boolean_check_equal(int,int): a[i] != b[i]  =>   a[i] < b[i]
ROR_410:375:boolean_check_equal(int,int): a[i] != b[i]  =>   a[i] <= b[i]
ROR_411:375:boolean_check_equal(int,int): a[i] != b[i]  =>   a[i] == b[i]
ROR_412:375:boolean_check_equal(int,int): a[i] != b[i]  =>   true
ROR_413:375:boolean_check_equal(int,int): a[i] != b[i]  =>   false
ROR_414:386:double_weighted_average(double,double): i < a.length  =>   i > a.length
ROR_415:386:double_weighted_average(double,double): i < a.length  =>   i >= a.length
ROR_416:386:double_weighted_average(double,double): i < a.length  =>   i <= a.length
ROR_417:386:double_weighted_average(double,double): i < a.length  =>   i == a.length
ROR_418:386:double_weighted_average(double,double): i < a.length  =>   i != a.length
ROR_419:386:double_weighted_average(double,double): i < a.length  =>   true
ROR_420:386:double_weighted_average(double,double): i < a.length  =>   false
ROR_421:396:int_count_k(int,int): i < a.length  =>   i > a.length
ROR_422:396:int_count_k(int,int): i < a.length  =>   i >= a.length
ROR_423:396:int_count_k(int,int): i < a.length  =>   i <= a.length
ROR_424:396:int_count_k(int,int): i < a.length  =>   i == a.length
ROR_425:396:int_count_k(int,int): i < a.length  =>   i != a.length
ROR_426:396:int_count_k(int,int): i < a.length  =>   true
ROR_427:396:int_count_k(int,int): i < a.length  =>   false
ROR_428:397:int_count_k(int,int): a[i] == k  =>   a[i] > k
ROR_429:397:int_count_k(int,int): a[i] == k  =>   a[i] >= k
ROR_430:397:int_count_k(int,int): a[i] == k  =>   a[i] < k
ROR_431:397:int_count_k(int,int): a[i] == k  =>   a[i] <= k
ROR_432:397:int_count_k(int,int): a[i] == k  =>   a[i] != k
ROR_433:397:int_count_k(int,int): a[i] == k  =>   true
ROR_434:397:int_count_k(int,int): a[i] == k  =>   false
ROR_435:407:int_clip(int,int,int): i < a.length  =>   i > a.length
ROR_436:407:int_clip(int,int,int): i < a.length  =>   i >= a.length
ROR_437:407:int_clip(int,int,int): i < a.length  =>   i <= a.length
ROR_438:407:int_clip(int,int,int): i < a.length  =>   i == a.length
ROR_439:407:int_clip(int,int,int): i < a.length  =>   i != a.length
ROR_440:407:int_clip(int,int,int): i < a.length  =>   true
ROR_441:407:int_clip(int,int,int): i < a.length  =>   false
ROR_442:408:int_clip(int,int,int): a[i] < lowerLim  =>   a[i] > lowerLim
ROR_443:408:int_clip(int,int,int): a[i] < lowerLim  =>   a[i] >= lowerLim
ROR_444:408:int_clip(int,int,int): a[i] < lowerLim  =>   a[i] <= lowerLim
ROR_445:408:int_clip(int,int,int): a[i] < lowerLim  =>   a[i] == lowerLim
ROR_446:408:int_clip(int,int,int): a[i] < lowerLim  =>   a[i] != lowerLim
ROR_447:408:int_clip(int,int,int): a[i] < lowerLim  =>   true
ROR_448:408:int_clip(int,int,int): a[i] < lowerLim  =>   false
ROR_449:411:int_clip(int,int,int): a[i] > upperLim  =>   a[i] >= upperLim
ROR_450:411:int_clip(int,int,int): a[i] > upperLim  =>   a[i] < upperLim
ROR_451:411:int_clip(int,int,int): a[i] > upperLim  =>   a[i] <= upperLim
ROR_452:411:int_clip(int,int,int): a[i] > upperLim  =>   a[i] == upperLim
ROR_453:411:int_clip(int,int,int): a[i] > upperLim  =>   a[i] != upperLim
ROR_454:411:int_clip(int,int,int): a[i] > upperLim  =>   true
ROR_455:411:int_clip(int,int,int): a[i] > upperLim  =>   false
ROR_456:424:int_elementwise_max(int,int): i < a.length  =>   i > a.length
ROR_457:424:int_elementwise_max(int,int): i < a.length  =>   i >= a.length
ROR_458:424:int_elementwise_max(int,int): i < a.length  =>   i <= a.length
ROR_459:424:int_elementwise_max(int,int): i < a.length  =>   i == a.length
ROR_460:424:int_elementwise_max(int,int): i < a.length  =>   i != a.length
ROR_461:424:int_elementwise_max(int,int): i < a.length  =>   true
ROR_462:424:int_elementwise_max(int,int): i < a.length  =>   false
ROR_463:425:int_elementwise_max(int,int): a[i] > b[i]  =>   a[i] >= b[i]
ROR_464:425:int_elementwise_max(int,int): a[i] > b[i]  =>   a[i] < b[i]
ROR_465:425:int_elementwise_max(int,int): a[i] > b[i]  =>   a[i] <= b[i]
ROR_466:425:int_elementwise_max(int,int): a[i] > b[i]  =>   a[i] == b[i]
ROR_467:425:int_elementwise_max(int,int): a[i] > b[i]  =>   a[i] != b[i]
ROR_468:425:int_elementwise_max(int,int): a[i] > b[i]  =>   true
ROR_469:425:int_elementwise_max(int,int): a[i] > b[i]  =>   false
ROR_470:437:int_elementwise_min(int,int): i < a.length  =>   i > a.length
ROR_471:437:int_elementwise_min(int,int): i < a.length  =>   i >= a.length
ROR_472:437:int_elementwise_min(int,int): i < a.length  =>   i <= a.length
ROR_473:437:int_elementwise_min(int,int): i < a.length  =>   i == a.length
ROR_474:437:int_elementwise_min(int,int): i < a.length  =>   i != a.length
ROR_475:437:int_elementwise_min(int,int): i < a.length  =>   true
ROR_476:437:int_elementwise_min(int,int): i < a.length  =>   false
ROR_477:438:int_elementwise_min(int,int): a[i] < b[i]  =>   a[i] > b[i]
ROR_478:438:int_elementwise_min(int,int): a[i] < b[i]  =>   a[i] >= b[i]
ROR_479:438:int_elementwise_min(int,int): a[i] < b[i]  =>   a[i] <= b[i]
ROR_480:438:int_elementwise_min(int,int): a[i] < b[i]  =>   a[i] == b[i]
ROR_481:438:int_elementwise_min(int,int): a[i] < b[i]  =>   a[i] != b[i]
ROR_482:438:int_elementwise_min(int,int): a[i] < b[i]  =>   true
ROR_483:438:int_elementwise_min(int,int): a[i] < b[i]  =>   false
ROR_484:450:int_count_non_zeroes(int): i < a.length  =>   i > a.length
ROR_485:450:int_count_non_zeroes(int): i < a.length  =>   i >= a.length
ROR_486:450:int_count_non_zeroes(int): i < a.length  =>   i <= a.length
ROR_487:450:int_count_non_zeroes(int): i < a.length  =>   i == a.length
ROR_488:450:int_count_non_zeroes(int): i < a.length  =>   i != a.length
ROR_489:450:int_count_non_zeroes(int): i < a.length  =>   true
ROR_490:450:int_count_non_zeroes(int): i < a.length  =>   false
ROR_491:451:int_count_non_zeroes(int): a[i] != 0  =>   a[i] > 0
ROR_492:451:int_count_non_zeroes(int): a[i] != 0  =>   a[i] >= 0
ROR_493:451:int_count_non_zeroes(int): a[i] != 0  =>   a[i] < 0
ROR_494:451:int_count_non_zeroes(int): a[i] != 0  =>   a[i] <= 0
ROR_495:451:int_count_non_zeroes(int): a[i] != 0  =>   a[i] == 0
ROR_496:451:int_count_non_zeroes(int): a[i] != 0  =>   true
ROR_497:451:int_count_non_zeroes(int): a[i] != 0  =>   false
ROR_498:461:int_cnt_zeroes(int): i < a.length  =>   i > a.length
ROR_499:461:int_cnt_zeroes(int): i < a.length  =>   i >= a.length
ROR_500:461:int_cnt_zeroes(int): i < a.length  =>   i <= a.length
ROR_501:461:int_cnt_zeroes(int): i < a.length  =>   i == a.length
ROR_502:461:int_cnt_zeroes(int): i < a.length  =>   i != a.length
ROR_503:461:int_cnt_zeroes(int): i < a.length  =>   true
ROR_504:461:int_cnt_zeroes(int): i < a.length  =>   false
ROR_505:462:int_cnt_zeroes(int): a[i] == 0  =>   a[i] > 0
ROR_506:462:int_cnt_zeroes(int): a[i] == 0  =>   a[i] >= 0
ROR_507:462:int_cnt_zeroes(int): a[i] == 0  =>   a[i] < 0
ROR_508:462:int_cnt_zeroes(int): a[i] == 0  =>   a[i] <= 0
ROR_509:462:int_cnt_zeroes(int): a[i] == 0  =>   a[i] != 0
ROR_510:462:int_cnt_zeroes(int): a[i] == 0  =>   true
ROR_511:462:int_cnt_zeroes(int): a[i] == 0  =>   false
ROR_512:472:boolean_elementwise_equal(int,int): i < a.length  =>   i > a.length
ROR_513:472:boolean_elementwise_equal(int,int): i < a.length  =>   i >= a.length
ROR_514:472:boolean_elementwise_equal(int,int): i < a.length  =>   i <= a.length
ROR_515:472:boolean_elementwise_equal(int,int): i < a.length  =>   i == a.length
ROR_516:472:boolean_elementwise_equal(int,int): i < a.length  =>   i != a.length
ROR_517:472:boolean_elementwise_equal(int,int): i < a.length  =>   true
ROR_518:472:boolean_elementwise_equal(int,int): i < a.length  =>   false
ROR_519:473:boolean_elementwise_equal(int,int): a[i] == b[i]  =>   a[i] > b[i]
ROR_520:473:boolean_elementwise_equal(int,int): a[i] == b[i]  =>   a[i] >= b[i]
ROR_521:473:boolean_elementwise_equal(int,int): a[i] == b[i]  =>   a[i] < b[i]
ROR_522:473:boolean_elementwise_equal(int,int): a[i] == b[i]  =>   a[i] <= b[i]
ROR_523:473:boolean_elementwise_equal(int,int): a[i] == b[i]  =>   a[i] != b[i]
ROR_524:473:boolean_elementwise_equal(int,int): a[i] == b[i]  =>   true
ROR_525:473:boolean_elementwise_equal(int,int): a[i] == b[i]  =>   false
ROR_526:485:boolean_elementwise_not_equal(int,int): i < a.length  =>   i > a.length
ROR_527:485:boolean_elementwise_not_equal(int,int): i < a.length  =>   i >= a.length
ROR_528:485:boolean_elementwise_not_equal(int,int): i < a.length  =>   i <= a.length
ROR_529:485:boolean_elementwise_not_equal(int,int): i < a.length  =>   i == a.length
ROR_530:485:boolean_elementwise_not_equal(int,int): i < a.length  =>   i != a.length
ROR_531:485:boolean_elementwise_not_equal(int,int): i < a.length  =>   true
ROR_532:485:boolean_elementwise_not_equal(int,int): i < a.length  =>   false
ROR_533:486:boolean_elementwise_not_equal(int,int): a[i] != b[i]  =>   a[i] > b[i]
ROR_534:486:boolean_elementwise_not_equal(int,int): a[i] != b[i]  =>   a[i] >= b[i]
ROR_535:486:boolean_elementwise_not_equal(int,int): a[i] != b[i]  =>   a[i] < b[i]
ROR_536:486:boolean_elementwise_not_equal(int,int): a[i] != b[i]  =>   a[i] <= b[i]
ROR_537:486:boolean_elementwise_not_equal(int,int): a[i] != b[i]  =>   a[i] == b[i]
ROR_538:486:boolean_elementwise_not_equal(int,int): a[i] != b[i]  =>   true
ROR_539:486:boolean_elementwise_not_equal(int,int): a[i] != b[i]  =>   false
ROR_540:498:int_hamming_dist(int,int): i < a.length  =>   i > a.length
ROR_541:498:int_hamming_dist(int,int): i < a.length  =>   i >= a.length
ROR_542:498:int_hamming_dist(int,int): i < a.length  =>   i <= a.length
ROR_543:498:int_hamming_dist(int,int): i < a.length  =>   i == a.length
ROR_544:498:int_hamming_dist(int,int): i < a.length  =>   i != a.length
ROR_545:498:int_hamming_dist(int,int): i < a.length  =>   true
ROR_546:498:int_hamming_dist(int,int): i < a.length  =>   false
ROR_547:499:int_hamming_dist(int,int): a[i] != b[i]  =>   a[i] > b[i]
ROR_548:499:int_hamming_dist(int,int): a[i] != b[i]  =>   a[i] >= b[i]
ROR_549:499:int_hamming_dist(int,int): a[i] != b[i]  =>   a[i] < b[i]
ROR_550:499:int_hamming_dist(int,int): a[i] != b[i]  =>   a[i] <= b[i]
ROR_551:499:int_hamming_dist(int,int): a[i] != b[i]  =>   a[i] == b[i]
ROR_552:499:int_hamming_dist(int,int): a[i] != b[i]  =>   true
ROR_553:499:int_hamming_dist(int,int): a[i] != b[i]  =>   false
COR_1:21:double_add_two_array_values(int,int,int): i < 0 || i >= a.length  =>   i < 0 && i >= a.length
COR_2:21:double_add_two_array_values(int,int,int): i < 0 || i >= a.length  =>   i < 0 ^ i >= a.length
COR_3:21:double_add_two_array_values(int,int,int): i < 0 || i >= a.length || j < 0  =>   (i < 0 || i >= a.length) && j < 0
COR_4:21:double_add_two_array_values(int,int,int): i < 0 || i >= a.length || j < 0  =>   (i < 0 || i >= a.length) ^ j < 0
COR_5:21:double_add_two_array_values(int,int,int): i < 0 || i >= a.length || j < 0 || j >= a.length  =>   (i < 0 || i >= a.length || j < 0) && j >= a.length
COR_6:21:double_add_two_array_values(int,int,int): i < 0 || i >= a.length || j < 0 || j >= a.length  =>   (i < 0 || i >= a.length || j < 0) ^ j >= a.length
COR_7:100:int_add_values_in_two_arrays(int,int,int): i < 0 || i >= a.length  =>   i < 0 && i >= a.length
COR_8:100:int_add_values_in_two_arrays(int,int,int): i < 0 || i >= a.length  =>   i < 0 ^ i >= a.length
COR_9:100:int_add_values_in_two_arrays(int,int,int): i < 0 || i >= a.length || i >= b.length  =>   (i < 0 || i >= a.length) && i >= b.length
COR_10:100:int_add_values_in_two_arrays(int,int,int): i < 0 || i >= a.length || i >= b.length  =>   (i < 0 || i >= a.length) ^ i >= b.length
COR_11:140:int_get_array_value(int,int): k - 1 >= a.length || k - 1 < 0  =>   k - 1 >= a.length && k - 1 < 0
COR_12:140:int_get_array_value(int,int): k - 1 >= a.length || k - 1 < 0  =>   k - 1 >= a.length ^ k - 1 < 0
COR_13:279:int_insertion_sort(int): j > 0 && array[j - 1] > B  =>   j > 0 || array[j - 1] > B
COR_14:279:int_insertion_sort(int): j > 0 && array[j - 1] > B  =>   j > 0 ^ array[j - 1] > B
COI_1:13:int_add_values(int): i < a.length  =>  !(i < a.length)
COI_2:21:double_add_two_array_values(int,int,int): i < 0  =>  !(i < 0)
COI_3:21:double_add_two_array_values(int,int,int): i >= a.length  =>  !(i >= a.length)
COI_4:21:double_add_two_array_values(int,int,int): i < 0 || i >= a.length  =>  !(i < 0 || i >= a.length)
COI_5:21:double_add_two_array_values(int,int,int): j < 0  =>  !(j < 0)
COI_6:21:double_add_two_array_values(int,int,int): i < 0 || i >= a.length || j < 0  =>  !(i < 0 || i >= a.length || j < 0)
COI_7:21:double_add_two_array_values(int,int,int): j >= a.length  =>  !(j >= a.length)
COI_8:21:double_add_two_array_values(int,int,int): i < 0 || i >= a.length || j < 0 || j >= a.length  =>  !(i < 0 || i >= a.length || j < 0 || j >= a.length)
COI_9:33:int_bubble(int): i >= 0  =>  !(i >= 0)
COI_10:34:int_bubble(int): j <= i  =>  !(j <= i)
COI_11:35:int_bubble(int): a[j] > a[j + 1]  =>  !(a[j] > a[j + 1])
COI_12:52:int_shell_sort(int): m > 0  =>  !(m > 0)
COI_13:53:int_shell_sort(int): j < a.length  =>  !(j < a.length)
COI_14:54:int_shell_sort(int): i >= 0  =>  !(i >= 0)
COI_15:55:int_shell_sort(int): a[i + m] >= a[i]  =>  !(a[i + m] >= a[i])
COI_16:71:int_sequential_search(int,int): i < a.length  =>  !(i < a.length)
COI_17:72:int_sequential_search(int,int): a[i] == key  =>  !(a[i] == key)
COI_18:84:int_selection_sort(int): i < list.length - 1  =>  !(i < list.length - 1)
COI_19:86:int_selection_sort(int): j < list.length  =>  !(j < list.length)
COI_20:87:int_selection_sort(int): list[j] < list[min]  =>  !(list[j] < list[min])
COI_21:100:int_add_values_in_two_arrays(int,int,int): i < 0  =>  !(i < 0)
COI_22:100:int_add_values_in_two_arrays(int,int,int): i >= a.length  =>  !(i >= a.length)
COI_23:100:int_add_values_in_two_arrays(int,int,int): i < 0 || i >= a.length  =>  !(i < 0 || i >= a.length)
COI_24:100:int_add_values_in_two_arrays(int,int,int): i >= b.length  =>  !(i >= b.length)
COI_25:100:int_add_values_in_two_arrays(int,int,int): i < 0 || i >= a.length || i >= b.length  =>  !(i < 0 || i >= a.length || i >= b.length)
COI_26:111:int_dot_product(int,int): i < a.length  =>  !(i < a.length)
COI_27:121:int_array_calc1(int,int): i < a.length  =>  !(i < a.length)
COI_28:130:int_set_min_val(int,int): i < a.length  =>  !(i < a.length)
COI_29:131:int_set_min_val(int,int): a[i] < k  =>  !(a[i] < k)
COI_30:140:int_get_array_value(int,int): k - 1 >= a.length  =>  !(k - 1 >= a.length)
COI_31:140:int_get_array_value(int,int): k - 1 < 0  =>  !(k - 1 < 0)
COI_32:140:int_get_array_value(int,int): k - 1 >= a.length || k - 1 < 0  =>  !(k - 1 >= a.length || k - 1 < 0)
COI_33:151:int_find_min(int): i < a.length  =>  !(i < a.length)
COI_34:152:int_find_min(int): a[i] < min  =>  !(a[i] < min)
COI_35:163:int_find_diff(int,int): i < a.length  =>  !(i < a.length)
COI_36:173:int_array_copy(int): i < a.length  =>  !(i < a.length)
COI_37:183:double_find_euc_dist(int,int): i < a.length  =>  !(i < a.length)
COI_38:194:double_find_magnitude(int): i < a.length  =>  !(i < a.length)
COI_39:205:double_manhattan_dist(int,int): i < a.length  =>  !(i < a.length)
COI_40:214:double_average(int): i < a.length  =>  !(i < a.length)
COI_41:223:int_dec_array(int,int): i < a.length  =>  !(i < a.length)
COI_42:238:int_find_max(int): i < a.length  =>  !(i < a.length)
COI_43:239:int_find_max(int): a[i] > max  =>  !(a[i] > max)
COI_44:249:int_find_max2(int): i < a.length - 1  =>  !(i < a.length - 1)
COI_45:250:int_find_max2(int): a[i] + a[i + 1] > max  =>  !(a[i] + a[i + 1] > max)
COI_46:263:double_variance(double): i < x.length  =>  !(i < x.length)
COI_47:267:double_variance(double): i < x.length  =>  !(i < x.length)
COI_48:276:int_insertion_sort(int): i < array.length  =>  !(i < array.length)
COI_49:279:int_insertion_sort(int): j > 0  =>  !(j > 0)
COI_50:279:int_insertion_sort(int): array[j - 1] > B  =>  !(array[j - 1] > B)
COI_51:279:int_insertion_sort(int): j > 0 && array[j - 1] > B  =>  !(j > 0 && array[j - 1] > B)
COI_52:291:double_geometric_mean(int): i < a.length  =>  !(i < a.length)
COI_53:300:double_mean_absolute_error(int,int): i < a.length  =>  !(i < a.length)
COI_54:311:double_find_median(int): i < k  =>  !(i < k)
COI_55:314:double_find_median(int): j < a.length  =>  !(j < a.length)
COI_56:315:double_find_median(int): a[j] < minValue  =>  !(a[j] < minValue)
COI_57:324:double_find_median(int): a.length % 2 == 0  =>  !(a.length % 2 == 0)
COI_58:335:int_cartesian_product(int,int): i < a.length  =>  !(i < a.length)
COI_59:336:int_cartesian_product(int,int): j < b.length  =>  !(j < b.length)
COI_60:349:int_reverse(int): i >= 0  =>  !(i >= 0)
COI_61:358:boolean_check_equal_tolerance(double,double,double): a.length != b.length  =>  !(a.length != b.length)
COI_62:361:boolean_check_equal_tolerance(double,double,double): i < a.length  =>  !(i < a.length)
COI_63:362:boolean_check_equal_tolerance(double,double,double): Math.abs( a[i] - b[i] ) >= tol  =>  !(Math.abs( a[i] - b[i] ) >= tol)
COI_64:371:boolean_check_equal(int,int): a.length != b.length  =>  !(a.length != b.length)
COI_65:374:boolean_check_equal(int,int): i < a.length  =>  !(i < a.length)
COI_66:375:boolean_check_equal(int,int): a[i] != b[i]  =>  !(a[i] != b[i])
COI_67:386:double_weighted_average(double,double): i < a.length  =>  !(i < a.length)
COI_68:396:int_count_k(int,int): i < a.length  =>  !(i < a.length)
COI_69:397:int_count_k(int,int): a[i] == k  =>  !(a[i] == k)
COI_70:407:int_clip(int,int,int): i < a.length  =>  !(i < a.length)
COI_71:408:int_clip(int,int,int): a[i] < lowerLim  =>  !(a[i] < lowerLim)
COI_72:411:int_clip(int,int,int): a[i] > upperLim  =>  !(a[i] > upperLim)
COI_73:424:int_elementwise_max(int,int): i < a.length  =>  !(i < a.length)
COI_74:425:int_elementwise_max(int,int): a[i] > b[i]  =>  !(a[i] > b[i])
COI_75:437:int_elementwise_min(int,int): i < a.length  =>  !(i < a.length)
COI_76:438:int_elementwise_min(int,int): a[i] < b[i]  =>  !(a[i] < b[i])
COI_77:450:int_count_non_zeroes(int): i < a.length  =>  !(i < a.length)
COI_78:451:int_count_non_zeroes(int): a[i] != 0  =>  !(a[i] != 0)
COI_79:461:int_cnt_zeroes(int): i < a.length  =>  !(i < a.length)
COI_80:462:int_cnt_zeroes(int): a[i] == 0  =>  !(a[i] == 0)
COI_81:472:boolean_elementwise_equal(int,int): i < a.length  =>  !(i < a.length)
COI_82:473:boolean_elementwise_equal(int,int): a[i] == b[i]  =>  !(a[i] == b[i])
COI_83:485:boolean_elementwise_not_equal(int,int): i < a.length  =>  !(i < a.length)
COI_84:486:boolean_elementwise_not_equal(int,int): a[i] != b[i]  =>  !(a[i] != b[i])
COI_85:498:int_hamming_dist(int,int): i < a.length  =>  !(i < a.length)
COI_86:499:int_hamming_dist(int,int): a[i] != b[i]  =>  !(a[i] != b[i])
LOI_1:13:int_add_values(int):i => ~i
LOI_2:13:int_add_values(int):a.length => ~a.length
LOI_3:13:int_add_values(int):i => ~i
LOI_4:14:int_add_values(int):i => ~i
LOI_5:16:int_add_values(int):sum => ~sum
LOI_6:21:double_add_two_array_values(int,int,int):i => ~i
LOI_7:21:double_add_two_array_values(int,int,int):i => ~i
LOI_8:21:double_add_two_array_values(int,int,int):a.length => ~a.length
LOI_9:21:double_add_two_array_values(int,int,int):j => ~j
LOI_10:21:double_add_two_array_values(int,int,int):j => ~j
LOI_11:21:double_add_two_array_values(int,int,int):a.length => ~a.length
LOI_12:24:double_add_two_array_values(int,int,int):i => ~i
LOI_13:24:double_add_two_array_values(int,int,int):j => ~j
LOI_14:33:int_bubble(int):a.length => ~a.length
LOI_15:33:int_bubble(int):i => ~i
LOI_16:33:int_bubble(int):i => ~i
LOI_17:34:int_bubble(int):j => ~j
LOI_18:34:int_bubble(int):i => ~i
LOI_19:34:int_bubble(int):j => ~j
LOI_20:35:int_bubble(int):j => ~j
LOI_21:35:int_bubble(int):j => ~j
LOI_22:36:int_bubble(int):j => ~j
LOI_23:37:int_bubble(int):j => ~j
LOI_24:37:int_bubble(int):j => ~j
LOI_25:38:int_bubble(int):j => ~j
LOI_26:38:int_bubble(int):t => ~t
LOI_27:52:int_shell_sort(int):a.length => ~a.length
LOI_28:52:int_shell_sort(int):m => ~m
LOI_29:53:int_shell_sort(int):m => ~m
LOI_30:53:int_shell_sort(int):j => ~j
LOI_31:53:int_shell_sort(int):a.length => ~a.length
LOI_32:53:int_shell_sort(int):j => ~j
LOI_33:54:int_shell_sort(int):j => ~j
LOI_34:54:int_shell_sort(int):m => ~m
LOI_35:54:int_shell_sort(int):i => ~i
LOI_36:54:int_shell_sort(int):m => ~m
LOI_37:55:int_shell_sort(int):i => ~i
LOI_38:55:int_shell_sort(int):m => ~m
LOI_39:55:int_shell_sort(int):i => ~i
LOI_40:58:int_shell_sort(int):i => ~i
LOI_41:59:int_shell_sort(int):i => ~i
LOI_42:59:int_shell_sort(int):i => ~i
LOI_43:59:int_shell_sort(int):m => ~m
LOI_44:60:int_shell_sort(int):i => ~i
LOI_45:60:int_shell_sort(int):m => ~m
LOI_46:60:int_shell_sort(int):mid => ~mid
LOI_47:71:int_sequential_search(int,int):i => ~i
LOI_48:71:int_sequential_search(int,int):a.length => ~a.length
LOI_49:71:int_sequential_search(int,int):i => ~i
LOI_50:72:int_sequential_search(int,int):i => ~i
LOI_51:72:int_sequential_search(int,int):key => ~key
LOI_52:73:int_sequential_search(int,int):i => ~i
LOI_53:84:int_selection_sort(int):i => ~i
LOI_54:84:int_selection_sort(int):list.length => ~list.length
LOI_55:84:int_selection_sort(int):i => ~i
LOI_56:85:int_selection_sort(int):i => ~i
LOI_57:86:int_selection_sort(int):i => ~i
LOI_58:86:int_selection_sort(int):j => ~j
LOI_59:86:int_selection_sort(int):list.length => ~list.length
LOI_60:86:int_selection_sort(int):j => ~j
LOI_61:87:int_selection_sort(int):j => ~j
LOI_62:87:int_selection_sort(int):min => ~min
LOI_63:88:int_selection_sort(int):j => ~j
LOI_64:91:int_selection_sort(int):i => ~i
LOI_65:92:int_selection_sort(int):i => ~i
LOI_66:92:int_selection_sort(int):min => ~min
LOI_67:93:int_selection_sort(int):min => ~min
LOI_68:93:int_selection_sort(int):tmp => ~tmp
LOI_69:100:int_add_values_in_two_arrays(int,int,int):i => ~i
LOI_70:100:int_add_values_in_two_arrays(int,int,int):i => ~i
LOI_71:100:int_add_values_in_two_arrays(int,int,int):a.length => ~a.length
LOI_72:100:int_add_values_in_two_arrays(int,int,int):i => ~i
LOI_73:100:int_add_values_in_two_arrays(int,int,int):b.length => ~b.length
LOI_74:103:int_add_values_in_two_arrays(int,int,int):i => ~i
LOI_75:103:int_add_values_in_two_arrays(int,int,int):i => ~i
LOI_76:111:int_dot_product(int,int):i => ~i
LOI_77:111:int_dot_product(int,int):a.length => ~a.length
LOI_78:111:int_dot_product(int,int):i => ~i
LOI_79:112:int_dot_product(int,int):i => ~i
LOI_80:112:int_dot_product(int,int):i => ~i
LOI_81:114:int_dot_product(int,int):sum => ~sum
LOI_82:120:int_array_calc1(int,int):a.length => ~a.length
LOI_83:121:int_array_calc1(int,int):i => ~i
LOI_84:121:int_array_calc1(int,int):a.length => ~a.length
LOI_85:121:int_array_calc1(int,int):i => ~i
LOI_86:122:int_array_calc1(int,int):i => ~i
LOI_87:122:int_array_calc1(int,int):i => ~i
LOI_88:122:int_array_calc1(int,int):k => ~k
LOI_89:130:int_set_min_val(int,int):i => ~i
LOI_90:130:int_set_min_val(int,int):a.length => ~a.length
LOI_91:130:int_set_min_val(int,int):i => ~i
LOI_92:131:int_set_min_val(int,int):i => ~i
LOI_93:131:int_set_min_val(int,int):k => ~k
LOI_94:132:int_set_min_val(int,int):i => ~i
LOI_95:132:int_set_min_val(int,int):k => ~k
LOI_96:140:int_get_array_value(int,int):k => ~k
LOI_97:140:int_get_array_value(int,int):a.length => ~a.length
LOI_98:140:int_get_array_value(int,int):k => ~k
LOI_99:143:int_get_array_value(int,int):k => ~k
LOI_100:151:int_find_min(int):i => ~i
LOI_101:151:int_find_min(int):a.length => ~a.length
LOI_102:151:int_find_min(int):i => ~i
LOI_103:152:int_find_min(int):i => ~i
LOI_104:152:int_find_min(int):min => ~min
LOI_105:153:int_find_min(int):i => ~i
LOI_106:156:int_find_min(int):min => ~min
LOI_107:162:int_find_diff(int,int):a.length => ~a.length
LOI_108:163:int_find_diff(int,int):i => ~i
LOI_109:163:int_find_diff(int,int):a.length => ~a.length
LOI_110:163:int_find_diff(int,int):i => ~i
LOI_111:164:int_find_diff(int,int):i => ~i
LOI_112:164:int_find_diff(int,int):i => ~i
LOI_113:164:int_find_diff(int,int):i => ~i
LOI_114:172:int_array_copy(int):a.length => ~a.length
LOI_115:173:int_array_copy(int):i => ~i
LOI_116:173:int_array_copy(int):a.length => ~a.length
LOI_117:173:int_array_copy(int):i => ~i
LOI_118:174:int_array_copy(int):i => ~i
LOI_119:174:int_array_copy(int):i => ~i
LOI_120:183:double_find_euc_dist(int,int):i => ~i
LOI_121:183:double_find_euc_dist(int,int):a.length => ~a.length
LOI_122:183:double_find_euc_dist(int,int):i => ~i
LOI_123:184:double_find_euc_dist(int,int):i => ~i
LOI_124:184:double_find_euc_dist(int,int):i => ~i
LOI_125:184:double_find_euc_dist(int,int):i => ~i
LOI_126:184:double_find_euc_dist(int,int):i => ~i
LOI_127:186:double_find_euc_dist(int,int):sum => ~sum
LOI_128:187:double_find_euc_dist(int,int):result => ~result
LOI_129:194:double_find_magnitude(int):i => ~i
LOI_130:194:double_find_magnitude(int):a.length => ~a.length
LOI_131:194:double_find_magnitude(int):i => ~i
LOI_132:195:double_find_magnitude(int):i => ~i
LOI_133:195:double_find_magnitude(int):i => ~i
LOI_134:197:double_find_magnitude(int):sum => ~sum
LOI_135:198:double_find_magnitude(int):result => ~result
LOI_136:205:double_manhattan_dist(int,int):i => ~i
LOI_137:205:double_manhattan_dist(int,int):a.length => ~a.length
LOI_138:205:double_manhattan_dist(int,int):i => ~i
LOI_139:206:double_manhattan_dist(int,int):i => ~i
LOI_140:206:double_manhattan_dist(int,int):i => ~i
LOI_141:208:double_manhattan_dist(int,int):sum => ~sum
LOI_142:214:double_average(int):i => ~i
LOI_143:214:double_average(int):a.length => ~a.length
LOI_144:214:double_average(int):i => ~i
LOI_145:215:double_average(int):i => ~i
LOI_146:217:double_average(int):sum => ~sum
LOI_147:217:double_average(int):a.length => ~a.length
LOI_148:223:int_dec_array(int,int):i => ~i
LOI_149:223:int_dec_array(int,int):a.length => ~a.length
LOI_150:223:int_dec_array(int,int):i => ~i
LOI_151:224:int_dec_array(int,int):i => ~i
LOI_152:224:int_dec_array(int,int):k => ~k
LOI_153:231:double_expr1(double,double):b => ~b
LOI_154:231:double_expr1(double,double):a => ~a
LOI_155:231:double_expr1(double,double):a => ~a
LOI_156:232:double_expr1(double,double):result => ~result
LOI_157:238:int_find_max(int):i => ~i
LOI_158:238:int_find_max(int):a.length => ~a.length
LOI_159:238:int_find_max(int):i => ~i
LOI_160:239:int_find_max(int):i => ~i
LOI_161:239:int_find_max(int):max => ~max
LOI_162:240:int_find_max(int):i => ~i
LOI_163:243:int_find_max(int):max => ~max
LOI_164:249:int_find_max2(int):i => ~i
LOI_165:249:int_find_max2(int):a.length => ~a.length
LOI_166:249:int_find_max2(int):i => ~i
LOI_167:250:int_find_max2(int):i => ~i
LOI_168:250:int_find_max2(int):i => ~i
LOI_169:250:int_find_max2(int):max => ~max
LOI_170:251:int_find_max2(int):i => ~i
LOI_171:251:int_find_max2(int):i => ~i
LOI_172:254:int_find_max2(int):max => ~max
LOI_173:263:double_variance(double):i => ~i
LOI_174:263:double_variance(double):x.length => ~x.length
LOI_175:263:double_variance(double):i => ~i
LOI_176:264:double_variance(double):sum => ~sum
LOI_177:264:double_variance(double):i => ~i
LOI_178:266:double_variance(double):sum => ~sum
LOI_179:266:double_variance(double):x.length => ~x.length
LOI_180:267:double_variance(double):i => ~i
LOI_181:267:double_variance(double):x.length => ~x.length
LOI_182:267:double_variance(double):i => ~i
LOI_183:268:double_variance(double):sum1 => ~sum1
LOI_184:268:double_variance(double):i => ~i
LOI_185:268:double_variance(double):avrg => ~avrg
LOI_186:268:double_variance(double):i => ~i
LOI_187:268:double_variance(double):avrg => ~avrg
LOI_188:270:double_variance(double):sum1 => ~sum1
LOI_189:270:double_variance(double):x.length => ~x.length
LOI_190:271:double_variance(double):var => ~var
LOI_191:276:int_insertion_sort(int):i => ~i
LOI_192:276:int_insertion_sort(int):array.length => ~array.length
LOI_193:276:int_insertion_sort(int):i => ~i
LOI_194:277:int_insertion_sort(int):i => ~i
LOI_195:278:int_insertion_sort(int):i => ~i
LOI_196:279:int_insertion_sort(int):j => ~j
LOI_197:279:int_insertion_sort(int):j => ~j
LOI_198:279:int_insertion_sort(int):B => ~B
LOI_199:280:int_insertion_sort(int):j => ~j
LOI_200:280:int_insertion_sort(int):j => ~j
LOI_201:281:int_insertion_sort(int):j => ~j
LOI_202:283:int_insertion_sort(int):j => ~j
LOI_203:283:int_insertion_sort(int):B => ~B
LOI_204:291:double_geometric_mean(int):i => ~i
LOI_205:291:double_geometric_mean(int):a.length => ~a.length
LOI_206:291:double_geometric_mean(int):i => ~i
LOI_207:292:double_geometric_mean(int):i => ~i
LOI_208:294:double_geometric_mean(int):product => ~product
LOI_209:294:double_geometric_mean(int):a.length => ~a.length
LOI_210:300:double_mean_absolute_error(int,int):i => ~i
LOI_211:300:double_mean_absolute_error(int,int):a.length => ~a.length
LOI_212:300:double_mean_absolute_error(int,int):i => ~i
LOI_213:301:double_mean_absolute_error(int,int):i => ~i
LOI_214:301:double_mean_absolute_error(int,int):i => ~i
LOI_215:303:double_mean_absolute_error(int,int):sum => ~sum
LOI_216:303:double_mean_absolute_error(int,int):a.length => ~a.length
LOI_217:308:double_find_median(int):a.length => ~a.length
LOI_218:311:double_find_median(int):i => ~i
LOI_219:311:double_find_median(int):k => ~k
LOI_220:311:double_find_median(int):i => ~i
LOI_221:312:double_find_median(int):i => ~i
LOI_222:313:double_find_median(int):i => ~i
LOI_223:314:double_find_median(int):j => ~j
LOI_224:314:double_find_median(int):a.length => ~a.length
LOI_225:314:double_find_median(int):j => ~j
LOI_226:315:double_find_median(int):j => ~j
LOI_227:315:double_find_median(int):minValue => ~minValue
LOI_228:316:double_find_median(int):j => ~j
LOI_229:317:double_find_median(int):j => ~j
LOI_230:320:double_find_median(int):i => ~i
LOI_231:321:double_find_median(int):i => ~i
LOI_232:321:double_find_median(int):minIndex => ~minIndex
LOI_233:322:double_find_median(int):minIndex => ~minIndex
LOI_234:322:double_find_median(int):temp => ~temp
LOI_235:324:double_find_median(int):a.length => ~a.length
LOI_236:325:double_find_median(int):a.length => ~a.length
LOI_237:325:double_find_median(int):a.length => ~a.length
LOI_238:327:double_find_median(int):a.length => ~a.length
LOI_239:333:int_cartesian_product(int,int):a.length => ~a.length
LOI_240:333:int_cartesian_product(int,int):b.length => ~b.length
LOI_241:335:int_cartesian_product(int,int):i => ~i
LOI_242:335:int_cartesian_product(int,int):a.length => ~a.length
LOI_243:335:int_cartesian_product(int,int):i => ~i
LOI_244:336:int_cartesian_product(int,int):j => ~j
LOI_245:336:int_cartesian_product(int,int):b.length => ~b.length
LOI_246:336:int_cartesian_product(int,int):j => ~j
LOI_247:337:int_cartesian_product(int,int):cnt => ~cnt
LOI_248:337:int_cartesian_product(int,int):i => ~i
LOI_249:338:int_cartesian_product(int,int):cnt => ~cnt
LOI_250:338:int_cartesian_product(int,int):j => ~j
LOI_251:339:int_cartesian_product(int,int):cnt => ~cnt
LOI_252:347:int_reverse(int):a.length => ~a.length
LOI_253:349:int_reverse(int):i => ~i
LOI_254:349:int_reverse(int):i => ~i
LOI_255:350:int_reverse(int):cnt => ~cnt
LOI_256:350:int_reverse(int):i => ~i
LOI_257:351:int_reverse(int):cnt => ~cnt
LOI_258:358:boolean_check_equal_tolerance(double,double,double):a.length => ~a.length
LOI_259:358:boolean_check_equal_tolerance(double,double,double):b.length => ~b.length
LOI_260:361:boolean_check_equal_tolerance(double,double,double):i => ~i
LOI_261:361:boolean_check_equal_tolerance(double,double,double):a.length => ~a.length
LOI_262:361:boolean_check_equal_tolerance(double,double,double):i => ~i
LOI_263:362:boolean_check_equal_tolerance(double,double,double):i => ~i
LOI_264:362:boolean_check_equal_tolerance(double,double,double):i => ~i
LOI_265:362:boolean_check_equal_tolerance(double,double,double):tol => ~tol
LOI_266:371:boolean_check_equal(int,int):a.length => ~a.length
LOI_267:371:boolean_check_equal(int,int):b.length => ~b.length
LOI_268:374:boolean_check_equal(int,int):i => ~i
LOI_269:374:boolean_check_equal(int,int):a.length => ~a.length
LOI_270:374:boolean_check_equal(int,int):i => ~i
LOI_271:375:boolean_check_equal(int,int):i => ~i
LOI_272:375:boolean_check_equal(int,int):i => ~i
LOI_273:386:double_weighted_average(double,double):i => ~i
LOI_274:386:double_weighted_average(double,double):a.length => ~a.length
LOI_275:386:double_weighted_average(double,double):i => ~i
LOI_276:387:double_weighted_average(double,double):i => ~i
LOI_277:387:double_weighted_average(double,double):i => ~i
LOI_278:388:double_weighted_average(double,double):i => ~i
LOI_279:390:double_weighted_average(double,double):sum1 => ~sum1
LOI_280:390:double_weighted_average(double,double):sum2 => ~sum2
LOI_281:396:int_count_k(int,int):i => ~i
LOI_282:396:int_count_k(int,int):a.length => ~a.length
LOI_283:396:int_count_k(int,int):i => ~i
LOI_284:397:int_count_k(int,int):i => ~i
LOI_285:397:int_count_k(int,int):k => ~k
LOI_286:398:int_count_k(int,int):cnt => ~cnt
LOI_287:401:int_count_k(int,int):cnt => ~cnt
LOI_288:406:int_clip(int,int,int):a.length => ~a.length
LOI_289:407:int_clip(int,int,int):i => ~i
LOI_290:407:int_clip(int,int,int):a.length => ~a.length
LOI_291:407:int_clip(int,int,int):i => ~i
LOI_292:408:int_clip(int,int,int):i => ~i
LOI_293:408:int_clip(int,int,int):lowerLim => ~lowerLim
LOI_294:409:int_clip(int,int,int):i => ~i
LOI_295:409:int_clip(int,int,int):lowerLim => ~lowerLim
LOI_296:411:int_clip(int,int,int):i => ~i
LOI_297:411:int_clip(int,int,int):upperLim => ~upperLim
LOI_298:412:int_clip(int,int,int):i => ~i
LOI_299:412:int_clip(int,int,int):upperLim => ~upperLim
LOI_300:414:int_clip(int,int,int):i => ~i
LOI_301:414:int_clip(int,int,int):i => ~i
LOI_302:423:int_elementwise_max(int,int):a.length => ~a.length
LOI_303:424:int_elementwise_max(int,int):i => ~i
LOI_304:424:int_elementwise_max(int,int):a.length => ~a.length
LOI_305:424:int_elementwise_max(int,int):i => ~i
LOI_306:425:int_elementwise_max(int,int):i => ~i
LOI_307:425:int_elementwise_max(int,int):i => ~i
LOI_308:426:int_elementwise_max(int,int):i => ~i
LOI_309:426:int_elementwise_max(int,int):i => ~i
LOI_310:428:int_elementwise_max(int,int):i => ~i
LOI_311:428:int_elementwise_max(int,int):i => ~i
LOI_312:436:int_elementwise_min(int,int):a.length => ~a.length
LOI_313:437:int_elementwise_min(int,int):i => ~i
LOI_314:437:int_elementwise_min(int,int):a.length => ~a.length
LOI_315:437:int_elementwise_min(int,int):i => ~i
LOI_316:438:int_elementwise_min(int,int):i => ~i
LOI_317:438:int_elementwise_min(int,int):i => ~i
LOI_318:439:int_elementwise_min(int,int):i => ~i
LOI_319:439:int_elementwise_min(int,int):i => ~i
LOI_320:441:int_elementwise_min(int,int):i => ~i
LOI_321:441:int_elementwise_min(int,int):i => ~i
LOI_322:450:int_count_non_zeroes(int):i => ~i
LOI_323:450:int_count_non_zeroes(int):a.length => ~a.length
LOI_324:450:int_count_non_zeroes(int):i => ~i
LOI_325:451:int_count_non_zeroes(int):i => ~i
LOI_326:452:int_count_non_zeroes(int):cnt => ~cnt
LOI_327:455:int_count_non_zeroes(int):cnt => ~cnt
LOI_328:461:int_cnt_zeroes(int):i => ~i
LOI_329:461:int_cnt_zeroes(int):a.length => ~a.length
LOI_330:461:int_cnt_zeroes(int):i => ~i
LOI_331:462:int_cnt_zeroes(int):i => ~i
LOI_332:463:int_cnt_zeroes(int):cnt => ~cnt
LOI_333:466:int_cnt_zeroes(int):cnt => ~cnt
LOI_334:471:boolean_elementwise_equal(int,int):a.length => ~a.length
LOI_335:472:boolean_elementwise_equal(int,int):i => ~i
LOI_336:472:boolean_elementwise_equal(int,int):a.length => ~a.length
LOI_337:472:boolean_elementwise_equal(int,int):i => ~i
LOI_338:473:boolean_elementwise_equal(int,int):i => ~i
LOI_339:473:boolean_elementwise_equal(int,int):i => ~i
LOI_340:474:boolean_elementwise_equal(int,int):i => ~i
LOI_341:476:boolean_elementwise_equal(int,int):i => ~i
LOI_342:484:boolean_elementwise_not_equal(int,int):a.length => ~a.length
LOI_343:485:boolean_elementwise_not_equal(int,int):i => ~i
LOI_344:485:boolean_elementwise_not_equal(int,int):a.length => ~a.length
LOI_345:485:boolean_elementwise_not_equal(int,int):i => ~i
LOI_346:486:boolean_elementwise_not_equal(int,int):i => ~i
LOI_347:486:boolean_elementwise_not_equal(int,int):i => ~i
LOI_348:487:boolean_elementwise_not_equal(int,int):i => ~i
LOI_349:489:boolean_elementwise_not_equal(int,int):i => ~i
LOI_350:498:int_hamming_dist(int,int):i => ~i
LOI_351:498:int_hamming_dist(int,int):a.length => ~a.length
LOI_352:498:int_hamming_dist(int,int):i => ~i
LOI_353:499:int_hamming_dist(int,int):i => ~i
LOI_354:499:int_hamming_dist(int,int):i => ~i
LOI_355:500:int_hamming_dist(int,int):cnt => ~cnt
LOI_356:503:int_hamming_dist(int,int):cnt => ~cnt
ASRS_1:14:int_add_values(int):sum += a[i] => sum /= a[i]
ASRS_2:14:int_add_values(int):sum += a[i] => sum *= a[i]
ASRS_3:14:int_add_values(int):sum += a[i] => sum -= a[i]
ASRS_4:14:int_add_values(int):sum += a[i] => sum %= a[i]
ASRS_5:52:int_shell_sort(int):m /= 2 => m += 2
ASRS_6:52:int_shell_sort(int):m /= 2 => m *= 2
ASRS_7:52:int_shell_sort(int):m /= 2 => m -= 2
ASRS_8:52:int_shell_sort(int):m /= 2 => m %= 2
ASRS_9:54:int_shell_sort(int):i -= m => i += m
ASRS_10:54:int_shell_sort(int):i -= m => i /= m
ASRS_11:54:int_shell_sort(int):i -= m => i *= m
ASRS_12:54:int_shell_sort(int):i -= m => i %= m
ASRS_13:112:int_dot_product(int,int):sum += a[i] * b[i] => sum /= a[i] * b[i]
ASRS_14:112:int_dot_product(int,int):sum += a[i] * b[i] => sum *= a[i] * b[i]
ASRS_15:112:int_dot_product(int,int):sum += a[i] * b[i] => sum -= a[i] * b[i]
ASRS_16:112:int_dot_product(int,int):sum += a[i] * b[i] => sum %= a[i] * b[i]
ASRS_17:184:double_find_euc_dist(int,int):sum += (a[i] - b[i]) * (a[i] - b[i]) => sum /= (a[i] - b[i]) * (a[i] - b[i])
ASRS_18:184:double_find_euc_dist(int,int):sum += (a[i] - b[i]) * (a[i] - b[i]) => sum *= (a[i] - b[i]) * (a[i] - b[i])
ASRS_19:184:double_find_euc_dist(int,int):sum += (a[i] - b[i]) * (a[i] - b[i]) => sum -= (a[i] - b[i]) * (a[i] - b[i])
ASRS_20:184:double_find_euc_dist(int,int):sum += (a[i] - b[i]) * (a[i] - b[i]) => sum %= (a[i] - b[i]) * (a[i] - b[i])
ASRS_21:195:double_find_magnitude(int):sum += a[i] * a[i] => sum /= a[i] * a[i]
ASRS_22:195:double_find_magnitude(int):sum += a[i] * a[i] => sum *= a[i] * a[i]
ASRS_23:195:double_find_magnitude(int):sum += a[i] * a[i] => sum -= a[i] * a[i]
ASRS_24:195:double_find_magnitude(int):sum += a[i] * a[i] => sum %= a[i] * a[i]
ASRS_25:206:double_manhattan_dist(int,int):sum += Math.abs( a[i] - b[i] ) => sum /= Math.abs( a[i] - b[i] )
ASRS_26:206:double_manhattan_dist(int,int):sum += Math.abs( a[i] - b[i] ) => sum *= Math.abs( a[i] - b[i] )
ASRS_27:206:double_manhattan_dist(int,int):sum += Math.abs( a[i] - b[i] ) => sum -= Math.abs( a[i] - b[i] )
ASRS_28:206:double_manhattan_dist(int,int):sum += Math.abs( a[i] - b[i] ) => sum %= Math.abs( a[i] - b[i] )
ASRS_29:215:double_average(int):sum += a[i] => sum /= a[i]
ASRS_30:215:double_average(int):sum += a[i] => sum *= a[i]
ASRS_31:215:double_average(int):sum += a[i] => sum -= a[i]
ASRS_32:215:double_average(int):sum += a[i] => sum %= a[i]
ASRS_33:224:int_dec_array(int,int):a[i] -= k => a[i] += k
ASRS_34:224:int_dec_array(int,int):a[i] -= k => a[i] /= k
ASRS_35:224:int_dec_array(int,int):a[i] -= k => a[i] *= k
ASRS_36:224:int_dec_array(int,int):a[i] -= k => a[i] %= k
ASRS_37:292:double_geometric_mean(int):product *= a[i] => product += a[i]
ASRS_38:292:double_geometric_mean(int):product *= a[i] => product /= a[i]
ASRS_39:292:double_geometric_mean(int):product *= a[i] => product -= a[i]
ASRS_40:292:double_geometric_mean(int):product *= a[i] => product %= a[i]
ASRS_41:301:double_mean_absolute_error(int,int):sum += Math.abs( a[i] - b[i] ) => sum /= Math.abs( a[i] - b[i] )
ASRS_42:301:double_mean_absolute_error(int,int):sum += Math.abs( a[i] - b[i] ) => sum *= Math.abs( a[i] - b[i] )
ASRS_43:301:double_mean_absolute_error(int,int):sum += Math.abs( a[i] - b[i] ) => sum -= Math.abs( a[i] - b[i] )
ASRS_44:301:double_mean_absolute_error(int,int):sum += Math.abs( a[i] - b[i] ) => sum %= Math.abs( a[i] - b[i] )
ASRS_45:387:double_weighted_average(double,double):sum1 += a[i] * b[i] => sum1 /= a[i] * b[i]
ASRS_46:387:double_weighted_average(double,double):sum1 += a[i] * b[i] => sum1 *= a[i] * b[i]
ASRS_47:387:double_weighted_average(double,double):sum1 += a[i] * b[i] => sum1 -= a[i] * b[i]
ASRS_48:387:double_weighted_average(double,double):sum1 += a[i] * b[i] => sum1 %= a[i] * b[i]
ASRS_49:388:double_weighted_average(double,double):sum2 += b[i] => sum2 /= b[i]
ASRS_50:388:double_weighted_average(double,double):sum2 += b[i] => sum2 *= b[i]
ASRS_51:388:double_weighted_average(double,double):sum2 += b[i] => sum2 -= b[i]
ASRS_52:388:double_weighted_average(double,double):sum2 += b[i] => sum2 %= b[i]
SDL_1:14:int_add_values(int): int sum = 0; for (int i = 0; i < a.length; i++) {     sum += a[i]; } return sum;  =>   int sum = 0; return sum;
SDL_2:14:int_add_values(int): sum += a[i];  =>  
SDL_3:16:int_add_values(int): for (int i = 0; i < a.length; i++) {     sum += a[i]; }  =>   for (int i = 0;; i++) {     sum += a[i]; }
SDL_4:16:int_add_values(int): for (int i = 0; i < a.length; i++) {     sum += a[i]; }  =>   for (int i = 0; i < a.length;) {     sum += a[i]; }
SDL_5:17:int_add_values(int): return sum;  =>   return 0;
SDL_6:21:double_add_two_array_values(int,int,int): if (i < 0 || i >= a.length || j < 0 || j >= a.length) {     return -100000; } else {     return a[i] + a[j] / 2.0; }  =>  
SDL_7:26:double_add_two_array_values(int,int,int): if (i < 0 || i >= a.length || j < 0 || j >= a.length) {     return -100000; } else {     return a[i] + a[j] / 2.0; }  =>   if (true) {     return -100000; } else {     return a[i] + a[j] / 2.0; }
SDL_8:23:double_add_two_array_values(int,int,int): return -100000;  =>   return 0;
SDL_9:25:double_add_two_array_values(int,int,int): return a[i] + a[j] / 2.0;  =>   return 0;
SDL_10:34:int_bubble(int): int i; int j; int t; for (i = a.length - 2; i >= 0; i--) {     for (j = 0; j <= i; j++) {         if (a[j] > a[j + 1]) {             t = a[j];             a[j] = a[j + 1];             a[j + 1] = t;         }     } } return a;  =>   int i; int j; int t; return a;
SDL_11:34:int_bubble(int): for (j = 0; j <= i; j++) {     if (a[j] > a[j + 1]) {         t = a[j];         a[j] = a[j + 1];         a[j + 1] = t;     } }  =>  
SDL_12:42:int_bubble(int): for (i = a.length - 2; i >= 0; i--) {     for (j = 0; j <= i; j++) {         if (a[j] > a[j + 1]) {             t = a[j];             a[j] = a[j + 1];             a[j + 1] = t;         }     } }  =>   for (;; i--) {     for (j = 0; j <= i; j++) {         if (a[j] > a[j + 1]) {             t = a[j];             a[j] = a[j + 1];             a[j + 1] = t;         }     } }
SDL_13:42:int_bubble(int): for (i = a.length - 2; i >= 0; i--) {     for (j = 0; j <= i; j++) {         if (a[j] > a[j + 1]) {             t = a[j];             a[j] = a[j + 1];             a[j + 1] = t;         }     } }  =>   for (; i >= 0;) {     for (j = 0; j <= i; j++) {         if (a[j] > a[j + 1]) {             t = a[j];             a[j] = a[j + 1];             a[j + 1] = t;         }     } }
SDL_14:35:int_bubble(int): if (a[j] > a[j + 1]) {     t = a[j];     a[j] = a[j + 1];     a[j + 1] = t; }  =>  
SDL_15:41:int_bubble(int): for (j = 0; j <= i; j++) {     if (a[j] > a[j + 1]) {         t = a[j];         a[j] = a[j + 1];         a[j + 1] = t;     } }  =>   for (;; j++) {     if (a[j] > a[j + 1]) {         t = a[j];         a[j] = a[j + 1];         a[j + 1] = t;     } }
SDL_16:41:int_bubble(int): for (j = 0; j <= i; j++) {     if (a[j] > a[j + 1]) {         t = a[j];         a[j] = a[j + 1];         a[j + 1] = t;     } }  =>   for (; j <= i;) {     if (a[j] > a[j + 1]) {         t = a[j];         a[j] = a[j + 1];         a[j + 1] = t;     } }
SDL_17:38:int_bubble(int): t = a[j]; a[j] = a[j + 1]; a[j + 1] = t;  =>   a[j] = a[j + 1]; a[j + 1] = t;
SDL_18:38:int_bubble(int): t = a[j]; a[j] = a[j + 1]; a[j + 1] = t;  =>   t = a[j]; a[j + 1] = t;
SDL_19:38:int_bubble(int): t = a[j]; a[j] = a[j + 1]; a[j + 1] = t;  =>   t = a[j]; a[j] = a[j + 1];
SDL_20:40:int_bubble(int): if (a[j] > a[j + 1]) {     t = a[j];     a[j] = a[j + 1];     a[j + 1] = t; }  =>   if (true) {     t = a[j];     a[j] = a[j + 1];     a[j + 1] = t; }
SDL_21:43:int_bubble(int): return a;  =>   return 0;
SDL_22:53:int_shell_sort(int): int j; int i; int k; int m; int mid; for (m = a.length / 2; m > 0; m /= 2) {     for (j = m; j < a.length; j++) {         for (i = j - m; i >= 0; i -= m) {             if (a[i + m] >= a[i]) {                 break;             } else {                 mid = a[i];                 a[i] = a[i + m];                 a[i + m] = mid;             }         }     } } return a;  =>   int j; int i; int k; int m; int mid; return a;
SDL_23:53:int_shell_sort(int): for (j = m; j < a.length; j++) {     for (i = j - m; i >= 0; i -= m) {         if (a[i + m] >= a[i]) {             break;         } else {             mid = a[i];             a[i] = a[i + m];             a[i + m] = mid;         }     } }  =>  
SDL_24:65:int_shell_sort(int): for (m = a.length / 2; m > 0; m /= 2) {     for (j = m; j < a.length; j++) {         for (i = j - m; i >= 0; i -= m) {             if (a[i + m] >= a[i]) {                 break;             } else {                 mid = a[i];                 a[i] = a[i + m];                 a[i + m] = mid;             }         }     } }  =>   for (;; m /= 2) {     for (j = m; j < a.length; j++) {         for (i = j - m; i >= 0; i -= m) {             if (a[i + m] >= a[i]) {                 break;             } else {                 mid = a[i];                 a[i] = a[i + m];                 a[i + m] = mid;             }         }     } }
SDL_25:65:int_shell_sort(int): for (m = a.length / 2; m > 0; m /= 2) {     for (j = m; j < a.length; j++) {         for (i = j - m; i >= 0; i -= m) {             if (a[i + m] >= a[i]) {                 break;             } else {                 mid = a[i];                 a[i] = a[i + m];                 a[i + m] = mid;             }         }     } }  =>   for (; m > 0;) {     for (j = m; j < a.length; j++) {         for (i = j - m; i >= 0; i -= m) {             if (a[i + m] >= a[i]) {                 break;             } else {                 mid = a[i];                 a[i] = a[i + m];                 a[i + m] = mid;             }         }     } }
SDL_26:54:int_shell_sort(int): for (i = j - m; i >= 0; i -= m) {     if (a[i + m] >= a[i]) {         break;     } else {         mid = a[i];         a[i] = a[i + m];         a[i + m] = mid;     } }  =>  
SDL_27:64:int_shell_sort(int): for (j = m; j < a.length; j++) {     for (i = j - m; i >= 0; i -= m) {         if (a[i + m] >= a[i]) {             break;         } else {             mid = a[i];             a[i] = a[i + m];             a[i + m] = mid;         }     } }  =>   for (;; j++) {     for (i = j - m; i >= 0; i -= m) {         if (a[i + m] >= a[i]) {             break;         } else {             mid = a[i];             a[i] = a[i + m];             a[i + m] = mid;         }     } }
SDL_28:64:int_shell_sort(int): for (j = m; j < a.length; j++) {     for (i = j - m; i >= 0; i -= m) {         if (a[i + m] >= a[i]) {             break;         } else {             mid = a[i];             a[i] = a[i + m];             a[i + m] = mid;         }     } }  =>   for (; j < a.length;) {     for (i = j - m; i >= 0; i -= m) {         if (a[i + m] >= a[i]) {             break;         } else {             mid = a[i];             a[i] = a[i + m];             a[i + m] = mid;         }     } }
SDL_29:55:int_shell_sort(int): if (a[i + m] >= a[i]) {     break; } else {     mid = a[i];     a[i] = a[i + m];     a[i + m] = mid; }  =>  
SDL_30:63:int_shell_sort(int): for (i = j - m; i >= 0; i -= m) {     if (a[i + m] >= a[i]) {         break;     } else {         mid = a[i];         a[i] = a[i + m];         a[i + m] = mid;     } }  =>   for (;; i -= m) {     if (a[i + m] >= a[i]) {         break;     } else {         mid = a[i];         a[i] = a[i + m];         a[i + m] = mid;     } }
SDL_31:63:int_shell_sort(int): for (i = j - m; i >= 0; i -= m) {     if (a[i + m] >= a[i]) {         break;     } else {         mid = a[i];         a[i] = a[i + m];         a[i + m] = mid;     } }  =>   for (; i >= 0;) {     if (a[i + m] >= a[i]) {         break;     } else {         mid = a[i];         a[i] = a[i + m];         a[i + m] = mid;     } }
SDL_32:56:int_shell_sort(int): break;  =>  
SDL_33:62:int_shell_sort(int): if (a[i + m] >= a[i]) {     break; } else {     mid = a[i];     a[i] = a[i + m];     a[i + m] = mid; }  =>   if (true) {     break; } else {     mid = a[i];     a[i] = a[i + m];     a[i + m] = mid; }
SDL_34:60:int_shell_sort(int): mid = a[i]; a[i] = a[i + m]; a[i + m] = mid;  =>   a[i] = a[i + m]; a[i + m] = mid;
SDL_35:60:int_shell_sort(int): mid = a[i]; a[i] = a[i + m]; a[i + m] = mid;  =>   mid = a[i]; a[i + m] = mid;
SDL_36:60:int_shell_sort(int): mid = a[i]; a[i] = a[i + m]; a[i + m] = mid;  =>   mid = a[i]; a[i] = a[i + m];
SDL_37:66:int_shell_sort(int): return a;  =>   return 0;
SDL_38:72:int_sequential_search(int,int): int i; for (i = 0; i < a.length; i++) {     if (a[i] == key) {         return i;     } } return -1;  =>   int i; return -1;
SDL_39:72:int_sequential_search(int,int): if (a[i] == key) {     return i; }  =>  
SDL_40:76:int_sequential_search(int,int): for (i = 0; i < a.length; i++) {     if (a[i] == key) {         return i;     } }  =>   for (;; i++) {     if (a[i] == key) {         return i;     } }
SDL_41:76:int_sequential_search(int,int): for (i = 0; i < a.length; i++) {     if (a[i] == key) {         return i;     } }  =>   for (; i < a.length;) {     if (a[i] == key) {         return i;     } }
SDL_42:75:int_sequential_search(int,int): if (a[i] == key) {     return i; }  =>   if (true) {     return i; }
SDL_43:74:int_sequential_search(int,int): return i;  =>   return 0;
SDL_44:77:int_sequential_search(int,int): return -1;  =>   return 0;
SDL_45:85:int_selection_sort(int): int i; int j; int min; for (i = 0; i < list.length - 1; i++) {     min = i;     for (j = i + 1; j < list.length; j++) {         if (list[j] < list[min]) {             min = j;         }     }     int tmp = list[i];     list[i] = list[min];     list[min] = tmp; } return list;  =>   int i; int j; int min; return list;
SDL_46:93:int_selection_sort(int): min = i; for (j = i + 1; j < list.length; j++) {     if (list[j] < list[min]) {         min = j;     } } int tmp = list[i]; list[i] = list[min]; list[min] = tmp;  =>   for (j = i + 1; j < list.length; j++) {     if (list[j] < list[min]) {         min = j;     } } int tmp = list[i]; list[i] = list[min]; list[min] = tmp;
SDL_47:89:int_selection_sort(int): min = i; for (j = i + 1; j < list.length; j++) {     if (list[j] < list[min]) {         min = j;     } } int tmp = list[i]; list[i] = list[min]; list[min] = tmp;  =>   min = i; int tmp = list[i]; list[i] = list[min]; list[min] = tmp;
SDL_48:93:int_selection_sort(int): min = i; for (j = i + 1; j < list.length; j++) {     if (list[j] < list[min]) {         min = j;     } } int tmp = list[i]; list[i] = list[min]; list[min] = tmp;  =>   min = i; for (j = i + 1; j < list.length; j++) {     if (list[j] < list[min]) {         min = j;     } } int tmp = list[i]; list[min] = tmp;
SDL_49:93:int_selection_sort(int): min = i; for (j = i + 1; j < list.length; j++) {     if (list[j] < list[min]) {         min = j;     } } int tmp = list[i]; list[i] = list[min]; list[min] = tmp;  =>   min = i; for (j = i + 1; j < list.length; j++) {     if (list[j] < list[min]) {         min = j;     } } int tmp = list[i]; list[i] = list[min];
SDL_50:95:int_selection_sort(int): for (i = 0; i < list.length - 1; i++) {     min = i;     for (j = i + 1; j < list.length; j++) {         if (list[j] < list[min]) {             min = j;         }     }     int tmp = list[i];     list[i] = list[min];     list[min] = tmp; }  =>   for (;; i++) {     min = i;     for (j = i + 1; j < list.length; j++) {         if (list[j] < list[min]) {             min = j;         }     }     int tmp = list[i];     list[i] = list[min];     list[min] = tmp; }
SDL_51:95:int_selection_sort(int): for (i = 0; i < list.length - 1; i++) {     min = i;     for (j = i + 1; j < list.length; j++) {         if (list[j] < list[min]) {             min = j;         }     }     int tmp = list[i];     list[i] = list[min];     list[min] = tmp; }  =>   for (; i < list.length - 1;) {     min = i;     for (j = i + 1; j < list.length; j++) {         if (list[j] < list[min]) {             min = j;         }     }     int tmp = list[i];     list[i] = list[min];     list[min] = tmp; }
SDL_52:87:int_selection_sort(int): if (list[j] < list[min]) {     min = j; }  =>  
SDL_53:91:int_selection_sort(int): for (j = i + 1; j < list.length; j++) {     if (list[j] < list[min]) {         min = j;     } }  =>   for (;; j++) {     if (list[j] < list[min]) {         min = j;     } }
SDL_54:91:int_selection_sort(int): for (j = i + 1; j < list.length; j++) {     if (list[j] < list[min]) {         min = j;     } }  =>   for (; j < list.length;) {     if (list[j] < list[min]) {         min = j;     } }
SDL_55:88:int_selection_sort(int): min = j;  =>  
SDL_56:90:int_selection_sort(int): if (list[j] < list[min]) {     min = j; }  =>   if (true) {     min = j; }
SDL_57:96:int_selection_sort(int): return list;  =>   return 0;
SDL_58:100:int_add_values_in_two_arrays(int,int,int): if (i < 0 || i >= a.length || i >= b.length) {     return -100000; } else {     return a[i] + b[i]; }  =>  
SDL_59:105:int_add_values_in_two_arrays(int,int,int): if (i < 0 || i >= a.length || i >= b.length) {     return -100000; } else {     return a[i] + b[i]; }  =>   if (true) {     return -100000; } else {     return a[i] + b[i]; }
SDL_60:102:int_add_values_in_two_arrays(int,int,int): return -100000;  =>   return 0;
SDL_61:104:int_add_values_in_two_arrays(int,int,int): return a[i] + b[i];  =>   return 0;
SDL_62:112:int_dot_product(int,int): int sum = 0; int i; for (i = 0; i < a.length; i++) {     sum += a[i] * b[i]; } return sum;  =>   int sum = 0; int i; return sum;
SDL_63:112:int_dot_product(int,int): sum += a[i] * b[i];  =>  
SDL_64:114:int_dot_product(int,int): for (i = 0; i < a.length; i++) {     sum += a[i] * b[i]; }  =>   for (;; i++) {     sum += a[i] * b[i]; }
SDL_65:114:int_dot_product(int,int): for (i = 0; i < a.length; i++) {     sum += a[i] * b[i]; }  =>   for (; i < a.length;) {     sum += a[i] * b[i]; }
SDL_66:115:int_dot_product(int,int): return sum;  =>   return 0;
SDL_67:122:int_array_calc1(int,int): int i; int[] b = new int[a.length]; for (i = 0; i < a.length; i++) {     b[i] = a[i] / k; } return b;  =>   int i; int[] b = new int[a.length]; return b;
SDL_68:122:int_array_calc1(int,int): b[i] = a[i] / k;  =>  
SDL_69:124:int_array_calc1(int,int): for (i = 0; i < a.length; i++) {     b[i] = a[i] / k; }  =>   for (;; i++) {     b[i] = a[i] / k; }
SDL_70:124:int_array_calc1(int,int): for (i = 0; i < a.length; i++) {     b[i] = a[i] / k; }  =>   for (; i < a.length;) {     b[i] = a[i] / k; }
SDL_71:125:int_array_calc1(int,int): return b;  =>   return 0;
SDL_72:131:int_set_min_val(int,int): int i; for (i = 0; i < a.length; i++) {     if (a[i] < k) {         a[i] = k;     } } return a;  =>   int i; return a;
SDL_73:131:int_set_min_val(int,int): if (a[i] < k) {     a[i] = k; }  =>  
SDL_74:135:int_set_min_val(int,int): for (i = 0; i < a.length; i++) {     if (a[i] < k) {         a[i] = k;     } }  =>   for (;; i++) {     if (a[i] < k) {         a[i] = k;     } }
SDL_75:135:int_set_min_val(int,int): for (i = 0; i < a.length; i++) {     if (a[i] < k) {         a[i] = k;     } }  =>   for (; i < a.length;) {     if (a[i] < k) {         a[i] = k;     } }
SDL_76:132:int_set_min_val(int,int): a[i] = k;  =>  
SDL_77:134:int_set_min_val(int,int): if (a[i] < k) {     a[i] = k; }  =>   if (true) {     a[i] = k; }
SDL_78:136:int_set_min_val(int,int): return a;  =>   return 0;
SDL_79:140:int_get_array_value(int,int): if (k - 1 >= a.length || k - 1 < 0) {     return -100000; } else {     return a[k - 1]; }  =>  
SDL_80:145:int_get_array_value(int,int): if (k - 1 >= a.length || k - 1 < 0) {     return -100000; } else {     return a[k - 1]; }  =>   if (true) {     return -100000; } else {     return a[k - 1]; }
SDL_81:142:int_get_array_value(int,int): return -100000;  =>   return 0;
SDL_82:144:int_get_array_value(int,int): return a[k - 1];  =>   return 0;
SDL_83:152:int_find_min(int): int min = a[0]; int i; for (i = 0; i < a.length; i++) {     if (a[i] < min) {         min = a[i];     } } return min;  =>   int min = a[0]; int i; return min;
SDL_84:152:int_find_min(int): if (a[i] < min) {     min = a[i]; }  =>  
SDL_85:156:int_find_min(int): for (i = 0; i < a.length; i++) {     if (a[i] < min) {         min = a[i];     } }  =>   for (;; i++) {     if (a[i] < min) {         min = a[i];     } }
SDL_86:156:int_find_min(int): for (i = 0; i < a.length; i++) {     if (a[i] < min) {         min = a[i];     } }  =>   for (; i < a.length;) {     if (a[i] < min) {         min = a[i];     } }
SDL_87:153:int_find_min(int): min = a[i];  =>  
SDL_88:155:int_find_min(int): if (a[i] < min) {     min = a[i]; }  =>   if (true) {     min = a[i]; }
SDL_89:157:int_find_min(int): return min;  =>   return 0;
SDL_90:164:int_find_diff(int,int): int i; int[] c = new int[a.length]; for (i = 0; i < a.length; i++) {     c[i] = a[i] - b[i]; } return c;  =>   int i; int[] c = new int[a.length]; return c;
SDL_91:164:int_find_diff(int,int): c[i] = a[i] - b[i];  =>  
SDL_92:166:int_find_diff(int,int): for (i = 0; i < a.length; i++) {     c[i] = a[i] - b[i]; }  =>   for (;; i++) {     c[i] = a[i] - b[i]; }
SDL_93:166:int_find_diff(int,int): for (i = 0; i < a.length; i++) {     c[i] = a[i] - b[i]; }  =>   for (; i < a.length;) {     c[i] = a[i] - b[i]; }
SDL_94:167:int_find_diff(int,int): return c;  =>   return 0;
SDL_95:174:int_array_copy(int): int i; int[] b = new int[a.length]; for (i = 0; i < a.length; i++) {     b[i] = a[i]; } return b;  =>   int i; int[] b = new int[a.length]; return b;
SDL_96:174:int_array_copy(int): b[i] = a[i];  =>  
SDL_97:176:int_array_copy(int): for (i = 0; i < a.length; i++) {     b[i] = a[i]; }  =>   for (;; i++) {     b[i] = a[i]; }
SDL_98:176:int_array_copy(int): for (i = 0; i < a.length; i++) {     b[i] = a[i]; }  =>   for (; i < a.length;) {     b[i] = a[i]; }
SDL_99:177:int_array_copy(int): return b;  =>   return 0;
SDL_100:185:double_find_euc_dist(int,int): int i; double sum = 0; for (i = 0; i < a.length; i++) {     sum += (a[i] - b[i]) * (a[i] - b[i]); } double result = Math.sqrt( sum ); return result;  =>   int i; double sum = 0; double result = Math.sqrt( sum ); return result;
SDL_101:184:double_find_euc_dist(int,int): sum += (a[i] - b[i]) * (a[i] - b[i]);  =>  
SDL_102:186:double_find_euc_dist(int,int): for (i = 0; i < a.length; i++) {     sum += (a[i] - b[i]) * (a[i] - b[i]); }  =>   for (;; i++) {     sum += (a[i] - b[i]) * (a[i] - b[i]); }
SDL_103:186:double_find_euc_dist(int,int): for (i = 0; i < a.length; i++) {     sum += (a[i] - b[i]) * (a[i] - b[i]); }  =>   for (; i < a.length;) {     sum += (a[i] - b[i]) * (a[i] - b[i]); }
SDL_104:188:double_find_euc_dist(int,int): return result;  =>   return 0;
SDL_105:196:double_find_magnitude(int): int i; double sum = 0; for (i = 0; i < a.length; i++) {     sum += a[i] * a[i]; } double result = Math.sqrt( sum ); return result;  =>   int i; double sum = 0; double result = Math.sqrt( sum ); return result;
SDL_106:195:double_find_magnitude(int): sum += a[i] * a[i];  =>  
SDL_107:197:double_find_magnitude(int): for (i = 0; i < a.length; i++) {     sum += a[i] * a[i]; }  =>   for (;; i++) {     sum += a[i] * a[i]; }
SDL_108:197:double_find_magnitude(int): for (i = 0; i < a.length; i++) {     sum += a[i] * a[i]; }  =>   for (; i < a.length;) {     sum += a[i] * a[i]; }
SDL_109:199:double_find_magnitude(int): return result;  =>   return 0;
SDL_110:206:double_manhattan_dist(int,int): int i; double sum = 0; for (i = 0; i < a.length; i++) {     sum += Math.abs( a[i] - b[i] ); } return sum;  =>   int i; double sum = 0; return sum;
SDL_111:206:double_manhattan_dist(int,int): sum += Math.abs( a[i] - b[i] );  =>  
SDL_112:208:double_manhattan_dist(int,int): for (i = 0; i < a.length; i++) {     sum += Math.abs( a[i] - b[i] ); }  =>   for (;; i++) {     sum += Math.abs( a[i] - b[i] ); }
SDL_113:208:double_manhattan_dist(int,int): for (i = 0; i < a.length; i++) {     sum += Math.abs( a[i] - b[i] ); }  =>   for (; i < a.length;) {     sum += Math.abs( a[i] - b[i] ); }
SDL_114:209:double_manhattan_dist(int,int): return sum;  =>   return 0;
SDL_115:215:double_average(int): double sum = 0; for (int i = 0; i < a.length; i++) {     sum += a[i]; } return sum / a.length;  =>   double sum = 0; return sum / a.length;
SDL_116:215:double_average(int): sum += a[i];  =>  
SDL_117:217:double_average(int): for (int i = 0; i < a.length; i++) {     sum += a[i]; }  =>   for (int i = 0;; i++) {     sum += a[i]; }
SDL_118:217:double_average(int): for (int i = 0; i < a.length; i++) {     sum += a[i]; }  =>   for (int i = 0; i < a.length;) {     sum += a[i]; }
SDL_119:218:double_average(int): return sum / a.length;  =>   return 0;
SDL_120:224:int_dec_array(int,int): int i; for (i = 0; i < a.length; i++) {     a[i] -= k; } return a;  =>   int i; return a;
SDL_121:224:int_dec_array(int,int): a[i] -= k;  =>  
SDL_122:226:int_dec_array(int,int): for (i = 0; i < a.length; i++) {     a[i] -= k; }  =>   for (;; i++) {     a[i] -= k; }
SDL_123:226:int_dec_array(int,int): for (i = 0; i < a.length; i++) {     a[i] -= k; }  =>   for (; i < a.length;) {     a[i] -= k; }
SDL_124:227:int_dec_array(int,int): return a;  =>   return 0;
SDL_125:233:double_expr1(double,double): return result;  =>   return 0;
SDL_126:239:int_find_max(int): int max = a[0]; for (int i = 0; i < a.length; i++) {     if (a[i] > max) {         max = a[i];     } } return max;  =>   int max = a[0]; return max;
SDL_127:239:int_find_max(int): if (a[i] > max) {     max = a[i]; }  =>  
SDL_128:243:int_find_max(int): for (int i = 0; i < a.length; i++) {     if (a[i] > max) {         max = a[i];     } }  =>   for (int i = 0;; i++) {     if (a[i] > max) {         max = a[i];     } }
SDL_129:243:int_find_max(int): for (int i = 0; i < a.length; i++) {     if (a[i] > max) {         max = a[i];     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] > max) {         max = a[i];     } }
SDL_130:240:int_find_max(int): max = a[i];  =>  
SDL_131:242:int_find_max(int): if (a[i] > max) {     max = a[i]; }  =>   if (true) {     max = a[i]; }
SDL_132:244:int_find_max(int): return max;  =>   return 0;
SDL_133:250:int_find_max2(int): int max = a[0] + a[1]; for (int i = 0; i < a.length - 1; i++) {     if (a[i] + a[i + 1] > max) {         max = a[i] + a[i + 1];     } } return max;  =>   int max = a[0] + a[1]; return max;
SDL_134:250:int_find_max2(int): if (a[i] + a[i + 1] > max) {     max = a[i] + a[i + 1]; }  =>  
SDL_135:254:int_find_max2(int): for (int i = 0; i < a.length - 1; i++) {     if (a[i] + a[i + 1] > max) {         max = a[i] + a[i + 1];     } }  =>   for (int i = 0;; i++) {     if (a[i] + a[i + 1] > max) {         max = a[i] + a[i + 1];     } }
SDL_136:254:int_find_max2(int): for (int i = 0; i < a.length - 1; i++) {     if (a[i] + a[i + 1] > max) {         max = a[i] + a[i + 1];     } }  =>   for (int i = 0; i < a.length - 1;) {     if (a[i] + a[i + 1] > max) {         max = a[i] + a[i + 1];     } }
SDL_137:251:int_find_max2(int): max = a[i] + a[i + 1];  =>  
SDL_138:253:int_find_max2(int): if (a[i] + a[i + 1] > max) {     max = a[i] + a[i + 1]; }  =>   if (true) {     max = a[i] + a[i + 1]; }
SDL_139:255:int_find_max2(int): return max;  =>   return 0;
SDL_140:269:double_variance(double): double sum = 0; double sum1 = 0; double var = 0; double avrg = 0; for (int i = 0; i < x.length; i++) {     sum = sum + x[i]; } avrg = sum / (double) x.length; for (int i = 0; i < x.length; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); } var = sum1 / (double) x.length; return var;  =>   double sum = 0; double sum1 = 0; double var = 0; double avrg = 0; avrg = sum / (double) x.length; for (int i = 0; i < x.length; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); } var = sum1 / (double) x.length; return var;
SDL_141:271:double_variance(double): double sum = 0; double sum1 = 0; double var = 0; double avrg = 0; for (int i = 0; i < x.length; i++) {     sum = sum + x[i]; } avrg = sum / (double) x.length; for (int i = 0; i < x.length; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); } var = sum1 / (double) x.length; return var;  =>   double sum = 0; double sum1 = 0; double var = 0; double avrg = 0; for (int i = 0; i < x.length; i++) {     sum = sum + x[i]; } for (int i = 0; i < x.length; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); } var = sum1 / (double) x.length; return var;
SDL_142:269:double_variance(double): double sum = 0; double sum1 = 0; double var = 0; double avrg = 0; for (int i = 0; i < x.length; i++) {     sum = sum + x[i]; } avrg = sum / (double) x.length; for (int i = 0; i < x.length; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); } var = sum1 / (double) x.length; return var;  =>   double sum = 0; double sum1 = 0; double var = 0; double avrg = 0; for (int i = 0; i < x.length; i++) {     sum = sum + x[i]; } avrg = sum / (double) x.length; var = sum1 / (double) x.length; return var;
SDL_143:271:double_variance(double): double sum = 0; double sum1 = 0; double var = 0; double avrg = 0; for (int i = 0; i < x.length; i++) {     sum = sum + x[i]; } avrg = sum / (double) x.length; for (int i = 0; i < x.length; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); } var = sum1 / (double) x.length; return var;  =>   double sum = 0; double sum1 = 0; double var = 0; double avrg = 0; for (int i = 0; i < x.length; i++) {     sum = sum + x[i]; } avrg = sum / (double) x.length; for (int i = 0; i < x.length; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); } return var;
SDL_144:264:double_variance(double): sum = sum + x[i];  =>  
SDL_145:266:double_variance(double): for (int i = 0; i < x.length; i++) {     sum = sum + x[i]; }  =>   for (int i = 0;; i++) {     sum = sum + x[i]; }
SDL_146:266:double_variance(double): for (int i = 0; i < x.length; i++) {     sum = sum + x[i]; }  =>   for (int i = 0; i < x.length;) {     sum = sum + x[i]; }
SDL_147:268:double_variance(double): sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg);  =>  
SDL_148:270:double_variance(double): for (int i = 0; i < x.length; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); }  =>   for (int i = 0;; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); }
SDL_149:270:double_variance(double): for (int i = 0; i < x.length; i++) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); }  =>   for (int i = 0; i < x.length;) {     sum1 = sum1 + (x[i] - avrg) * (x[i] - avrg); }
SDL_150:272:double_variance(double): return var;  =>   return 0;
SDL_151:277:int_insertion_sort(int): for (int i = 1; i < array.length; i++) {     int j = i;     int B = array[i];     while (j > 0 && array[j - 1] > B) {         array[j] = array[j - 1];         j--;     }     array[j] = B; } return array;  =>   return array;
SDL_152:280:int_insertion_sort(int): int j = i; int B = array[i]; while (j > 0 && array[j - 1] > B) {     array[j] = array[j - 1];     j--; } array[j] = B;  =>   int j = i; int B = array[i]; array[j] = B;
SDL_153:283:int_insertion_sort(int): int j = i; int B = array[i]; while (j > 0 && array[j - 1] > B) {     array[j] = array[j - 1];     j--; } array[j] = B;  =>   int j = i; int B = array[i]; while (j > 0 && array[j - 1] > B) {     array[j] = array[j - 1];     j--; }
SDL_154:285:int_insertion_sort(int): for (int i = 1; i < array.length; i++) {     int j = i;     int B = array[i];     while (j > 0 && array[j - 1] > B) {         array[j] = array[j - 1];         j--;     }     array[j] = B; }  =>   for (int i = 1;; i++) {     int j = i;     int B = array[i];     while (j > 0 && array[j - 1] > B) {         array[j] = array[j - 1];         j--;     }     array[j] = B; }
SDL_155:285:int_insertion_sort(int): for (int i = 1; i < array.length; i++) {     int j = i;     int B = array[i];     while (j > 0 && array[j - 1] > B) {         array[j] = array[j - 1];         j--;     }     array[j] = B; }  =>   for (int i = 1; i < array.length;) {     int j = i;     int B = array[i];     while (j > 0 && array[j - 1] > B) {         array[j] = array[j - 1];         j--;     }     array[j] = B; }
SDL_156:281:int_insertion_sort(int): array[j] = array[j - 1]; j--;  =>   j--;
SDL_157:281:int_insertion_sort(int): array[j] = array[j - 1]; j--;  =>   array[j] = array[j - 1];
SDL_158:283:int_insertion_sort(int): while (j > 0 && array[j - 1] > B) {     array[j] = array[j - 1];     j--; }  =>   while (true) {     array[j] = array[j - 1];     j--; }
SDL_159:286:int_insertion_sort(int): return array;  =>   return 0;
SDL_160:292:double_geometric_mean(int): long product = 1; for (int i = 0; i < a.length; i++) {     product *= a[i]; } return Math.pow( product, (double) 1 / a.length );  =>   long product = 1; return Math.pow( product, (double) 1 / a.length );
SDL_161:292:double_geometric_mean(int): product *= a[i];  =>  
SDL_162:294:double_geometric_mean(int): for (int i = 0; i < a.length; i++) {     product *= a[i]; }  =>   for (int i = 0;; i++) {     product *= a[i]; }
SDL_163:294:double_geometric_mean(int): for (int i = 0; i < a.length; i++) {     product *= a[i]; }  =>   for (int i = 0; i < a.length;) {     product *= a[i]; }
SDL_164:295:double_geometric_mean(int): return Math.pow( product, (double) 1 / a.length );  =>   return 0;
SDL_165:301:double_mean_absolute_error(int,int): int sum = 0; for (int i = 0; i < a.length; i++) {     sum += Math.abs( a[i] - b[i] ); } return (double) sum / a.length;  =>   int sum = 0; return (double) sum / a.length;
SDL_166:301:double_mean_absolute_error(int,int): sum += Math.abs( a[i] - b[i] );  =>  
SDL_167:303:double_mean_absolute_error(int,int): for (int i = 0; i < a.length; i++) {     sum += Math.abs( a[i] - b[i] ); }  =>   for (int i = 0;; i++) {     sum += Math.abs( a[i] - b[i] ); }
SDL_168:303:double_mean_absolute_error(int,int): for (int i = 0; i < a.length; i++) {     sum += Math.abs( a[i] - b[i] ); }  =>   for (int i = 0; i < a.length;) {     sum += Math.abs( a[i] - b[i] ); }
SDL_169:304:double_mean_absolute_error(int,int): return (double) sum / a.length;  =>   return 0;
SDL_170:316:double_find_median(int): int k = a.length / 2 + 1; int minIndex = 0; int minValue = a[0]; for (int i = 0; i < k; i++) {     minIndex = i;     minValue = a[i];     for (int j = i + 1; j < a.length; j++) {         if (a[j] < minValue) {             minIndex = j;             minValue = a[j];         }     }     int temp = a[i];     a[i] = a[minIndex];     a[minIndex] = temp; } if (a.length % 2 == 0) {     return (double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2; } else {     return a[a.length / 2]; }  =>   int k = a.length / 2 + 1; int minIndex = 0; int minValue = a[0]; if (a.length % 2 == 0) {     return (double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2; } else {     return a[a.length / 2]; }
SDL_171:324:double_find_median(int): int k = a.length / 2 + 1; int minIndex = 0; int minValue = a[0]; for (int i = 0; i < k; i++) {     minIndex = i;     minValue = a[i];     for (int j = i + 1; j < a.length; j++) {         if (a[j] < minValue) {             minIndex = j;             minValue = a[j];         }     }     int temp = a[i];     a[i] = a[minIndex];     a[minIndex] = temp; } if (a.length % 2 == 0) {     return (double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2; } else {     return a[a.length / 2]; }  =>   int k = a.length / 2 + 1; int minIndex = 0; int minValue = a[0]; for (int i = 0; i < k; i++) {     minIndex = i;     minValue = a[i];     for (int j = i + 1; j < a.length; j++) {         if (a[j] < minValue) {             minIndex = j;             minValue = a[j];         }     }     int temp = a[i];     a[i] = a[minIndex];     a[minIndex] = temp; }
SDL_172:322:double_find_median(int): minIndex = i; minValue = a[i]; for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } } int temp = a[i]; a[i] = a[minIndex]; a[minIndex] = temp;  =>   minValue = a[i]; for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } } int temp = a[i]; a[i] = a[minIndex]; a[minIndex] = temp;
SDL_173:322:double_find_median(int): minIndex = i; minValue = a[i]; for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } } int temp = a[i]; a[i] = a[minIndex]; a[minIndex] = temp;  =>   minIndex = i; for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } } int temp = a[i]; a[i] = a[minIndex]; a[minIndex] = temp;
SDL_174:317:double_find_median(int): minIndex = i; minValue = a[i]; for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } } int temp = a[i]; a[i] = a[minIndex]; a[minIndex] = temp;  =>   minIndex = i; minValue = a[i]; int temp = a[i]; a[i] = a[minIndex]; a[minIndex] = temp;
SDL_175:322:double_find_median(int): minIndex = i; minValue = a[i]; for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } } int temp = a[i]; a[i] = a[minIndex]; a[minIndex] = temp;  =>   minIndex = i; minValue = a[i]; for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } } int temp = a[i]; a[minIndex] = temp;
SDL_176:322:double_find_median(int): minIndex = i; minValue = a[i]; for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } } int temp = a[i]; a[i] = a[minIndex]; a[minIndex] = temp;  =>   minIndex = i; minValue = a[i]; for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } } int temp = a[i]; a[i] = a[minIndex];
SDL_177:324:double_find_median(int): for (int i = 0; i < k; i++) {     minIndex = i;     minValue = a[i];     for (int j = i + 1; j < a.length; j++) {         if (a[j] < minValue) {             minIndex = j;             minValue = a[j];         }     }     int temp = a[i];     a[i] = a[minIndex];     a[minIndex] = temp; }  =>   for (int i = 0;; i++) {     minIndex = i;     minValue = a[i];     for (int j = i + 1; j < a.length; j++) {         if (a[j] < minValue) {             minIndex = j;             minValue = a[j];         }     }     int temp = a[i];     a[i] = a[minIndex];     a[minIndex] = temp; }
SDL_178:324:double_find_median(int): for (int i = 0; i < k; i++) {     minIndex = i;     minValue = a[i];     for (int j = i + 1; j < a.length; j++) {         if (a[j] < minValue) {             minIndex = j;             minValue = a[j];         }     }     int temp = a[i];     a[i] = a[minIndex];     a[minIndex] = temp; }  =>   for (int i = 0; i < k;) {     minIndex = i;     minValue = a[i];     for (int j = i + 1; j < a.length; j++) {         if (a[j] < minValue) {             minIndex = j;             minValue = a[j];         }     }     int temp = a[i];     a[i] = a[minIndex];     a[minIndex] = temp; }
SDL_179:315:double_find_median(int): if (a[j] < minValue) {     minIndex = j;     minValue = a[j]; }  =>  
SDL_180:320:double_find_median(int): for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } }  =>   for (int j = i + 1;; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } }
SDL_181:320:double_find_median(int): for (int j = i + 1; j < a.length; j++) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } }  =>   for (int j = i + 1; j < a.length;) {     if (a[j] < minValue) {         minIndex = j;         minValue = a[j];     } }
SDL_182:317:double_find_median(int): minIndex = j; minValue = a[j];  =>   minValue = a[j];
SDL_183:317:double_find_median(int): minIndex = j; minValue = a[j];  =>   minIndex = j;
SDL_184:319:double_find_median(int): if (a[j] < minValue) {     minIndex = j;     minValue = a[j]; }  =>   if (true) {     minIndex = j;     minValue = a[j]; }
SDL_185:329:double_find_median(int): if (a.length % 2 == 0) {     return (double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2; } else {     return a[a.length / 2]; }  =>   if (true) {     return (double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2; } else {     return a[a.length / 2]; }
SDL_186:326:double_find_median(int): return (double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2;  =>   return 0;
SDL_187:328:double_find_median(int): return a[a.length / 2];  =>   return 0;
SDL_188:336:int_cartesian_product(int,int): int[][] result = new int[a.length * b.length][2]; int cnt = 0; for (int i = 0; i < a.length; i++) {     for (int j = 0; j < b.length; j++) {         result[cnt][0] = a[i];         result[cnt][1] = b[j];         cnt++;     } } return result;  =>   int[][] result = new int[a.length * b.length][2]; int cnt = 0; return result;
SDL_189:336:int_cartesian_product(int,int): for (int j = 0; j < b.length; j++) {     result[cnt][0] = a[i];     result[cnt][1] = b[j];     cnt++; }  =>  
SDL_190:342:int_cartesian_product(int,int): for (int i = 0; i < a.length; i++) {     for (int j = 0; j < b.length; j++) {         result[cnt][0] = a[i];         result[cnt][1] = b[j];         cnt++;     } }  =>   for (int i = 0;; i++) {     for (int j = 0; j < b.length; j++) {         result[cnt][0] = a[i];         result[cnt][1] = b[j];         cnt++;     } }
SDL_191:342:int_cartesian_product(int,int): for (int i = 0; i < a.length; i++) {     for (int j = 0; j < b.length; j++) {         result[cnt][0] = a[i];         result[cnt][1] = b[j];         cnt++;     } }  =>   for (int i = 0; i < a.length;) {     for (int j = 0; j < b.length; j++) {         result[cnt][0] = a[i];         result[cnt][1] = b[j];         cnt++;     } }
SDL_192:339:int_cartesian_product(int,int): result[cnt][0] = a[i]; result[cnt][1] = b[j]; cnt++;  =>   result[cnt][1] = b[j]; cnt++;
SDL_193:339:int_cartesian_product(int,int): result[cnt][0] = a[i]; result[cnt][1] = b[j]; cnt++;  =>   result[cnt][0] = a[i]; cnt++;
SDL_194:339:int_cartesian_product(int,int): result[cnt][0] = a[i]; result[cnt][1] = b[j]; cnt++;  =>   result[cnt][0] = a[i]; result[cnt][1] = b[j];
SDL_195:341:int_cartesian_product(int,int): for (int j = 0; j < b.length; j++) {     result[cnt][0] = a[i];     result[cnt][1] = b[j];     cnt++; }  =>   for (int j = 0;; j++) {     result[cnt][0] = a[i];     result[cnt][1] = b[j];     cnt++; }
SDL_196:341:int_cartesian_product(int,int): for (int j = 0; j < b.length; j++) {     result[cnt][0] = a[i];     result[cnt][1] = b[j];     cnt++; }  =>   for (int j = 0; j < b.length;) {     result[cnt][0] = a[i];     result[cnt][1] = b[j];     cnt++; }
SDL_197:343:int_cartesian_product(int,int): return result;  =>   return 0;
SDL_198:350:int_reverse(int): int[] r = new int[a.length]; int cnt = 0; for (int i = a.length - 1; i >= 0; i--) {     r[cnt] = a[i];     cnt++; } return r;  =>   int[] r = new int[a.length]; int cnt = 0; return r;
SDL_199:351:int_reverse(int): r[cnt] = a[i]; cnt++;  =>   cnt++;
SDL_200:351:int_reverse(int): r[cnt] = a[i]; cnt++;  =>   r[cnt] = a[i];
SDL_201:353:int_reverse(int): for (int i = a.length - 1; i >= 0; i--) {     r[cnt] = a[i];     cnt++; }  =>   for (int i = a.length - 1;; i--) {     r[cnt] = a[i];     cnt++; }
SDL_202:353:int_reverse(int): for (int i = a.length - 1; i >= 0; i--) {     r[cnt] = a[i];     cnt++; }  =>   for (int i = a.length - 1; i >= 0;) {     r[cnt] = a[i];     cnt++; }
SDL_203:354:int_reverse(int): return r;  =>   return 0;
SDL_204:364:boolean_check_equal_tolerance(double,double,double): if (a.length != b.length) {     return false; } for (int i = 0; i < a.length; i++) {     if (Math.abs( a[i] - b[i] ) >= tol) {         return false;     } } return true;  =>   for (int i = 0; i < a.length; i++) {     if (Math.abs( a[i] - b[i] ) >= tol) {         return false;     } } return true;
SDL_205:362:boolean_check_equal_tolerance(double,double,double): if (a.length != b.length) {     return false; } for (int i = 0; i < a.length; i++) {     if (Math.abs( a[i] - b[i] ) >= tol) {         return false;     } } return true;  =>   if (a.length != b.length) {     return false; } return true;
SDL_206:361:boolean_check_equal_tolerance(double,double,double): if (a.length != b.length) {     return false; }  =>   if (true) {     return false; }
SDL_207:360:boolean_check_equal_tolerance(double,double,double): return false;  =>   return true;
SDL_208:362:boolean_check_equal_tolerance(double,double,double): if (Math.abs( a[i] - b[i] ) >= tol) {     return false; }  =>  
SDL_209:366:boolean_check_equal_tolerance(double,double,double): for (int i = 0; i < a.length; i++) {     if (Math.abs( a[i] - b[i] ) >= tol) {         return false;     } }  =>   for (int i = 0;; i++) {     if (Math.abs( a[i] - b[i] ) >= tol) {         return false;     } }
SDL_210:366:boolean_check_equal_tolerance(double,double,double): for (int i = 0; i < a.length; i++) {     if (Math.abs( a[i] - b[i] ) >= tol) {         return false;     } }  =>   for (int i = 0; i < a.length;) {     if (Math.abs( a[i] - b[i] ) >= tol) {         return false;     } }
SDL_211:365:boolean_check_equal_tolerance(double,double,double): if (Math.abs( a[i] - b[i] ) >= tol) {     return false; }  =>   if (true) {     return false; }
SDL_212:364:boolean_check_equal_tolerance(double,double,double): return false;  =>   return true;
SDL_213:367:boolean_check_equal_tolerance(double,double,double): return true;  =>   return false;
SDL_214:377:boolean_check_equal(int,int): if (a.length != b.length) {     return false; } for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         return false;     } } return true;  =>   for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         return false;     } } return true;
SDL_215:375:boolean_check_equal(int,int): if (a.length != b.length) {     return false; } for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         return false;     } } return true;  =>   if (a.length != b.length) {     return false; } return true;
SDL_216:374:boolean_check_equal(int,int): if (a.length != b.length) {     return false; }  =>   if (true) {     return false; }
SDL_217:373:boolean_check_equal(int,int): return false;  =>   return true;
SDL_218:375:boolean_check_equal(int,int): if (a[i] != b[i]) {     return false; }  =>  
SDL_219:379:boolean_check_equal(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         return false;     } }  =>   for (int i = 0;; i++) {     if (a[i] != b[i]) {         return false;     } }
SDL_220:379:boolean_check_equal(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         return false;     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] != b[i]) {         return false;     } }
SDL_221:378:boolean_check_equal(int,int): if (a[i] != b[i]) {     return false; }  =>   if (true) {     return false; }
SDL_222:377:boolean_check_equal(int,int): return false;  =>   return true;
SDL_223:380:boolean_check_equal(int,int): return true;  =>   return false;
SDL_224:387:double_weighted_average(double,double): double sum1 = 0; double sum2 = 0; for (int i = 0; i < a.length; i++) {     sum1 += a[i] * b[i];     sum2 += b[i]; } return sum1 / sum2;  =>   double sum1 = 0; double sum2 = 0; return sum1 / sum2;
SDL_225:388:double_weighted_average(double,double): sum1 += a[i] * b[i]; sum2 += b[i];  =>   sum2 += b[i];
SDL_226:388:double_weighted_average(double,double): sum1 += a[i] * b[i]; sum2 += b[i];  =>   sum1 += a[i] * b[i];
SDL_227:390:double_weighted_average(double,double): for (int i = 0; i < a.length; i++) {     sum1 += a[i] * b[i];     sum2 += b[i]; }  =>   for (int i = 0;; i++) {     sum1 += a[i] * b[i];     sum2 += b[i]; }
SDL_228:390:double_weighted_average(double,double): for (int i = 0; i < a.length; i++) {     sum1 += a[i] * b[i];     sum2 += b[i]; }  =>   for (int i = 0; i < a.length;) {     sum1 += a[i] * b[i];     sum2 += b[i]; }
SDL_229:391:double_weighted_average(double,double): return sum1 / sum2;  =>   return 0;
SDL_230:397:int_count_k(int,int): int cnt = 0; for (int i = 0; i < a.length; i++) {     if (a[i] == k) {         cnt++;     } } return cnt;  =>   int cnt = 0; return cnt;
SDL_231:397:int_count_k(int,int): if (a[i] == k) {     cnt++; }  =>  
SDL_232:401:int_count_k(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] == k) {         cnt++;     } }  =>   for (int i = 0;; i++) {     if (a[i] == k) {         cnt++;     } }
SDL_233:401:int_count_k(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] == k) {         cnt++;     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] == k) {         cnt++;     } }
SDL_234:398:int_count_k(int,int): cnt++;  =>  
SDL_235:400:int_count_k(int,int): if (a[i] == k) {     cnt++; }  =>   if (true) {     cnt++; }
SDL_236:402:int_count_k(int,int): return cnt;  =>   return 0;
SDL_237:408:int_clip(int,int,int): int[] r = new int[a.length]; for (int i = 0; i < a.length; i++) {     if (a[i] < lowerLim) {         r[i] = lowerLim;     } else {         if (a[i] > upperLim) {             r[i] = upperLim;         } else {             r[i] = a[i];         }     } } return r;  =>   int[] r = new int[a.length]; return r;
SDL_238:408:int_clip(int,int,int): if (a[i] < lowerLim) {     r[i] = lowerLim; } else {     if (a[i] > upperLim) {         r[i] = upperLim;     } else {         r[i] = a[i];     } }  =>  
SDL_239:418:int_clip(int,int,int): for (int i = 0; i < a.length; i++) {     if (a[i] < lowerLim) {         r[i] = lowerLim;     } else {         if (a[i] > upperLim) {             r[i] = upperLim;         } else {             r[i] = a[i];         }     } }  =>   for (int i = 0;; i++) {     if (a[i] < lowerLim) {         r[i] = lowerLim;     } else {         if (a[i] > upperLim) {             r[i] = upperLim;         } else {             r[i] = a[i];         }     } }
SDL_240:418:int_clip(int,int,int): for (int i = 0; i < a.length; i++) {     if (a[i] < lowerLim) {         r[i] = lowerLim;     } else {         if (a[i] > upperLim) {             r[i] = upperLim;         } else {             r[i] = a[i];         }     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] < lowerLim) {         r[i] = lowerLim;     } else {         if (a[i] > upperLim) {             r[i] = upperLim;         } else {             r[i] = a[i];         }     } }
SDL_241:409:int_clip(int,int,int): r[i] = lowerLim;  =>  
SDL_242:417:int_clip(int,int,int): if (a[i] < lowerLim) {     r[i] = lowerLim; } else {     if (a[i] > upperLim) {         r[i] = upperLim;     } else {         r[i] = a[i];     } }  =>   if (true) {     r[i] = lowerLim; } else {     if (a[i] > upperLim) {         r[i] = upperLim;     } else {         r[i] = a[i];     } }
SDL_243:411:int_clip(int,int,int): if (a[i] > upperLim) {     r[i] = upperLim; } else {     r[i] = a[i]; }  =>  
SDL_244:412:int_clip(int,int,int): r[i] = upperLim;  =>  
SDL_245:416:int_clip(int,int,int): if (a[i] > upperLim) {     r[i] = upperLim; } else {     r[i] = a[i]; }  =>   if (true) {     r[i] = upperLim; } else {     r[i] = a[i]; }
SDL_246:414:int_clip(int,int,int): r[i] = a[i];  =>  
SDL_247:419:int_clip(int,int,int): return r;  =>   return 0;
SDL_248:425:int_elementwise_max(int,int): int[] r = new int[a.length]; for (int i = 0; i < a.length; i++) {     if (a[i] > b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } } return r;  =>   int[] r = new int[a.length]; return r;
SDL_249:425:int_elementwise_max(int,int): if (a[i] > b[i]) {     r[i] = a[i]; } else {     r[i] = b[i]; }  =>  
SDL_250:431:int_elementwise_max(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] > b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } }  =>   for (int i = 0;; i++) {     if (a[i] > b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } }
SDL_251:431:int_elementwise_max(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] > b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] > b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } }
SDL_252:426:int_elementwise_max(int,int): r[i] = a[i];  =>  
SDL_253:430:int_elementwise_max(int,int): if (a[i] > b[i]) {     r[i] = a[i]; } else {     r[i] = b[i]; }  =>   if (true) {     r[i] = a[i]; } else {     r[i] = b[i]; }
SDL_254:428:int_elementwise_max(int,int): r[i] = b[i];  =>  
SDL_255:432:int_elementwise_max(int,int): return r;  =>   return 0;
SDL_256:438:int_elementwise_min(int,int): int[] r = new int[a.length]; for (int i = 0; i < a.length; i++) {     if (a[i] < b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } } return r;  =>   int[] r = new int[a.length]; return r;
SDL_257:438:int_elementwise_min(int,int): if (a[i] < b[i]) {     r[i] = a[i]; } else {     r[i] = b[i]; }  =>  
SDL_258:444:int_elementwise_min(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] < b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } }  =>   for (int i = 0;; i++) {     if (a[i] < b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } }
SDL_259:444:int_elementwise_min(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] < b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] < b[i]) {         r[i] = a[i];     } else {         r[i] = b[i];     } }
SDL_260:439:int_elementwise_min(int,int): r[i] = a[i];  =>  
SDL_261:443:int_elementwise_min(int,int): if (a[i] < b[i]) {     r[i] = a[i]; } else {     r[i] = b[i]; }  =>   if (true) {     r[i] = a[i]; } else {     r[i] = b[i]; }
SDL_262:441:int_elementwise_min(int,int): r[i] = b[i];  =>  
SDL_263:445:int_elementwise_min(int,int): return r;  =>   return 0;
SDL_264:451:int_count_non_zeroes(int): int cnt = 0; for (int i = 0; i < a.length; i++) {     if (a[i] != 0) {         cnt++;     } } return cnt;  =>   int cnt = 0; return cnt;
SDL_265:451:int_count_non_zeroes(int): if (a[i] != 0) {     cnt++; }  =>  
SDL_266:455:int_count_non_zeroes(int): for (int i = 0; i < a.length; i++) {     if (a[i] != 0) {         cnt++;     } }  =>   for (int i = 0;; i++) {     if (a[i] != 0) {         cnt++;     } }
SDL_267:455:int_count_non_zeroes(int): for (int i = 0; i < a.length; i++) {     if (a[i] != 0) {         cnt++;     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] != 0) {         cnt++;     } }
SDL_268:452:int_count_non_zeroes(int): cnt++;  =>  
SDL_269:454:int_count_non_zeroes(int): if (a[i] != 0) {     cnt++; }  =>   if (true) {     cnt++; }
SDL_270:456:int_count_non_zeroes(int): return cnt;  =>   return 0;
SDL_271:462:int_cnt_zeroes(int): int cnt = 0; for (int i = 0; i < a.length; i++) {     if (a[i] == 0) {         cnt++;     } } return cnt;  =>   int cnt = 0; return cnt;
SDL_272:462:int_cnt_zeroes(int): if (a[i] == 0) {     cnt++; }  =>  
SDL_273:466:int_cnt_zeroes(int): for (int i = 0; i < a.length; i++) {     if (a[i] == 0) {         cnt++;     } }  =>   for (int i = 0;; i++) {     if (a[i] == 0) {         cnt++;     } }
SDL_274:466:int_cnt_zeroes(int): for (int i = 0; i < a.length; i++) {     if (a[i] == 0) {         cnt++;     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] == 0) {         cnt++;     } }
SDL_275:463:int_cnt_zeroes(int): cnt++;  =>  
SDL_276:465:int_cnt_zeroes(int): if (a[i] == 0) {     cnt++; }  =>   if (true) {     cnt++; }
SDL_277:467:int_cnt_zeroes(int): return cnt;  =>   return 0;
SDL_278:473:boolean_elementwise_equal(int,int): boolean[] r = new boolean[a.length]; for (int i = 0; i < a.length; i++) {     if (a[i] == b[i]) {         r[i] = true;     } else {         r[i] = false;     } } return r;  =>   boolean[] r = new boolean[a.length]; return r;
SDL_279:473:boolean_elementwise_equal(int,int): if (a[i] == b[i]) {     r[i] = true; } else {     r[i] = false; }  =>  
SDL_280:479:boolean_elementwise_equal(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] == b[i]) {         r[i] = true;     } else {         r[i] = false;     } }  =>   for (int i = 0;; i++) {     if (a[i] == b[i]) {         r[i] = true;     } else {         r[i] = false;     } }
SDL_281:479:boolean_elementwise_equal(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] == b[i]) {         r[i] = true;     } else {         r[i] = false;     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] == b[i]) {         r[i] = true;     } else {         r[i] = false;     } }
SDL_282:474:boolean_elementwise_equal(int,int): r[i] = true;  =>  
SDL_283:478:boolean_elementwise_equal(int,int): if (a[i] == b[i]) {     r[i] = true; } else {     r[i] = false; }  =>   if (true) {     r[i] = true; } else {     r[i] = false; }
SDL_284:476:boolean_elementwise_equal(int,int): r[i] = false;  =>  
SDL_285:480:boolean_elementwise_equal(int,int): return r;  =>   return true;
SDL_286:480:boolean_elementwise_equal(int,int): return r;  =>   return false;
SDL_287:486:boolean_elementwise_not_equal(int,int): boolean[] r = new boolean[a.length]; for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         r[i] = true;     } else {         r[i] = false;     } } return r;  =>   boolean[] r = new boolean[a.length]; return r;
SDL_288:486:boolean_elementwise_not_equal(int,int): if (a[i] != b[i]) {     r[i] = true; } else {     r[i] = false; }  =>  
SDL_289:492:boolean_elementwise_not_equal(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         r[i] = true;     } else {         r[i] = false;     } }  =>   for (int i = 0;; i++) {     if (a[i] != b[i]) {         r[i] = true;     } else {         r[i] = false;     } }
SDL_290:492:boolean_elementwise_not_equal(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         r[i] = true;     } else {         r[i] = false;     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] != b[i]) {         r[i] = true;     } else {         r[i] = false;     } }
SDL_291:487:boolean_elementwise_not_equal(int,int): r[i] = true;  =>  
SDL_292:491:boolean_elementwise_not_equal(int,int): if (a[i] != b[i]) {     r[i] = true; } else {     r[i] = false; }  =>   if (true) {     r[i] = true; } else {     r[i] = false; }
SDL_293:489:boolean_elementwise_not_equal(int,int): r[i] = false;  =>  
SDL_294:493:boolean_elementwise_not_equal(int,int): return r;  =>   return true;
SDL_295:493:boolean_elementwise_not_equal(int,int): return r;  =>   return false;
SDL_296:499:int_hamming_dist(int,int): int cnt = 0; for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         cnt++;     } } return cnt;  =>   int cnt = 0; return cnt;
SDL_297:499:int_hamming_dist(int,int): if (a[i] != b[i]) {     cnt++; }  =>  
SDL_298:503:int_hamming_dist(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         cnt++;     } }  =>   for (int i = 0;; i++) {     if (a[i] != b[i]) {         cnt++;     } }
SDL_299:503:int_hamming_dist(int,int): for (int i = 0; i < a.length; i++) {     if (a[i] != b[i]) {         cnt++;     } }  =>   for (int i = 0; i < a.length;) {     if (a[i] != b[i]) {         cnt++;     } }
SDL_300:500:int_hamming_dist(int,int): cnt++;  =>  
SDL_301:502:int_hamming_dist(int,int): if (a[i] != b[i]) {     cnt++; }  =>   if (true) {     cnt++; }
SDL_302:504:int_hamming_dist(int,int): return cnt;  =>   return 0;
VDL_1:13:int_add_values(int):i < a.length => a.length
VDL_2:13:int_add_values(int):i++ =>  
VDL_3:21:double_add_two_array_values(int,int,int):i < 0 => 0
VDL_4:21:double_add_two_array_values(int,int,int):i >= a.length => a.length
VDL_5:21:double_add_two_array_values(int,int,int):j < 0 => 0
VDL_6:21:double_add_two_array_values(int,int,int):j >= a.length => a.length
VDL_7:24:double_add_two_array_values(int,int,int):a[j] / 2.0 => 2.0
VDL_8:24:double_add_two_array_values(int,int,int):a[i] + a[j] / 2.0 => a[j] / 2.0
VDL_9:33:int_bubble(int):i >= 0 => 0
VDL_10:33:int_bubble(int):i-- =>  
VDL_11:34:int_bubble(int):j <= i => i
VDL_12:34:int_bubble(int):j <= i => j
VDL_13:34:int_bubble(int):j++ =>  
VDL_14:35:int_bubble(int):j + 1 => 1
VDL_15:35:int_bubble(int):a[j] > a[j + 1] => a[j + 1]
VDL_16:35:int_bubble(int):a[j] > a[j + 1] => a[j]
VDL_17:37:int_bubble(int):j + 1 => 1
VDL_18:38:int_bubble(int):j + 1 => 1
VDL_19:52:int_shell_sort(int):m > 0 => 0
VDL_20:53:int_shell_sort(int):j < a.length => a.length
VDL_21:53:int_shell_sort(int):j++ =>  
VDL_22:54:int_shell_sort(int):j - m => m
VDL_23:54:int_shell_sort(int):j - m => j
VDL_24:54:int_shell_sort(int):i >= 0 => 0
VDL_25:55:int_shell_sort(int):i + m => m
VDL_26:55:int_shell_sort(int):i + m => i
VDL_27:55:int_shell_sort(int):a[i + m] >= a[i] => a[i]
VDL_28:55:int_shell_sort(int):a[i + m] >= a[i] => a[i + m]
VDL_29:59:int_shell_sort(int):i + m => m
VDL_30:59:int_shell_sort(int):i + m => i
VDL_31:60:int_shell_sort(int):i + m => m
VDL_32:60:int_shell_sort(int):i + m => i
VDL_33:71:int_sequential_search(int,int):i < a.length => a.length
VDL_34:71:int_sequential_search(int,int):i++ =>  
VDL_35:72:int_sequential_search(int,int):a[i] == key => key
VDL_36:72:int_sequential_search(int,int):a[i] == key => a[i]
VDL_37:84:int_selection_sort(int):i < list.length - 1 => list.length - 1
VDL_38:84:int_selection_sort(int):i++ =>  
VDL_39:86:int_selection_sort(int):i + 1 => 1
VDL_40:86:int_selection_sort(int):j < list.length => list.length
VDL_41:86:int_selection_sort(int):j++ =>  
VDL_42:87:int_selection_sort(int):list[j] < list[min] => list[min]
VDL_43:87:int_selection_sort(int):list[j] < list[min] => list[j]
VDL_44:100:int_add_values_in_two_arrays(int,int,int):i < 0 => 0
VDL_45:100:int_add_values_in_two_arrays(int,int,int):i >= a.length => a.length
VDL_46:100:int_add_values_in_two_arrays(int,int,int):i >= b.length => b.length
VDL_47:103:int_add_values_in_two_arrays(int,int,int):a[i] + b[i] => b[i]
VDL_48:103:int_add_values_in_two_arrays(int,int,int):a[i] + b[i] => a[i]
VDL_49:111:int_dot_product(int,int):i < a.length => a.length
VDL_50:111:int_dot_product(int,int):i++ =>  
VDL_51:112:int_dot_product(int,int):a[i] * b[i] => b[i]
VDL_52:112:int_dot_product(int,int):a[i] * b[i] => a[i]
VDL_53:121:int_array_calc1(int,int):i < a.length => a.length
VDL_54:121:int_array_calc1(int,int):i++ =>  
VDL_55:122:int_array_calc1(int,int):a[i] / k => k
VDL_56:122:int_array_calc1(int,int):a[i] / k => a[i]
VDL_57:130:int_set_min_val(int,int):i < a.length => a.length
VDL_58:130:int_set_min_val(int,int):i++ =>  
VDL_59:131:int_set_min_val(int,int):a[i] < k => k
VDL_60:131:int_set_min_val(int,int):a[i] < k => a[i]
VDL_61:140:int_get_array_value(int,int):k - 1 => 1
VDL_62:140:int_get_array_value(int,int):k - 1 => 1
VDL_63:143:int_get_array_value(int,int):k - 1 => 1
VDL_64:151:int_find_min(int):i < a.length => a.length
VDL_65:151:int_find_min(int):i++ =>  
VDL_66:152:int_find_min(int):a[i] < min => min
VDL_67:152:int_find_min(int):a[i] < min => a[i]
VDL_68:163:int_find_diff(int,int):i < a.length => a.length
VDL_69:163:int_find_diff(int,int):i++ =>  
VDL_70:164:int_find_diff(int,int):a[i] - b[i] => b[i]
VDL_71:164:int_find_diff(int,int):a[i] - b[i] => a[i]
VDL_72:173:int_array_copy(int):i < a.length => a.length
VDL_73:173:int_array_copy(int):i++ =>  
VDL_74:183:double_find_euc_dist(int,int):i < a.length => a.length
VDL_75:183:double_find_euc_dist(int,int):i++ =>  
VDL_76:184:double_find_euc_dist(int,int):a[i] - b[i] => b[i]
VDL_77:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i]
VDL_78:184:double_find_euc_dist(int,int):a[i] - b[i] => b[i]
VDL_79:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i]
VDL_80:194:double_find_magnitude(int):i < a.length => a.length
VDL_81:194:double_find_magnitude(int):i++ =>  
VDL_82:195:double_find_magnitude(int):a[i] * a[i] => a[i]
VDL_83:195:double_find_magnitude(int):a[i] * a[i] => a[i]
VDL_84:205:double_manhattan_dist(int,int):i < a.length => a.length
VDL_85:205:double_manhattan_dist(int,int):i++ =>  
VDL_86:206:double_manhattan_dist(int,int):a[i] - b[i] => b[i]
VDL_87:206:double_manhattan_dist(int,int):a[i] - b[i] => a[i]
VDL_88:214:double_average(int):i < a.length => a.length
VDL_89:214:double_average(int):i++ =>  
VDL_90:217:double_average(int):sum / a.length => a.length
VDL_91:223:int_dec_array(int,int):i < a.length => a.length
VDL_92:223:int_dec_array(int,int):i++ =>  
VDL_93:231:double_expr1(double,double):b - a => a
VDL_94:231:double_expr1(double,double):b - a => b
VDL_95:231:double_expr1(double,double):(b - a) / a => b - a
VDL_96:238:int_find_max(int):i < a.length => a.length
VDL_97:238:int_find_max(int):i++ =>  
VDL_98:239:int_find_max(int):a[i] > max => max
VDL_99:239:int_find_max(int):a[i] > max => a[i]
VDL_100:248:int_find_max2(int):a[0] + a[1] => a[1]
VDL_101:248:int_find_max2(int):a[0] + a[1] => a[0]
VDL_102:249:int_find_max2(int):i < a.length - 1 => a.length - 1
VDL_103:249:int_find_max2(int):i++ =>  
VDL_104:250:int_find_max2(int):i + 1 => 1
VDL_105:250:int_find_max2(int):a[i] + a[i + 1] => a[i + 1]
VDL_106:250:int_find_max2(int):a[i] + a[i + 1] => a[i]
VDL_107:250:int_find_max2(int):a[i] + a[i + 1] > max => a[i] + a[i + 1]
VDL_108:251:int_find_max2(int):i + 1 => 1
VDL_109:251:int_find_max2(int):a[i] + a[i + 1] => a[i + 1]
VDL_110:251:int_find_max2(int):a[i] + a[i + 1] => a[i]
VDL_111:263:double_variance(double):i < x.length => x.length
VDL_112:263:double_variance(double):i++ =>  
VDL_113:264:double_variance(double):sum + x[i] => x[i]
VDL_114:264:double_variance(double):sum + x[i] => sum
VDL_115:266:double_variance(double):sum / (double) x.length => (double) x.length
VDL_116:267:double_variance(double):i < x.length => x.length
VDL_117:267:double_variance(double):i++ =>  
VDL_118:268:double_variance(double):x[i] - avrg => avrg
VDL_119:268:double_variance(double):x[i] - avrg => x[i]
VDL_120:268:double_variance(double):x[i] - avrg => avrg
VDL_121:268:double_variance(double):x[i] - avrg => x[i]
VDL_122:268:double_variance(double):sum1 + (x[i] - avrg) * (x[i] - avrg) => (x[i] - avrg) * (x[i] - avrg)
VDL_123:270:double_variance(double):sum1 / (double) x.length => (double) x.length
VDL_124:276:int_insertion_sort(int):i < array.length => array.length
VDL_125:276:int_insertion_sort(int):i++ =>  
VDL_126:279:int_insertion_sort(int):j > 0 => 0
VDL_127:279:int_insertion_sort(int):j - 1 => 1
VDL_128:279:int_insertion_sort(int):array[j - 1] > B => B
VDL_129:279:int_insertion_sort(int):array[j - 1] > B => array[j - 1]
VDL_130:280:int_insertion_sort(int):j - 1 => 1
VDL_131:281:int_insertion_sort(int):j-- =>  
VDL_132:291:double_geometric_mean(int):i < a.length => a.length
VDL_133:291:double_geometric_mean(int):i++ =>  
VDL_134:300:double_mean_absolute_error(int,int):i < a.length => a.length
VDL_135:300:double_mean_absolute_error(int,int):i++ =>  
VDL_136:301:double_mean_absolute_error(int,int):a[i] - b[i] => b[i]
VDL_137:301:double_mean_absolute_error(int,int):a[i] - b[i] => a[i]
VDL_138:311:double_find_median(int):i < k => k
VDL_139:311:double_find_median(int):i < k => i
VDL_140:311:double_find_median(int):i++ =>  
VDL_141:314:double_find_median(int):j < a.length => a.length
VDL_142:314:double_find_median(int):j++ =>  
VDL_143:315:double_find_median(int):a[j] < minValue => minValue
VDL_144:315:double_find_median(int):a[j] < minValue => a[j]
VDL_145:325:double_find_median(int):a[a.length / 2 - 1] + a[a.length / 2] => a[a.length / 2]
VDL_146:325:double_find_median(int):a[a.length / 2 - 1] + a[a.length / 2] => a[a.length / 2 - 1]
VDL_147:335:int_cartesian_product(int,int):i < a.length => a.length
VDL_148:335:int_cartesian_product(int,int):i++ =>  
VDL_149:336:int_cartesian_product(int,int):j < b.length => b.length
VDL_150:336:int_cartesian_product(int,int):j++ =>  
VDL_151:339:int_cartesian_product(int,int):cnt++ =>  
VDL_152:349:int_reverse(int):i >= 0 => 0
VDL_153:349:int_reverse(int):i-- =>  
VDL_154:351:int_reverse(int):cnt++ =>  
VDL_155:361:boolean_check_equal_tolerance(double,double,double):i < a.length => a.length
VDL_156:361:boolean_check_equal_tolerance(double,double,double):i++ =>  
VDL_157:362:boolean_check_equal_tolerance(double,double,double):a[i] - b[i] => b[i]
VDL_158:362:boolean_check_equal_tolerance(double,double,double):a[i] - b[i] => a[i]
VDL_159:362:boolean_check_equal_tolerance(double,double,double):Math.abs( a[i] - b[i] ) >= tol => Math.abs( a[i] - b[i] )
VDL_160:374:boolean_check_equal(int,int):i < a.length => a.length
VDL_161:374:boolean_check_equal(int,int):i++ =>  
VDL_162:375:boolean_check_equal(int,int):a[i] != b[i] => b[i]
VDL_163:375:boolean_check_equal(int,int):a[i] != b[i] => a[i]
VDL_164:386:double_weighted_average(double,double):i < a.length => a.length
VDL_165:386:double_weighted_average(double,double):i++ =>  
VDL_166:387:double_weighted_average(double,double):a[i] * b[i] => b[i]
VDL_167:387:double_weighted_average(double,double):a[i] * b[i] => a[i]
VDL_168:390:double_weighted_average(double,double):sum1 / sum2 => sum2
VDL_169:390:double_weighted_average(double,double):sum1 / sum2 => sum1
VDL_170:396:int_count_k(int,int):i < a.length => a.length
VDL_171:396:int_count_k(int,int):i++ =>  
VDL_172:397:int_count_k(int,int):a[i] == k => k
VDL_173:397:int_count_k(int,int):a[i] == k => a[i]
VDL_174:398:int_count_k(int,int):cnt++ =>  
VDL_175:407:int_clip(int,int,int):i < a.length => a.length
VDL_176:407:int_clip(int,int,int):i++ =>  
VDL_177:408:int_clip(int,int,int):a[i] < lowerLim => lowerLim
VDL_178:408:int_clip(int,int,int):a[i] < lowerLim => a[i]
VDL_179:411:int_clip(int,int,int):a[i] > upperLim => upperLim
VDL_180:411:int_clip(int,int,int):a[i] > upperLim => a[i]
VDL_181:424:int_elementwise_max(int,int):i < a.length => a.length
VDL_182:424:int_elementwise_max(int,int):i++ =>  
VDL_183:425:int_elementwise_max(int,int):a[i] > b[i] => b[i]
VDL_184:425:int_elementwise_max(int,int):a[i] > b[i] => a[i]
VDL_185:437:int_elementwise_min(int,int):i < a.length => a.length
VDL_186:437:int_elementwise_min(int,int):i++ =>  
VDL_187:438:int_elementwise_min(int,int):a[i] < b[i] => b[i]
VDL_188:438:int_elementwise_min(int,int):a[i] < b[i] => a[i]
VDL_189:450:int_count_non_zeroes(int):i < a.length => a.length
VDL_190:450:int_count_non_zeroes(int):i++ =>  
VDL_191:451:int_count_non_zeroes(int):a[i] != 0 => 0
VDL_192:452:int_count_non_zeroes(int):cnt++ =>  
VDL_193:461:int_cnt_zeroes(int):i < a.length => a.length
VDL_194:461:int_cnt_zeroes(int):i++ =>  
VDL_195:462:int_cnt_zeroes(int):a[i] == 0 => 0
VDL_196:463:int_cnt_zeroes(int):cnt++ =>  
VDL_197:472:boolean_elementwise_equal(int,int):i < a.length => a.length
VDL_198:472:boolean_elementwise_equal(int,int):i++ =>  
VDL_199:473:boolean_elementwise_equal(int,int):a[i] == b[i] => b[i]
VDL_200:473:boolean_elementwise_equal(int,int):a[i] == b[i] => a[i]
VDL_201:485:boolean_elementwise_not_equal(int,int):i < a.length => a.length
VDL_202:485:boolean_elementwise_not_equal(int,int):i++ =>  
VDL_203:486:boolean_elementwise_not_equal(int,int):a[i] != b[i] => b[i]
VDL_204:486:boolean_elementwise_not_equal(int,int):a[i] != b[i] => a[i]
VDL_205:498:int_hamming_dist(int,int):i < a.length => a.length
VDL_206:498:int_hamming_dist(int,int):i++ =>  
VDL_207:499:int_hamming_dist(int,int):a[i] != b[i] => b[i]
VDL_208:499:int_hamming_dist(int,int):a[i] != b[i] => a[i]
VDL_209:500:int_hamming_dist(int,int):cnt++ =>  
ODL_1:13:int_add_values(int):i < a.length => i
ODL_2:13:int_add_values(int):i < a.length => a.length
ODL_3:13:int_add_values(int):i++ => i
ODL_4:14:int_add_values(int):sum += a[i] => sum = a[i]
ODL_5:21:double_add_two_array_values(int,int,int):i < 0 => i
ODL_6:21:double_add_two_array_values(int,int,int):i < 0 => 0
ODL_7:21:double_add_two_array_values(int,int,int):i >= a.length => i
ODL_8:21:double_add_two_array_values(int,int,int):i >= a.length => a.length
ODL_9:21:double_add_two_array_values(int,int,int):i < 0 || i >= a.length => i < 0
ODL_10:21:double_add_two_array_values(int,int,int):i < 0 || i >= a.length => i >= a.length
ODL_11:21:double_add_two_array_values(int,int,int):j < 0 => j
ODL_12:21:double_add_two_array_values(int,int,int):j < 0 => 0
ODL_13:21:double_add_two_array_values(int,int,int):i < 0 || i >= a.length || j < 0 => i < 0 || i >= a.length
ODL_14:21:double_add_two_array_values(int,int,int):i < 0 || i >= a.length || j < 0 => j < 0
ODL_15:21:double_add_two_array_values(int,int,int):j >= a.length => j
ODL_16:21:double_add_two_array_values(int,int,int):j >= a.length => a.length
ODL_17:21:double_add_two_array_values(int,int,int):i < 0 || i >= a.length || j < 0 || j >= a.length => i < 0 || i >= a.length || j < 0
ODL_18:21:double_add_two_array_values(int,int,int):i < 0 || i >= a.length || j < 0 || j >= a.length => j >= a.length
ODL_19:22:double_add_two_array_values(int,int,int):-100000 => 100000
ODL_20:24:double_add_two_array_values(int,int,int):a[j] / 2.0 => a[j]
ODL_21:24:double_add_two_array_values(int,int,int):a[j] / 2.0 => 2.0
ODL_22:24:double_add_two_array_values(int,int,int):a[i] + a[j] / 2.0 => a[i]
ODL_23:24:double_add_two_array_values(int,int,int):a[i] + a[j] / 2.0 => a[j] / 2.0
ODL_24:33:int_bubble(int):a.length - 2 => a.length
ODL_25:33:int_bubble(int):a.length - 2 => 2
ODL_26:33:int_bubble(int):i >= 0 => i
ODL_27:33:int_bubble(int):i >= 0 => 0
ODL_28:33:int_bubble(int):i-- => i
ODL_29:34:int_bubble(int):j <= i => j
ODL_30:34:int_bubble(int):j <= i => i
ODL_31:34:int_bubble(int):j++ => j
ODL_32:35:int_bubble(int):j + 1 => j
ODL_33:35:int_bubble(int):j + 1 => 1
ODL_34:35:int_bubble(int):a[j] > a[j + 1] => a[j]
ODL_35:35:int_bubble(int):a[j] > a[j + 1] => a[j + 1]
ODL_36:37:int_bubble(int):j + 1 => j
ODL_37:37:int_bubble(int):j + 1 => 1
ODL_38:38:int_bubble(int):j + 1 => j
ODL_39:38:int_bubble(int):j + 1 => 1
ODL_40:52:int_shell_sort(int):a.length / 2 => a.length
ODL_41:52:int_shell_sort(int):a.length / 2 => 2
ODL_42:52:int_shell_sort(int):m > 0 => m
ODL_43:52:int_shell_sort(int):m > 0 => 0
ODL_44:52:int_shell_sort(int):m /= 2 => m = 2
ODL_45:53:int_shell_sort(int):j < a.length => j
ODL_46:53:int_shell_sort(int):j < a.length => a.length
ODL_47:53:int_shell_sort(int):j++ => j
ODL_48:54:int_shell_sort(int):j - m => j
ODL_49:54:int_shell_sort(int):j - m => m
ODL_50:54:int_shell_sort(int):i >= 0 => i
ODL_51:54:int_shell_sort(int):i >= 0 => 0
ODL_52:54:int_shell_sort(int):i -= m => i = m
ODL_53:55:int_shell_sort(int):i + m => i
ODL_54:55:int_shell_sort(int):i + m => m
ODL_55:55:int_shell_sort(int):a[i + m] >= a[i] => a[i + m]
ODL_56:55:int_shell_sort(int):a[i + m] >= a[i] => a[i]
ODL_57:59:int_shell_sort(int):i + m => i
ODL_58:59:int_shell_sort(int):i + m => m
ODL_59:60:int_shell_sort(int):i + m => i
ODL_60:60:int_shell_sort(int):i + m => m
ODL_61:71:int_sequential_search(int,int):i < a.length => i
ODL_62:71:int_sequential_search(int,int):i < a.length => a.length
ODL_63:71:int_sequential_search(int,int):i++ => i
ODL_64:72:int_sequential_search(int,int):a[i] == key => a[i]
ODL_65:72:int_sequential_search(int,int):a[i] == key => key
ODL_66:76:int_sequential_search(int,int):-1 => 1
ODL_67:84:int_selection_sort(int):list.length - 1 => list.length
ODL_68:84:int_selection_sort(int):list.length - 1 => 1
ODL_69:84:int_selection_sort(int):i < list.length - 1 => i
ODL_70:84:int_selection_sort(int):i < list.length - 1 => list.length - 1
ODL_71:84:int_selection_sort(int):i++ => i
ODL_72:86:int_selection_sort(int):i + 1 => i
ODL_73:86:int_selection_sort(int):i + 1 => 1
ODL_74:86:int_selection_sort(int):j < list.length => j
ODL_75:86:int_selection_sort(int):j < list.length => list.length
ODL_76:86:int_selection_sort(int):j++ => j
ODL_77:87:int_selection_sort(int):list[j] < list[min] => list[j]
ODL_78:87:int_selection_sort(int):list[j] < list[min] => list[min]
ODL_79:100:int_add_values_in_two_arrays(int,int,int):i < 0 => i
ODL_80:100:int_add_values_in_two_arrays(int,int,int):i < 0 => 0
ODL_81:100:int_add_values_in_two_arrays(int,int,int):i >= a.length => i
ODL_82:100:int_add_values_in_two_arrays(int,int,int):i >= a.length => a.length
ODL_83:100:int_add_values_in_two_arrays(int,int,int):i < 0 || i >= a.length => i < 0
ODL_84:100:int_add_values_in_two_arrays(int,int,int):i < 0 || i >= a.length => i >= a.length
ODL_85:100:int_add_values_in_two_arrays(int,int,int):i >= b.length => i
ODL_86:100:int_add_values_in_two_arrays(int,int,int):i >= b.length => b.length
ODL_87:100:int_add_values_in_two_arrays(int,int,int):i < 0 || i >= a.length || i >= b.length => i < 0 || i >= a.length
ODL_88:100:int_add_values_in_two_arrays(int,int,int):i < 0 || i >= a.length || i >= b.length => i >= b.length
ODL_89:101:int_add_values_in_two_arrays(int,int,int):-100000 => 100000
ODL_90:103:int_add_values_in_two_arrays(int,int,int):a[i] + b[i] => a[i]
ODL_91:103:int_add_values_in_two_arrays(int,int,int):a[i] + b[i] => b[i]
ODL_92:111:int_dot_product(int,int):i < a.length => i
ODL_93:111:int_dot_product(int,int):i < a.length => a.length
ODL_94:111:int_dot_product(int,int):i++ => i
ODL_95:112:int_dot_product(int,int):a[i] * b[i] => a[i]
ODL_96:112:int_dot_product(int,int):a[i] * b[i] => b[i]
ODL_97:112:int_dot_product(int,int):sum += a[i] * b[i] => sum = a[i] * b[i]
ODL_98:121:int_array_calc1(int,int):i < a.length => i
ODL_99:121:int_array_calc1(int,int):i < a.length => a.length
ODL_100:121:int_array_calc1(int,int):i++ => i
ODL_101:122:int_array_calc1(int,int):a[i] / k => a[i]
ODL_102:122:int_array_calc1(int,int):a[i] / k => k
ODL_103:130:int_set_min_val(int,int):i < a.length => i
ODL_104:130:int_set_min_val(int,int):i < a.length => a.length
ODL_105:130:int_set_min_val(int,int):i++ => i
ODL_106:131:int_set_min_val(int,int):a[i] < k => a[i]
ODL_107:131:int_set_min_val(int,int):a[i] < k => k
ODL_108:140:int_get_array_value(int,int):k - 1 => k
ODL_109:140:int_get_array_value(int,int):k - 1 => 1
ODL_110:140:int_get_array_value(int,int):k - 1 >= a.length => k - 1
ODL_111:140:int_get_array_value(int,int):k - 1 >= a.length => a.length
ODL_112:140:int_get_array_value(int,int):k - 1 => k
ODL_113:140:int_get_array_value(int,int):k - 1 => 1
ODL_114:140:int_get_array_value(int,int):k - 1 < 0 => k - 1
ODL_115:140:int_get_array_value(int,int):k - 1 < 0 => 0
ODL_116:140:int_get_array_value(int,int):k - 1 >= a.length || k - 1 < 0 => k - 1 >= a.length
ODL_117:140:int_get_array_value(int,int):k - 1 >= a.length || k - 1 < 0 => k - 1 < 0
ODL_118:141:int_get_array_value(int,int):-100000 => 100000
ODL_119:143:int_get_array_value(int,int):k - 1 => k
ODL_120:143:int_get_array_value(int,int):k - 1 => 1
ODL_121:151:int_find_min(int):i < a.length => i
ODL_122:151:int_find_min(int):i < a.length => a.length
ODL_123:151:int_find_min(int):i++ => i
ODL_124:152:int_find_min(int):a[i] < min => a[i]
ODL_125:152:int_find_min(int):a[i] < min => min
ODL_126:163:int_find_diff(int,int):i < a.length => i
ODL_127:163:int_find_diff(int,int):i < a.length => a.length
ODL_128:163:int_find_diff(int,int):i++ => i
ODL_129:164:int_find_diff(int,int):a[i] - b[i] => a[i]
ODL_130:164:int_find_diff(int,int):a[i] - b[i] => b[i]
ODL_131:173:int_array_copy(int):i < a.length => i
ODL_132:173:int_array_copy(int):i < a.length => a.length
ODL_133:173:int_array_copy(int):i++ => i
ODL_134:183:double_find_euc_dist(int,int):i < a.length => i
ODL_135:183:double_find_euc_dist(int,int):i < a.length => a.length
ODL_136:183:double_find_euc_dist(int,int):i++ => i
ODL_137:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i]
ODL_138:184:double_find_euc_dist(int,int):a[i] - b[i] => b[i]
ODL_139:184:double_find_euc_dist(int,int):a[i] - b[i] => a[i]
ODL_140:184:double_find_euc_dist(int,int):a[i] - b[i] => b[i]
ODL_141:184:double_find_euc_dist(int,int):(a[i] - b[i]) * (a[i] - b[i]) => a[i] - b[i]
ODL_142:184:double_find_euc_dist(int,int):(a[i] - b[i]) * (a[i] - b[i]) => a[i] - b[i]
ODL_143:184:double_find_euc_dist(int,int):sum += (a[i] - b[i]) * (a[i] - b[i]) => sum = (a[i] - b[i]) * (a[i] - b[i])
ODL_144:194:double_find_magnitude(int):i < a.length => i
ODL_145:194:double_find_magnitude(int):i < a.length => a.length
ODL_146:194:double_find_magnitude(int):i++ => i
ODL_147:195:double_find_magnitude(int):a[i] * a[i] => a[i]
ODL_148:195:double_find_magnitude(int):a[i] * a[i] => a[i]
ODL_149:195:double_find_magnitude(int):sum += a[i] * a[i] => sum = a[i] * a[i]
ODL_150:205:double_manhattan_dist(int,int):i < a.length => i
ODL_151:205:double_manhattan_dist(int,int):i < a.length => a.length
ODL_152:205:double_manhattan_dist(int,int):i++ => i
ODL_153:206:double_manhattan_dist(int,int):a[i] - b[i] => a[i]
ODL_154:206:double_manhattan_dist(int,int):a[i] - b[i] => b[i]
ODL_155:206:double_manhattan_dist(int,int):sum += Math.abs( a[i] - b[i] ) => sum = Math.abs( a[i] - b[i] )
ODL_156:214:double_average(int):i < a.length => i
ODL_157:214:double_average(int):i < a.length => a.length
ODL_158:214:double_average(int):i++ => i
ODL_159:215:double_average(int):sum += a[i] => sum = a[i]
ODL_160:217:double_average(int):sum / a.length => sum
ODL_161:217:double_average(int):sum / a.length => a.length
ODL_162:223:int_dec_array(int,int):i < a.length => i
ODL_163:223:int_dec_array(int,int):i < a.length => a.length
ODL_164:223:int_dec_array(int,int):i++ => i
ODL_165:224:int_dec_array(int,int):a[i] -= k => a[i] = k
ODL_166:231:double_expr1(double,double):b - a => b
ODL_167:231:double_expr1(double,double):b - a => a
ODL_168:231:double_expr1(double,double):(b - a) / a => b - a
ODL_169:231:double_expr1(double,double):(b - a) / a => a
ODL_170:238:int_find_max(int):i < a.length => i
ODL_171:238:int_find_max(int):i < a.length => a.length
ODL_172:238:int_find_max(int):i++ => i
ODL_173:239:int_find_max(int):a[i] > max => a[i]
ODL_174:239:int_find_max(int):a[i] > max => max
ODL_175:248:int_find_max2(int):a[0] + a[1] => a[0]
ODL_176:248:int_find_max2(int):a[0] + a[1] => a[1]
ODL_177:249:int_find_max2(int):a.length - 1 => a.length
ODL_178:249:int_find_max2(int):a.length - 1 => 1
ODL_179:249:int_find_max2(int):i < a.length - 1 => i
ODL_180:249:int_find_max2(int):i < a.length - 1 => a.length - 1
ODL_181:249:int_find_max2(int):i++ => i
ODL_182:250:int_find_max2(int):i + 1 => i
ODL_183:250:int_find_max2(int):i + 1 => 1
ODL_184:250:int_find_max2(int):a[i] + a[i + 1] => a[i]
ODL_185:250:int_find_max2(int):a[i] + a[i + 1] => a[i + 1]
ODL_186:250:int_find_max2(int):a[i] + a[i + 1] > max => a[i] + a[i + 1]
ODL_187:250:int_find_max2(int):a[i] + a[i + 1] > max => max
ODL_188:251:int_find_max2(int):i + 1 => i
ODL_189:251:int_find_max2(int):i + 1 => 1
ODL_190:251:int_find_max2(int):a[i] + a[i + 1] => a[i]
ODL_191:251:int_find_max2(int):a[i] + a[i + 1] => a[i + 1]
ODL_192:263:double_variance(double):i < x.length => i
ODL_193:263:double_variance(double):i < x.length => x.length
ODL_194:263:double_variance(double):i++ => i
ODL_195:264:double_variance(double):sum + x[i] => sum
ODL_196:264:double_variance(double):sum + x[i] => x[i]
ODL_197:266:double_variance(double):sum / (double) x.length => sum
ODL_198:266:double_variance(double):sum / (double) x.length => (double) x.length
ODL_199:267:double_variance(double):i < x.length => i
ODL_200:267:double_variance(double):i < x.length => x.length
ODL_201:267:double_variance(double):i++ => i
ODL_202:268:double_variance(double):x[i] - avrg => x[i]
ODL_203:268:double_variance(double):x[i] - avrg => avrg
ODL_204:268:double_variance(double):x[i] - avrg => x[i]
ODL_205:268:double_variance(double):x[i] - avrg => avrg
ODL_206:268:double_variance(double):(x[i] - avrg) * (x[i] - avrg) => x[i] - avrg
ODL_207:268:double_variance(double):(x[i] - avrg) * (x[i] - avrg) => x[i] - avrg
ODL_208:268:double_variance(double):sum1 + (x[i] - avrg) * (x[i] - avrg) => sum1
ODL_209:268:double_variance(double):sum1 + (x[i] - avrg) * (x[i] - avrg) => (x[i] - avrg) * (x[i] - avrg)
ODL_210:270:double_variance(double):sum1 / (double) x.length => sum1
ODL_211:270:double_variance(double):sum1 / (double) x.length => (double) x.length
ODL_212:276:int_insertion_sort(int):i < array.length => i
ODL_213:276:int_insertion_sort(int):i < array.length => array.length
ODL_214:276:int_insertion_sort(int):i++ => i
ODL_215:279:int_insertion_sort(int):j > 0 => j
ODL_216:279:int_insertion_sort(int):j > 0 => 0
ODL_217:279:int_insertion_sort(int):j - 1 => j
ODL_218:279:int_insertion_sort(int):j - 1 => 1
ODL_219:279:int_insertion_sort(int):array[j - 1] > B => array[j - 1]
ODL_220:279:int_insertion_sort(int):array[j - 1] > B => B
ODL_221:279:int_insertion_sort(int):j > 0 && array[j - 1] > B => j > 0
ODL_222:279:int_insertion_sort(int):j > 0 && array[j - 1] > B => array[j - 1] > B
ODL_223:280:int_insertion_sort(int):j - 1 => j
ODL_224:280:int_insertion_sort(int):j - 1 => 1
ODL_225:281:int_insertion_sort(int):j-- => j
ODL_226:291:double_geometric_mean(int):i < a.length => i
ODL_227:291:double_geometric_mean(int):i < a.length => a.length
ODL_228:291:double_geometric_mean(int):i++ => i
ODL_229:292:double_geometric_mean(int):product *= a[i] => product = a[i]
ODL_230:294:double_geometric_mean(int):(double) 1 / a.length => (double) 1
ODL_231:294:double_geometric_mean(int):(double) 1 / a.length => a.length
ODL_232:300:double_mean_absolute_error(int,int):i < a.length => i
ODL_233:300:double_mean_absolute_error(int,int):i < a.length => a.length
ODL_234:300:double_mean_absolute_error(int,int):i++ => i
ODL_235:301:double_mean_absolute_error(int,int):a[i] - b[i] => a[i]
ODL_236:301:double_mean_absolute_error(int,int):a[i] - b[i] => b[i]
ODL_237:301:double_mean_absolute_error(int,int):sum += Math.abs( a[i] - b[i] ) => sum = Math.abs( a[i] - b[i] )
ODL_238:303:double_mean_absolute_error(int,int):(double) sum / a.length => (double) sum
ODL_239:303:double_mean_absolute_error(int,int):(double) sum / a.length => a.length
ODL_240:308:double_find_median(int):a.length / 2 => a.length
ODL_241:308:double_find_median(int):a.length / 2 => 2
ODL_242:308:double_find_median(int):a.length / 2 + 1 => a.length / 2
ODL_243:308:double_find_median(int):a.length / 2 + 1 => 1
ODL_244:311:double_find_median(int):i < k => i
ODL_245:311:double_find_median(int):i < k => k
ODL_246:311:double_find_median(int):i++ => i
ODL_247:314:double_find_median(int):j < a.length => j
ODL_248:314:double_find_median(int):j < a.length => a.length
ODL_249:314:double_find_median(int):j++ => j
ODL_250:315:double_find_median(int):a[j] < minValue => a[j]
ODL_251:315:double_find_median(int):a[j] < minValue => minValue
ODL_252:324:double_find_median(int):a.length % 2 => a.length
ODL_253:324:double_find_median(int):a.length % 2 => 2
ODL_254:324:double_find_median(int):a.length % 2 == 0 => a.length % 2
ODL_255:324:double_find_median(int):a.length % 2 == 0 => 0
ODL_256:325:double_find_median(int):a.length / 2 => a.length
ODL_257:325:double_find_median(int):a.length / 2 => 2
ODL_258:325:double_find_median(int):a.length / 2 - 1 => a.length / 2
ODL_259:325:double_find_median(int):a.length / 2 - 1 => 1
ODL_260:325:double_find_median(int):a.length / 2 => a.length
ODL_261:325:double_find_median(int):a.length / 2 => 2
ODL_262:325:double_find_median(int):a[a.length / 2 - 1] + a[a.length / 2] => a[a.length / 2 - 1]
ODL_263:325:double_find_median(int):a[a.length / 2 - 1] + a[a.length / 2] => a[a.length / 2]
ODL_264:325:double_find_median(int):(double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2 => (double) (a[a.length / 2 - 1] + a[a.length / 2])
ODL_265:325:double_find_median(int):(double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2 => 2
ODL_266:327:double_find_median(int):a.length / 2 => a.length
ODL_267:327:double_find_median(int):a.length / 2 => 2
ODL_268:333:int_cartesian_product(int,int):a.length * b.length => a.length
ODL_269:333:int_cartesian_product(int,int):a.length * b.length => b.length
ODL_270:335:int_cartesian_product(int,int):i < a.length => i
ODL_271:335:int_cartesian_product(int,int):i < a.length => a.length
ODL_272:335:int_cartesian_product(int,int):i++ => i
ODL_273:336:int_cartesian_product(int,int):j < b.length => j
ODL_274:336:int_cartesian_product(int,int):j < b.length => b.length
ODL_275:336:int_cartesian_product(int,int):j++ => j
ODL_276:339:int_cartesian_product(int,int):cnt++ => cnt
ODL_277:349:int_reverse(int):i >= 0 => i
ODL_278:349:int_reverse(int):i >= 0 => 0
ODL_279:349:int_reverse(int):i-- => i
ODL_280:351:int_reverse(int):cnt++ => cnt
ODL_281:358:boolean_check_equal_tolerance(double,double,double):a.length != b.length => a.length
ODL_282:358:boolean_check_equal_tolerance(double,double,double):a.length != b.length => b.length
ODL_283:361:boolean_check_equal_tolerance(double,double,double):i < a.length => i
ODL_284:361:boolean_check_equal_tolerance(double,double,double):i < a.length => a.length
ODL_285:361:boolean_check_equal_tolerance(double,double,double):i++ => i
ODL_286:362:boolean_check_equal_tolerance(double,double,double):a[i] - b[i] => a[i]
ODL_287:362:boolean_check_equal_tolerance(double,double,double):a[i] - b[i] => b[i]
ODL_288:362:boolean_check_equal_tolerance(double,double,double):Math.abs( a[i] - b[i] ) >= tol => Math.abs( a[i] - b[i] )
ODL_289:362:boolean_check_equal_tolerance(double,double,double):Math.abs( a[i] - b[i] ) >= tol => tol
ODL_290:371:boolean_check_equal(int,int):a.length != b.length => a.length
ODL_291:371:boolean_check_equal(int,int):a.length != b.length => b.length
ODL_292:374:boolean_check_equal(int,int):i < a.length => i
ODL_293:374:boolean_check_equal(int,int):i < a.length => a.length
ODL_294:374:boolean_check_equal(int,int):i++ => i
ODL_295:375:boolean_check_equal(int,int):a[i] != b[i] => a[i]
ODL_296:375:boolean_check_equal(int,int):a[i] != b[i] => b[i]
ODL_297:386:double_weighted_average(double,double):i < a.length => i
ODL_298:386:double_weighted_average(double,double):i < a.length => a.length
ODL_299:386:double_weighted_average(double,double):i++ => i
ODL_300:387:double_weighted_average(double,double):a[i] * b[i] => a[i]
ODL_301:387:double_weighted_average(double,double):a[i] * b[i] => b[i]
ODL_302:387:double_weighted_average(double,double):sum1 += a[i] * b[i] => sum1 = a[i] * b[i]
ODL_303:388:double_weighted_average(double,double):sum2 += b[i] => sum2 = b[i]
ODL_304:390:double_weighted_average(double,double):sum1 / sum2 => sum1
ODL_305:390:double_weighted_average(double,double):sum1 / sum2 => sum2
ODL_306:396:int_count_k(int,int):i < a.length => i
ODL_307:396:int_count_k(int,int):i < a.length => a.length
ODL_308:396:int_count_k(int,int):i++ => i
ODL_309:397:int_count_k(int,int):a[i] == k => a[i]
ODL_310:397:int_count_k(int,int):a[i] == k => k
ODL_311:398:int_count_k(int,int):cnt++ => cnt
ODL_312:407:int_clip(int,int,int):i < a.length => i
ODL_313:407:int_clip(int,int,int):i < a.length => a.length
ODL_314:407:int_clip(int,int,int):i++ => i
ODL_315:408:int_clip(int,int,int):a[i] < lowerLim => a[i]
ODL_316:408:int_clip(int,int,int):a[i] < lowerLim => lowerLim
ODL_317:411:int_clip(int,int,int):a[i] > upperLim => a[i]
ODL_318:411:int_clip(int,int,int):a[i] > upperLim => upperLim
ODL_319:424:int_elementwise_max(int,int):i < a.length => i
ODL_320:424:int_elementwise_max(int,int):i < a.length => a.length
ODL_321:424:int_elementwise_max(int,int):i++ => i
ODL_322:425:int_elementwise_max(int,int):a[i] > b[i] => a[i]
ODL_323:425:int_elementwise_max(int,int):a[i] > b[i] => b[i]
ODL_324:437:int_elementwise_min(int,int):i < a.length => i
ODL_325:437:int_elementwise_min(int,int):i < a.length => a.length
ODL_326:437:int_elementwise_min(int,int):i++ => i
ODL_327:438:int_elementwise_min(int,int):a[i] < b[i] => a[i]
ODL_328:438:int_elementwise_min(int,int):a[i] < b[i] => b[i]
ODL_329:450:int_count_non_zeroes(int):i < a.length => i
ODL_330:450:int_count_non_zeroes(int):i < a.length => a.length
ODL_331:450:int_count_non_zeroes(int):i++ => i
ODL_332:451:int_count_non_zeroes(int):a[i] != 0 => a[i]
ODL_333:451:int_count_non_zeroes(int):a[i] != 0 => 0
ODL_334:452:int_count_non_zeroes(int):cnt++ => cnt
ODL_335:461:int_cnt_zeroes(int):i < a.length => i
ODL_336:461:int_cnt_zeroes(int):i < a.length => a.length
ODL_337:461:int_cnt_zeroes(int):i++ => i
ODL_338:462:int_cnt_zeroes(int):a[i] == 0 => a[i]
ODL_339:462:int_cnt_zeroes(int):a[i] == 0 => 0
ODL_340:463:int_cnt_zeroes(int):cnt++ => cnt
ODL_341:472:boolean_elementwise_equal(int,int):i < a.length => i
ODL_342:472:boolean_elementwise_equal(int,int):i < a.length => a.length
ODL_343:472:boolean_elementwise_equal(int,int):i++ => i
ODL_344:473:boolean_elementwise_equal(int,int):a[i] == b[i] => a[i]
ODL_345:473:boolean_elementwise_equal(int,int):a[i] == b[i] => b[i]
ODL_346:485:boolean_elementwise_not_equal(int,int):i < a.length => i
ODL_347:485:boolean_elementwise_not_equal(int,int):i < a.length => a.length
ODL_348:485:boolean_elementwise_not_equal(int,int):i++ => i
ODL_349:486:boolean_elementwise_not_equal(int,int):a[i] != b[i] => a[i]
ODL_350:486:boolean_elementwise_not_equal(int,int):a[i] != b[i] => b[i]
ODL_351:498:int_hamming_dist(int,int):i < a.length => i
ODL_352:498:int_hamming_dist(int,int):i < a.length => a.length
ODL_353:498:int_hamming_dist(int,int):i++ => i
ODL_354:499:int_hamming_dist(int,int):a[i] != b[i] => a[i]
ODL_355:499:int_hamming_dist(int,int):a[i] != b[i] => b[i]
ODL_356:500:int_hamming_dist(int,int):cnt++ => cnt
CDL_1:21:double_add_two_array_values(int,int,int):i < 0 => i
CDL_2:21:double_add_two_array_values(int,int,int):j < 0 => j
CDL_3:22:double_add_two_array_values(int,int,int):-100000 =>  
CDL_4:24:double_add_two_array_values(int,int,int):a[j] / 2.0 => a[j]
CDL_5:33:int_bubble(int):a.length - 2 => a.length
CDL_6:33:int_bubble(int):i >= 0 => i
CDL_7:35:int_bubble(int):j + 1 => j
CDL_8:37:int_bubble(int):j + 1 => j
CDL_9:38:int_bubble(int):j + 1 => j
CDL_10:52:int_shell_sort(int):a.length / 2 => a.length
CDL_11:52:int_shell_sort(int):m > 0 => m
CDL_12:54:int_shell_sort(int):i >= 0 => i
CDL_13:76:int_sequential_search(int,int):-1 =>  
CDL_14:84:int_selection_sort(int):list.length - 1 => list.length
CDL_15:86:int_selection_sort(int):i + 1 => i
CDL_16:100:int_add_values_in_two_arrays(int,int,int):i < 0 => i
CDL_17:101:int_add_values_in_two_arrays(int,int,int):-100000 =>  
CDL_18:140:int_get_array_value(int,int):k - 1 => k
CDL_19:140:int_get_array_value(int,int):k - 1 => k
CDL_20:140:int_get_array_value(int,int):k - 1 < 0 => k - 1
CDL_21:141:int_get_array_value(int,int):-100000 =>  
CDL_22:143:int_get_array_value(int,int):k - 1 => k
CDL_23:249:int_find_max2(int):a.length - 1 => a.length
CDL_24:250:int_find_max2(int):i + 1 => i
CDL_25:251:int_find_max2(int):i + 1 => i
CDL_26:279:int_insertion_sort(int):j > 0 => j
CDL_27:279:int_insertion_sort(int):j - 1 => j
CDL_28:280:int_insertion_sort(int):j - 1 => j
CDL_29:308:double_find_median(int):a.length / 2 => a.length
CDL_30:308:double_find_median(int):a.length / 2 + 1 => a.length / 2
CDL_31:324:double_find_median(int):a.length % 2 => a.length
CDL_32:324:double_find_median(int):a.length % 2 == 0 => a.length % 2
CDL_33:325:double_find_median(int):a.length / 2 => a.length
CDL_34:325:double_find_median(int):a.length / 2 - 1 => a.length / 2
CDL_35:325:double_find_median(int):a.length / 2 => a.length
CDL_36:325:double_find_median(int):(double) (a[a.length / 2 - 1] + a[a.length / 2]) / 2 => (double) (a[a.length / 2 - 1] + a[a.length / 2])
CDL_37:327:double_find_median(int):a.length / 2 => a.length
CDL_38:349:int_reverse(int):i >= 0 => i
CDL_39:451:int_count_non_zeroes(int):a[i] != 0 => a[i]
CDL_40:462:int_cnt_zeroes(int):a[i] == 0 => a[i]
